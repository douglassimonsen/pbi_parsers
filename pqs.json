["Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\Documents\\2016 09 06 Contoso - Sales.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"PurchAgain\", Int64.Type}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Conditional Column\",{{\"Custom\", \"Sale Size\"}, {\"PurchAgain\", \"RePurch\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('Sales'[OrderDate])), 1, 1), Date(Year(MAX('Sales'[OrderDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\Documents\\2016 09 06 Contoso - Sales.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"PurchAgain\", Int64.Type}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Conditional Column\",{{\"Custom\", \"Sale Size\"}, {\"PurchAgain\", \"RePurch\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('Sales'[OrderDate])), 1, 1), Date(Year(MAX('Sales'[OrderDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\Documents\\2016 09 06 Contoso - Sales.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"PurchAgain\", Int64.Type}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Conditional Column\",{{\"Custom\", \"Sale Size\"}, {\"PurchAgain\", \"RePurch\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('Sales'[OrderDate])), 1, 1), Date(Year(MAX('Sales'[OrderDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\Documents\\2016 09 06 Contoso - Sales.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"PurchAgain\", Int64.Type}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Conditional Column\",{{\"Custom\", \"Sale Size\"}, {\"PurchAgain\", \"RePurch\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('Sales'[OrderDate])), 1, 1), Date(Year(MAX('Sales'[OrderDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\Documents\\2016 09 06 Contoso - Sales.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"PurchAgain\", Int64.Type}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Conditional Column\",{{\"Custom\", \"Sale Size\"}, {\"PurchAgain\", \"RePurch\"}}),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Renamed Columns\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}})\nin\n    #\"Renamed Columns1\"", "Calendar(Date(Year(MIN('Sales'[OrderDate])), 1, 1), Date(Year(MAX('Sales'[OrderDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\Documents\\2016 09 06 Contoso - Sales.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"PurchAgain\", Int64.Type}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Conditional Column\",{{\"Custom\", \"Sale Size\"}, {\"PurchAgain\", \"RePurch\"}}),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Renamed Columns\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\Documents\\2016 09 06 Contoso - Sales.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"PurchAgain\", Int64.Type}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Conditional Column\",{{\"Custom\", \"Sale Size\"}, {\"PurchAgain\", \"RePurch\"}}),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Renamed Columns\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}})\nin\n    #\"Renamed Columns1\"", "Calendar(Date(Year(MIN('Sales'[OrderDate])), 1, 1), Date(Year(MAX('Sales'[OrderDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"SalesAmount\", \"Sales Amount\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Customers_table = Source{[Name=\"Customers\",Signature=\"table\"]}[Data]\nin\n    Customers_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Categories_table = Source{[Name=\"Categories\",Signature=\"table\"]}[Data]\nin\n    Categories_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Orders_table = Source{[Name=\"Orders\",Signature=\"table\"]}[Data]\nin\n    Orders_table", "Calendar(Date(Year(MIN('Orders'[OrderDate])), 1, 1), Date(Year(MAX('Orders'[OrderDate])), 12, 31))", "Calendar(Date(Year(MIN('Orders'[RequiredDate])), 1, 1), Date(Year(MAX('Orders'[RequiredDate])), 12, 31))", "Calendar(Date(Year(MIN('Orders'[ShippedDate])), 1, 1), Date(Year(MAX('Orders'[ShippedDate])), 12, 31))", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Order_Details_table = Source{[Name=\"Order_Details\",Signature=\"table\"]}[Data]\nin\n    Order_Details_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Products_table = Source{[Name=\"Products\",Signature=\"table\"]}[Data]\nin\n    Products_table", "let\n    Source = {1..1000},\n    #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Converted to Table\",{{\"Column1\", type text}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Changed Type\",\"60\",\"not a number\",Replacer.ReplaceText,{\"Column1\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"67\",\"meh\",Replacer.ReplaceText,{\"Column1\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"500\",\"blah\",Replacer.ReplaceText,{\"Column1\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"999\",\"hello, I am an error\",Replacer.ReplaceText,{\"Column1\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Replaced Value3\",{{\"Column1\", Int64.Type}})\nin\n    #\"Changed Type1\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = OData.Feed(\"http://services.odata.org/V4/Northwind/Northwind.svc/\"),\n    Customers_table = Source{[Name=\"Customers\",Signature=\"table\"]}[Data]\nin\n    Customers_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V4/Northwind/Northwind.svc/\"),\n    Orders_table = Source{[Name=\"Orders\",Signature=\"table\"]}[Data]\nin\n    Orders_table", "Calendar(Date(Year(MIN('Orders'[OrderDate])), 1, 1), Date(Year(MAX('Orders'[OrderDate])), 12, 31))", "Calendar(Date(Year(MIN('Orders'[RequiredDate])), 1, 1), Date(Year(MAX('Orders'[RequiredDate])), 12, 31))", "Calendar(Date(Year(MIN('Orders'[ShippedDate])), 1, 1), Date(Year(MAX('Orders'[ShippedDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlTSUXLKzMkBUiERSrE60UpGQGY4RMTZESxiDBXJTMwFsSCCJkBmVH4qkPSLVIqNBQA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [ID = _t, #\"First Name\" = _t, State = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ID\", Int64.Type}, {\"First Name\", type text}, {\"State\", type text}}),\n    #\"Merged Queries\" = Table.FuzzyNestedJoin(#\"Changed Type\",{\"First Name\"},Sales,{\"Sales Person\"},\"Sales\",JoinKind.LeftOuter,[IgnoreCase=true, IgnoreSpace=true]),\n    #\"Expanded Sales\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Sales\", {\"ID\", \"Sales Person\", \"Sales Amount\"}, {\"Sales.ID\", \"Sales.Sales Person\", \"Sales.Sales Amount\"})\nin\n    #\"Expanded Sales\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"Rc49DoAwCAbQuzB3sPRPRr2EQ9NB49Kkzl5fSlGnwkvhI2ewYGCtrfFjpwmKyYBcb4NQyXF9M9X96uqVPTfH+Ok8ebGgC6tgEIvfeJ8mQtHEzXLKxjd61uiRY9GJ0n9jiAlKeQA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [ID = _t, #\"Sales Person\" = _t, #\"Sales Amount\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ID\", Int64.Type}, {\"Sales Amount\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Customers_table = Source{[Name=\"Customers\",Signature=\"table\"]}[Data]\nin\n    Customers_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Categories_table = Source{[Name=\"Categories\",Signature=\"table\"]}[Data]\nin\n    Categories_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Orders_table = Source{[Name=\"Orders\",Signature=\"table\"]}[Data]\nin\n    Orders_table", "Calendar(Date(Year(MIN('Orders'[OrderDate])), 1, 1), Date(Year(MAX('Orders'[OrderDate])), 12, 31))", "Calendar(Date(Year(MIN('Orders'[RequiredDate])), 1, 1), Date(Year(MAX('Orders'[RequiredDate])), 12, 31))", "Calendar(Date(Year(MIN('Orders'[ShippedDate])), 1, 1), Date(Year(MAX('Orders'[ShippedDate])), 12, 31))", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Order_Details_table = Source{[Name=\"Order_Details\",Signature=\"table\"]}[Data]\nin\n    Order_Details_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Products_table = Source{[Name=\"Products\",Signature=\"table\"]}[Data]\nin\n    Products_table", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Customers_table = Source{[Name=\"Customers\",Signature=\"table\"]}[Data]\nin\n    Customers_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Categories_table = Source{[Name=\"Categories\",Signature=\"table\"]}[Data]\nin\n    Categories_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Orders_table = Source{[Name=\"Orders\",Signature=\"table\"]}[Data]\nin\n    Orders_table", "Calendar(Date(Year(MIN('Orders'[OrderDate])), 1, 1), Date(Year(MAX('Orders'[OrderDate])), 12, 31))", "Calendar(Date(Year(MIN('Orders'[RequiredDate])), 1, 1), Date(Year(MAX('Orders'[RequiredDate])), 12, 31))", "Calendar(Date(Year(MIN('Orders'[ShippedDate])), 1, 1), Date(Year(MAX('Orders'[ShippedDate])), 12, 31))", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Order_Details_table = Source{[Name=\"Order_Details\",Signature=\"table\"]}[Data]\nin\n    Order_Details_table", "let\n    Source = OData.Feed(\"http://services.odata.org/V3/Northwind/Northwind.svc/\"),\n    Products_table = Source{[Name=\"Products\",Signature=\"table\"]}[Data]\nin\n    Products_table", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"SalesOrderID\", \"OrderDate\", \"Country\", \"SalesChannelCode\", \"ProdID\", \"StyleName\", \"CustomerAccountNumber\", \"StoreKey\", \"ProductLabel\", \"ProductName\", \"ProductDescription\", \"Manufacturer\", \"BrandName\", \"Class\", \"Color\", \"StockType\", \"UnitCost\", \"Units\", \"UnitPrice\", \"SalesTax\", \"Freight\", \"SalesAmount\", \"PurchAgain\", \"NSAT\", \"SubCategory\", \"Category\", \"Sale Size\"})\nin\n    #\"Reordered Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"SalesOrderID\", \"OrderDate\", \"Country\", \"SalesChannelCode\", \"ProdID\", \"StyleName\", \"CustomerAccountNumber\", \"StoreKey\", \"ProductLabel\", \"ProductName\", \"ProductDescription\", \"Manufacturer\", \"BrandName\", \"Class\", \"Color\", \"StockType\", \"UnitCost\", \"Units\", \"UnitPrice\", \"SalesTax\", \"Freight\", \"SalesAmount\", \"PurchAgain\", \"NSAT\", \"SubCategory\", \"Category\", \"Sale Size\"})\nin\n    #\"Reordered Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"SalesOrderID\", \"OrderDate\", \"Country\", \"SalesChannelCode\", \"ProdID\", \"StyleName\", \"CustomerAccountNumber\", \"StoreKey\", \"ProductLabel\", \"ProductName\", \"ProductDescription\", \"Manufacturer\", \"BrandName\", \"Class\", \"Color\", \"StockType\", \"UnitCost\", \"Units\", \"UnitPrice\", \"SalesTax\", \"Freight\", \"SalesAmount\", \"PurchAgain\", \"NSAT\", \"SubCategory\", \"Category\", \"Sale Size\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Reordered Columns\",{{\"BrandName\", \"Brand Name\"}, {\"SalesAmount\", \"Sales Amount\"}, {\"UnitCost\", \"Unit Cost\"}, {\"UnitPrice\", \"Unit Price\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"SalesOrderID\", \"OrderDate\", \"Country\", \"SalesChannelCode\", \"ProdID\", \"StyleName\", \"CustomerAccountNumber\", \"StoreKey\", \"ProductLabel\", \"ProductName\", \"ProductDescription\", \"Manufacturer\", \"BrandName\", \"Class\", \"Color\", \"StockType\", \"UnitCost\", \"Units\", \"UnitPrice\", \"SalesTax\", \"Freight\", \"SalesAmount\", \"PurchAgain\", \"NSAT\", \"SubCategory\", \"Category\", \"Sale Size\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Reordered Columns\",{{\"BrandName\", \"Brand Name\"}, {\"SalesAmount\", \"Sales Amount\"}, {\"UnitCost\", \"Unit Cost\"}, {\"UnitPrice\", \"Unit Price\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"SalesOrderID\", \"OrderDate\", \"Country\", \"SalesChannelCode\", \"ProdID\", \"StyleName\", \"CustomerAccountNumber\", \"StoreKey\", \"ProductLabel\", \"ProductName\", \"ProductDescription\", \"Manufacturer\", \"BrandName\", \"Class\", \"Color\", \"StockType\", \"UnitCost\", \"Units\", \"UnitPrice\", \"SalesTax\", \"Freight\", \"SalesAmount\", \"PurchAgain\", \"NSAT\", \"SubCategory\", \"Category\", \"Sale Size\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Reordered Columns\",{{\"BrandName\", \"Brand Name\"}, {\"SalesAmount\", \"Sales Amount\"}, {\"UnitCost\", \"Unit Cost\"}, {\"UnitPrice\", \"Unit Price\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"SalesOrderID\", \"OrderDate\", \"Country\", \"SalesChannelCode\", \"ProdID\", \"StyleName\", \"CustomerAccountNumber\", \"StoreKey\", \"ProductLabel\", \"ProductName\", \"ProductDescription\", \"Manufacturer\", \"BrandName\", \"Class\", \"Color\", \"StockType\", \"UnitCost\", \"Units\", \"UnitPrice\", \"SalesTax\", \"Freight\", \"SalesAmount\", \"PurchAgain\", \"NSAT\", \"SubCategory\", \"Category\", \"Sale Size\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Reordered Columns\",{{\"BrandName\", \"Brand Name\"}, {\"SalesAmount\", \"Sales Amount\"}, {\"UnitCost\", \"Unit Cost\"}, {\"UnitPrice\", \"Unit Price\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"SalesOrderID\", \"OrderDate\", \"Country\", \"SalesChannelCode\", \"ProdID\", \"StyleName\", \"CustomerAccountNumber\", \"StoreKey\", \"ProductLabel\", \"ProductName\", \"ProductDescription\", \"Manufacturer\", \"BrandName\", \"Class\", \"Color\", \"StockType\", \"UnitCost\", \"Units\", \"UnitPrice\", \"SalesTax\", \"Freight\", \"SalesAmount\", \"PurchAgain\", \"NSAT\", \"SubCategory\", \"Category\", \"Sale Size\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Reordered Columns\",{{\"BrandName\", \"Brand Name\"}, {\"SalesAmount\", \"Sales Amount\"}, {\"UnitCost\", \"Unit Cost\"}, {\"UnitPrice\", \"Unit Price\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderID\", type text}, {\"Country\", type text}, {\"OrderDate\", type date}, {\"SalesChannelCode\", type text}, {\"ProdID\", Int64.Type}, {\"StyleName\", type text}, {\"CustomerAccountNumber\", type text}, {\"StoreKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"Color\", type text}, {\"StockType\", type text}, {\"Units\", Int64.Type}, {\"SalesAmount\", type number}, {\"NSAT\", Int64.Type}, {\"SubCategory\", type text}, {\"Category\", type text}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Custom\", each if [SalesAmount] >= 5000 then \"Large\" else if [SalesAmount] >= 1000 then \"Medium\" else \"Small\"),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Added Conditional Column\", \"ProductName\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"ProductName.1\", \"ProductName.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"ProductName.1\", type text}, {\"ProductName.2\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"ProductName.2\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"ProductName.1\", \"ProductName\"}, {\"Custom\", \"Sale Size\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"SalesOrderID\", \"OrderDate\", \"Country\", \"SalesChannelCode\", \"ProdID\", \"StyleName\", \"CustomerAccountNumber\", \"StoreKey\", \"ProductLabel\", \"ProductName\", \"ProductDescription\", \"Manufacturer\", \"BrandName\", \"Class\", \"Color\", \"StockType\", \"UnitCost\", \"Units\", \"UnitPrice\", \"SalesTax\", \"Freight\", \"SalesAmount\", \"PurchAgain\", \"NSAT\", \"SubCategory\", \"Category\", \"Sale Size\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Reordered Columns\",{{\"BrandName\", \"Brand Name\"}, {\"SalesAmount\", \"Sales Amount\"}, {\"UnitCost\", \"Unit Cost\"}, {\"UnitPrice\", \"Unit Price\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}}),\n    #\"Inserted Month Name\" = Table.AddColumn(#\"Changed Type\", \"Month Name\", each Date.MonthName([Date]), type text),\n    #\"Extracted First Characters\" = Table.TransformColumns(#\"Inserted Month Name\", {{\"Month Name\", each Text.Start(_, 3), type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Extracted First Characters\",{{\"Month Name\", \"Month\"}}),\n    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each Date.Year([Date]), Int64.Type),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Year\",{{\"Year\", type text}}),\n    #\"Inserted Month\" = Table.AddColumn(#\"Changed Type1\", \"Month.1\", each Date.Month([Date]), Int64.Type),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Inserted Month\",{{\"Month.1\", \"MonthN\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\",{\"Date\", \"Month\", \"MonthN\", \"Year\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Products_Table = Source{[Item=\"Products\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Products_Table,{{\"ProductKey\", Int64.Type}, {\"ProductLabel\", Int64.Type}, {\"ProductName\", type text}, {\"ProductDescription\", type text}, {\"Manufacturer\", type text}, {\"BrandName\", type text}, {\"Class\", type text}, {\"StyleName\", Int64.Type}, {\"ColorName\", type text}, {\"StockTypeName\", type text}, {\"UnitCost\", type number}, {\"UnitPrice\", type number}, {\"SubCategory\", type text}, {\"GeneralCategory\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Stores_Table = Source{[Item=\"Stores\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Stores_Table,{{\"StoreKey\", Int64.Type}, {\"GeographyKey\", Int64.Type}, {\"StoreManager\", Int64.Type}, {\"StoreType\", type text}, {\"StoreName\", type text}, {\"StoreDescription\", type text}, {\"Status\", type text}, {\"ZipCode\", Int64.Type}, {\"ZipCodeExtension\", Int64.Type}, {\"StorePhone\", type text}, {\"StoreFax\", type text}, {\"AddressLine1\", type text}, {\"AddressLine2\", type text}, {\"EmployeeCount\", Int64.Type}, {\"SellingAreaSize\", Int64.Type}, {\"GeoLocation\", type text}, {\"Geometry\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\amac\\OneDrive - Microsoft\\Reports and Datasets\\2016 09 06 Contoso.xlsx\"), null, true),\n    Inventory_Table = Source{[Item=\"Inventory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Inventory_Table,{{\"InventoryRecID\", Int64.Type}, {\"InvDate\", type date}, {\"StoreKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"ComboKey\", type number}, {\"OnHandQuantity\", Int64.Type}, {\"OnOrderQuantity\", Int64.Type}, {\"SafetyStockQuantity\", Int64.Type}, {\"UnitCost\", type number}, {\"DaysInStock\", Int64.Type}, {\"MinDayInStock\", Int64.Type}, {\"MaxDayInStock\", Int64.Type}, {\"Aging\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Inventory'[InvDate])), 1, 1), Date(Year(MAX('Inventory'[InvDate])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\juluczni\\OneDrive - Microsoft\\Hotel Bookings.xlsx\"), null, true),\n    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Promo Code\", type text}, {\"Status\", type text}, {\"Lead time\", Int64.Type}, {\"Purchase Year\", Int64.Type}, {\"Purchase month name\", type text}, {\"Purchase week number\", Int64.Type}, {\"Purchase day of the month\", Int64.Type}, {\"Stays in weekend nights\", Int64.Type}, {\"Stays in week nights\", Int64.Type}, {\"Adults\", Int64.Type}, {\"Children\", Int64.Type}, {\"Babies\", Int64.Type}, {\"Brand\", type text}, {\"Country of origin\", type text}, {\"Product Type\", type text}, {\"Age Group\", type text}, {\"Is repeated guest\", type text}, {\"Previous cancelations\", Int64.Type}, {\"Previous bookings not canceled\", Int64.Type}, {\"Reserved room type code\", type text}, {\"Assigned room type code\", type text}, {\"Booking changes\", Int64.Type}, {\"Customer Segment\", type text}, {\"City\", type text}, {\"Agent\", Int64.Type}, {\"Company\", type text}, {\"Days in waiting list\", Int64.Type}, {\"Region\", type text}, {\"Average Daily Rate\", type number}, {\"Required parking spaces\", Int64.Type}, {\"Total of special requests\", Int64.Type}, {\"Reservation status\", type text}, {\"Reservation status date\", type date}, {\"No. of Guests\", Int64.Type}, {\"Purchase month\", Int64.Type}, {\"Purchase date\", type date}, {\"Booking ID\", Int64.Type}, {\"Revenue\", type number}, {\"Assigned room type\", type text}, {\"Purchase Size\", type text}, {\"Loyalty card\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Booking ID\", \"Transaction ID\"}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Renamed Columns\", \"Purchase\", each Date.AddMonths([Purchase date], 32)),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Added Custom\",{{\"Purchase\", \"Purchasing Date\"}}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns1\",{{\"Purchasing Date\", type date}}),\n    #\"Renamed Columns2\" = Table.RenameColumns(#\"Changed Type1\",{{\"Country of origin\", \"Country\"}, {\"Is repeated guest\", \"Repeat customer\"}, {\"Transaction ID\", \"Customer\"}, {\"Average Daily Rate\", \"Time Spent on Website\"}, {\"Revenue\", \"Revenue Total\"}, {\"Product Type\", \"Product\"}})\nin\n    #\"Renamed Columns2\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "Calendar(Date(Year(MIN('Online Sales'[Reservation status date])), 1, 1), Date(Year(MAX('Online Sales'[Reservation status date])), 12, 31))", "Calendar(Date(Year(MIN('Online Sales'[Purchase date])), 1, 1), Date(Year(MAX('Online Sales'[Purchase date])), 12, 31))", "Calendar(Date(Year(MIN('Online Sales'[Purchasing Date])), 1, 1), Date(Year(MAX('Online Sales'[Purchasing Date])), 12, 31))", "let\n    Source = Csv.Document(File.Contents(\"C:\\Users\\juluczni\\Documents\\Transactions by Region and City.csv\"),[Delimiter=\",\", Columns=4, Encoding=65001, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"City\", type text}, {\"Revenue per transaction\", Currency.Type}, {\"Transactions\", Int64.Type}, {\"Region\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimCustomer = Source{[Schema=\"dbo\",Item=\"DimCustomer\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_DimCustomer,{\"CustomerKey\", \"CustomerAlternateKey\", \"FirstName\", \"LastName\", \"DimGeography\"}),\n    #\"Expanded DimGeography\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"DimGeography\", {\"City\", \"StateProvinceName\", \"EnglishCountryRegionName\", \"PostalCode\"}, {\"City\", \"StateProvinceName\", \"EnglishCountryRegionName\", \"PostalCode\"}),\n    #\"Merged Columns\" = Table.CombineColumns(#\"Expanded DimGeography\",{\"FirstName\", \"LastName\"},Combiner.CombineTextByDelimiter(\" \", QuoteStyle.None),\"Customer\"),\n    #\"Add NA Row\" = Table.InsertRows(#\"Merged Columns\", 0, {[CustomerKey = -1, CustomerAlternateKey = \"[Not Applicable]\", Customer = \"[Not Applicable]\", City = \"[Not Applicable]\", StateProvinceName =\"[Not Applicable]\", EnglishCountryRegionName =\"[Not Applicable]\", PostalCode =\"[Not Applicable]\"]}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Add NA Row\",{{\"CustomerAlternateKey\", \"Customer ID\"}, {\"StateProvinceName\", \"State-Province\"}, {\"EnglishCountryRegionName\", \"Country-Region\"}, {\"PostalCode\", \"Postal Code\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimDate = Source{[Schema=\"dbo\",Item=\"DimDate\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_DimDate,{\"DateKey\", \"FullDateAlternateKey\", \"DayNumberOfMonth\", \"MonthNumberOfYear\", \"CalendarYear\", \"FiscalQuarter\", \"FiscalYear\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"FullDateAlternateKey\", \"Date\"}, {\"FiscalYear\", \"Fiscal Year\"}}),\n    #\"Added FY Prefix\" = Table.TransformColumns(#\"Renamed Columns\", {{\"Fiscal Year\", each \"FY\" & Text.From(_, \"en-US\"), type text}}),\n    #\"Added Fiscal Quarter\" = Table.AddColumn(#\"Added FY Prefix\", \"Fiscal Quarter\", each [Fiscal Year] & \" Q\" & Number.ToText([FiscalQuarter])),\n    #\"Added Month\" = Table.AddColumn(#\"Added Fiscal Quarter\", \"Month\", each (Number.ToText([CalendarYear]) & \" \" & Date.ToText([Date], \"MMM\", Culture)), type text),\n    #\"Added Full Date\" = Table.AddColumn(#\"Added Month\", \"Full Date\", each [Month] & \", \" & Text.PadStart(Number.ToText([DayNumberOfMonth]), 2, \"0\")),\n    #\"Added MonthKey\" = Table.AddColumn(#\"Added Full Date\", \"MonthKey\", each ([CalendarYear] * 100) + [MonthNumberOfYear]),\n    #\"Removed Other Columns1\" = Table.SelectColumns(#\"Added MonthKey\",{\"DateKey\", \"Date\", \"Fiscal Year\", \"Fiscal Quarter\", \"Month\", \"Full Date\", \"MonthKey\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns1\",{{\"Fiscal Quarter\", type text}, {\"Month\", type text}, {\"Full Date\", type text}, {\"MonthKey\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimSalesTerritory = Source{[Schema=\"dbo\",Item=\"DimSalesTerritory\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_DimSalesTerritory,{\"SalesTerritoryKey\", \"SalesTerritoryRegion\", \"SalesTerritoryCountry\", \"SalesTerritoryGroup\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"SalesTerritoryRegion\", \"Region\"}, {\"SalesTerritoryCountry\", \"Country\"}, {\"SalesTerritoryGroup\", \"Group\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimProduct = Source{[Schema=\"dbo\",Item=\"DimProduct\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(dbo_DimProduct, each ([FinishedGoodsFlag] = true)),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"ProductKey\", \"ProductAlternateKey\", \"EnglishProductName\", \"StandardCost\", \"Color\", \"ListPrice\", \"ModelName\", \"DimProductSubcategory\"}),\n    #\"Expanded DimProductSubcategory\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"DimProductSubcategory\", {\"EnglishProductSubcategoryName\", \"DimProductCategory\"}, {\"EnglishProductSubcategoryName\", \"DimProductCategory\"}),\n    #\"Expanded DimProductCategory\" = Table.ExpandRecordColumn(#\"Expanded DimProductSubcategory\", \"DimProductCategory\", {\"EnglishProductCategoryName\"}, {\"EnglishProductCategoryName\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded DimProductCategory\",{{\"EnglishProductName\", \"Product\"}, {\"StandardCost\", \"Standard Cost\"}, {\"ListPrice\", \"List Price\"}, {\"ModelName\", \"Model\"}, {\"EnglishProductSubcategoryName\", \"Subcategory\"}, {\"EnglishProductCategoryName\", \"Category\"}, {\"ProductAlternateKey\", \"SKU\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_vFactSales = Source{[Schema=\"dbo\",Item=\"vFactSales\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_vFactSales,{\"Channel\", \"SalesOrderLineKey\", \"SalesOrderNumber\", \"SalesOrderLineNumber\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"SalesOrderNumber\", \"Sales Order\"}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Renamed Columns\", \"Sales Order Line\", each [Sales Order] & \" - \" & Text.PadStart(Number.ToText([SalesOrderLineNumber]), 2, \"0\")),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Added Custom\",{{\"Sales Order Line\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"SalesOrderLineNumber\"})\nin\n    #\"Removed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_vFactSales = Source{[Schema=\"dbo\",Item=\"vFactSales\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_vFactSales,{\"SalesOrderLineKey\", \"ResellerKey\", \"CustomerKey\", \"ProductKey\", \"OrderDateKey\", \"DueDateKey\", \"ShipDateKey\", \"SalesTerritoryKey\", \"OrderQuantity\", \"UnitPrice\", \"ExtendedAmount\", \"UnitPriceDiscountPct\", \"ProductStandardCost\", \"TotalProductCost\", \"SalesAmount\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"OrderQuantity\", Int64.Type}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"ExtendedAmount\", \"Extended Amount\"}, {\"OrderQuantity\", \"Order Quantity\"}, {\"ProductStandardCost\", \"Product Standard Cost\"}, {\"SalesAmount\", \"Sales Amount\"}, {\"TotalProductCost\", \"Total Product Cost\"}, {\"UnitPrice\", \"Unit Price\"}, {\"UnitPriceDiscountPct\", \"Unit Price Discount Pct\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimReseller = Source{[Schema=\"dbo\",Item=\"DimReseller\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_DimReseller,{\"ResellerKey\", \"ResellerAlternateKey\", \"BusinessType\", \"ResellerName\", \"DimGeography\"}),\n    #\"Expanded DimGeography\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"DimGeography\", {\"City\", \"StateProvinceName\", \"EnglishCountryRegionName\", \"PostalCode\"}, {\"City\", \"StateProvinceName\", \"EnglishCountryRegionName\", \"PostalCode\"}),\n    #\"Add NA Row\" = Table.InsertRows(#\"Expanded DimGeography\", 0, {[ResellerKey = -1, ResellerAlternateKey = \"[Not Applicable]\", BusinessType = \"[Not Applicable]\", ResellerName = \"[Not Applicable]\", City = \"[Not Applicable]\", StateProvinceName =\"[Not Applicable]\", EnglishCountryRegionName =\"[Not Applicable]\", PostalCode =\"[Not Applicable]\"]}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Add NA Row\",{{\"ResellerAlternateKey\", \"Reseller ID\"}, {\"BusinessType\", \"Business Type\"}, {\"ResellerName\", \"Reseller\"}, {\"StateProvinceName\", \"State-Province\"}, {\"EnglishCountryRegionName\", \"Country-Region\"}, {\"PostalCode\", \"Postal Code\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WclSK1YlWcgKTzkqxsQA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Type = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Type\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\jterh\\OneDrive - Microsoft\\Downloads\\Hotel Bookings.xlsx\"), null, true),\n    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Promo Code\", type text}, {\"Status\", type text}, {\"Lead time\", Int64.Type}, {\"Purchase Year\", Int64.Type}, {\"Purchase month name\", type text}, {\"Purchase week number\", Int64.Type}, {\"Purchase day of the month\", Int64.Type}, {\"Stays in weekend nights\", Int64.Type}, {\"Stays in week nights\", Int64.Type}, {\"Adults\", Int64.Type}, {\"Children\", Int64.Type}, {\"Babies\", Int64.Type}, {\"Brand\", type text}, {\"Country of origin\", type text}, {\"Product Type\", type text}, {\"Age Group\", type text}, {\"Is repeated guest\", type text}, {\"Previous cancelations\", Int64.Type}, {\"Previous bookings not canceled\", Int64.Type}, {\"Reserved room type code\", type text}, {\"Assigned room type code\", type text}, {\"Booking changes\", Int64.Type}, {\"Customer Segment\", type text}, {\"City\", type text}, {\"Agent\", Int64.Type}, {\"Company\", type text}, {\"Days in waiting list\", Int64.Type}, {\"Region\", type text}, {\"Average Daily Rate\", type number}, {\"Required parking spaces\", Int64.Type}, {\"Total of special requests\", Int64.Type}, {\"Reservation status\", type text}, {\"Reservation status date\", type date}, {\"No. of Guests\", Int64.Type}, {\"Purchase month\", Int64.Type}, {\"Purchase date\", type date}, {\"Booking ID\", Int64.Type}, {\"Revenue\", type number}, {\"Assigned room type\", type text}, {\"Purchase Size\", type text}, {\"Loyalty card\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Booking ID\", \"Transaction ID\"}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Renamed Columns\", \"Purchase\", each Date.AddMonths([Purchase date], 32)),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Added Custom\",{{\"Purchase\", \"Purchasing Date\"}}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns1\",{{\"Purchasing Date\", type date}}),\n    #\"Renamed Columns2\" = Table.RenameColumns(#\"Changed Type1\",{{\"Country of origin\", \"Country\"}, {\"Is repeated guest\", \"Repeat customer\"}, {\"Transaction ID\", \"Customer\"}, {\"Average Daily Rate\", \"Time Spent on Website\"}, {\"Revenue\", \"Revenue Total\"}, {\"Product Type\", \"Product\"}})\nin\n    #\"Renamed Columns2\"", "let\n    Source = Csv.Document(File.Contents(\"C:\\Users\\jterh\\OneDrive - Microsoft\\Downloads\\Transactions by Region and City.csv\"),[Delimiter=\",\", Columns=4, Encoding=65001, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"City\", type text}, {\"Revenue per transaction\", Currency.Type}, {\"Transactions\", Int64.Type}, {\"Region\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimCustomer = Source{[Schema=\"dbo\",Item=\"DimCustomer\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_DimCustomer,{\"CustomerKey\", \"CustomerAlternateKey\", \"FirstName\", \"LastName\", \"DimGeography\"}),\n    #\"Expanded DimGeography\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"DimGeography\", {\"City\", \"StateProvinceName\", \"EnglishCountryRegionName\", \"PostalCode\"}, {\"City\", \"StateProvinceName\", \"EnglishCountryRegionName\", \"PostalCode\"}),\n    #\"Merged Columns\" = Table.CombineColumns(#\"Expanded DimGeography\",{\"FirstName\", \"LastName\"},Combiner.CombineTextByDelimiter(\" \", QuoteStyle.None),\"Customer\"),\n    #\"Add NA Row\" = Table.InsertRows(#\"Merged Columns\", 0, {[CustomerKey = -1, CustomerAlternateKey = \"[Not Applicable]\", Customer = \"[Not Applicable]\", City = \"[Not Applicable]\", StateProvinceName =\"[Not Applicable]\", EnglishCountryRegionName =\"[Not Applicable]\", PostalCode =\"[Not Applicable]\"]}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Add NA Row\",{{\"CustomerAlternateKey\", \"Customer ID\"}, {\"StateProvinceName\", \"State-Province\"}, {\"EnglishCountryRegionName\", \"Country-Region\"}, {\"PostalCode\", \"Postal Code\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimDate = Source{[Schema=\"dbo\",Item=\"DimDate\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_DimDate,{\"DateKey\", \"FullDateAlternateKey\", \"DayNumberOfMonth\", \"MonthNumberOfYear\", \"CalendarYear\", \"FiscalQuarter\", \"FiscalYear\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"FullDateAlternateKey\", \"Date\"}, {\"FiscalYear\", \"Fiscal Year\"}}),\n    #\"Added FY Prefix\" = Table.TransformColumns(#\"Renamed Columns\", {{\"Fiscal Year\", each \"FY\" & Text.From(_, \"en-US\"), type text}}),\n    #\"Added Fiscal Quarter\" = Table.AddColumn(#\"Added FY Prefix\", \"Fiscal Quarter\", each [Fiscal Year] & \" Q\" & Number.ToText([FiscalQuarter])),\n    #\"Added Month\" = Table.AddColumn(#\"Added Fiscal Quarter\", \"Month\", each (Number.ToText([CalendarYear]) & \" \" & Date.ToText([Date], \"MMM\", Culture)), type text),\n    #\"Added Full Date\" = Table.AddColumn(#\"Added Month\", \"Full Date\", each [Month] & \", \" & Text.PadStart(Number.ToText([DayNumberOfMonth]), 2, \"0\")),\n    #\"Added MonthKey\" = Table.AddColumn(#\"Added Full Date\", \"MonthKey\", each ([CalendarYear] * 100) + [MonthNumberOfYear]),\n    #\"Removed Other Columns1\" = Table.SelectColumns(#\"Added MonthKey\",{\"DateKey\", \"Date\", \"Fiscal Year\", \"Fiscal Quarter\", \"Month\", \"Full Date\", \"MonthKey\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns1\",{{\"Fiscal Quarter\", type text}, {\"Month\", type text}, {\"Full Date\", type text}, {\"MonthKey\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimSalesTerritory = Source{[Schema=\"dbo\",Item=\"DimSalesTerritory\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_DimSalesTerritory,{\"SalesTerritoryKey\", \"SalesTerritoryRegion\", \"SalesTerritoryCountry\", \"SalesTerritoryGroup\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"SalesTerritoryRegion\", \"Region\"}, {\"SalesTerritoryCountry\", \"Country\"}, {\"SalesTerritoryGroup\", \"Group\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimProduct = Source{[Schema=\"dbo\",Item=\"DimProduct\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(dbo_DimProduct, each ([FinishedGoodsFlag] = true)),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"ProductKey\", \"ProductAlternateKey\", \"EnglishProductName\", \"StandardCost\", \"Color\", \"ListPrice\", \"ModelName\", \"DimProductSubcategory\"}),\n    #\"Expanded DimProductSubcategory\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"DimProductSubcategory\", {\"EnglishProductSubcategoryName\", \"DimProductCategory\"}, {\"EnglishProductSubcategoryName\", \"DimProductCategory\"}),\n    #\"Expanded DimProductCategory\" = Table.ExpandRecordColumn(#\"Expanded DimProductSubcategory\", \"DimProductCategory\", {\"EnglishProductCategoryName\"}, {\"EnglishProductCategoryName\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded DimProductCategory\",{{\"EnglishProductName\", \"Product\"}, {\"StandardCost\", \"Standard Cost\"}, {\"ListPrice\", \"List Price\"}, {\"ModelName\", \"Model\"}, {\"EnglishProductSubcategoryName\", \"Subcategory\"}, {\"EnglishProductCategoryName\", \"Category\"}, {\"ProductAlternateKey\", \"SKU\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_vFactSales = Source{[Schema=\"dbo\",Item=\"vFactSales\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_vFactSales,{\"Channel\", \"SalesOrderLineKey\", \"SalesOrderNumber\", \"SalesOrderLineNumber\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"SalesOrderNumber\", \"Sales Order\"}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Renamed Columns\", \"Sales Order Line\", each [Sales Order] & \" - \" & Text.PadStart(Number.ToText([SalesOrderLineNumber]), 2, \"0\")),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Added Custom\",{{\"Sales Order Line\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"SalesOrderLineNumber\"})\nin\n    #\"Removed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_vFactSales = Source{[Schema=\"dbo\",Item=\"vFactSales\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_vFactSales,{\"SalesOrderLineKey\", \"ResellerKey\", \"CustomerKey\", \"ProductKey\", \"OrderDateKey\", \"DueDateKey\", \"ShipDateKey\", \"SalesTerritoryKey\", \"OrderQuantity\", \"UnitPrice\", \"ExtendedAmount\", \"UnitPriceDiscountPct\", \"ProductStandardCost\", \"TotalProductCost\", \"SalesAmount\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"OrderQuantity\", Int64.Type}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"ExtendedAmount\", \"Extended Amount\"}, {\"OrderQuantity\", \"Order Quantity\"}, {\"ProductStandardCost\", \"Product Standard Cost\"}, {\"SalesAmount\", \"Sales Amount\"}, {\"TotalProductCost\", \"Total Product Cost\"}, {\"UnitPrice\", \"Unit Price\"}, {\"UnitPriceDiscountPct\", \"Unit Price Discount Pct\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Sql.Database(SqlServerInstance, SqlServerDatabase),\n    dbo_DimReseller = Source{[Schema=\"dbo\",Item=\"DimReseller\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(dbo_DimReseller,{\"ResellerKey\", \"ResellerAlternateKey\", \"BusinessType\", \"ResellerName\", \"DimGeography\"}),\n    #\"Expanded DimGeography\" = Table.ExpandRecordColumn(#\"Removed Other Columns\", \"DimGeography\", {\"City\", \"StateProvinceName\", \"EnglishCountryRegionName\", \"PostalCode\"}, {\"City\", \"StateProvinceName\", \"EnglishCountryRegionName\", \"PostalCode\"}),\n    #\"Add NA Row\" = Table.InsertRows(#\"Expanded DimGeography\", 0, {[ResellerKey = -1, ResellerAlternateKey = \"[Not Applicable]\", BusinessType = \"[Not Applicable]\", ResellerName = \"[Not Applicable]\", City = \"[Not Applicable]\", StateProvinceName =\"[Not Applicable]\", EnglishCountryRegionName =\"[Not Applicable]\", PostalCode =\"[Not Applicable]\"]}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Add NA Row\",{{\"ResellerAlternateKey\", \"Reseller ID\"}, {\"BusinessType\", \"Business Type\"}, {\"ResellerName\", \"Reseller\"}, {\"StateProvinceName\", \"State-Province\"}, {\"EnglishCountryRegionName\", \"Country-Region\"}, {\"PostalCode\", \"Postal Code\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\jterh\\OneDrive - Microsoft\\_Corp Era\\Power BI\\AW2020 Sample\\Sales\\AdventureWorks Sales.xlsx\"), null, true),\n    Customer_Table = Source{[Item=\"Customer\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Customer_Table,{{\"CustomerKey\", Int64.Type}, {\"Customer ID\", type text}, {\"Customer\", type text}, {\"City\", type text}, {\"State-Province\", type text}, {\"Country-Region\", type text}, {\"Postal Code\", type text}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\jterh\\OneDrive - Microsoft\\_Corp Era\\Power BI\\AW2020 Sample\\Sales\\AdventureWorks Sales.xlsx\"), null, true),\n    Date_Table = Source{[Item=\"Date\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Date_Table,{{\"DateKey\", Int64.Type}, {\"Date\", type date}, {\"Fiscal Year\", type text}, {\"Fiscal Quarter\", type text}, {\"Month\", type date}, {\"Full Date\", type date}, {\"MonthKey\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Date'[Date])), 1, 1), Date(Year(MAX('Date'[Date])), 12, 31))", "Calendar(Date(Year(MIN('Date'[Month])), 1, 1), Date(Year(MAX('Date'[Month])), 12, 31))", "Calendar(Date(Year(MIN('Date'[Full Date])), 1, 1), Date(Year(MAX('Date'[Full Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\jterh\\OneDrive - Microsoft\\_Corp Era\\Power BI\\AW2020 Sample\\Sales\\AdventureWorks Sales.xlsx\"), null, true),\n    Product_Table = Source{[Item=\"Product\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Product_Table,{{\"ProductKey\", Int64.Type}, {\"SKU\", type text}, {\"Product\", type text}, {\"Standard Cost\", type number}, {\"Color\", type text}, {\"List Price\", type number}, {\"Model\", type text}, {\"Subcategory\", type text}, {\"Category\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\jterh\\OneDrive - Microsoft\\_Corp Era\\Power BI\\AW2020 Sample\\Sales\\AdventureWorks Sales.xlsx\"), null, true),\n    Reseller_Table = Source{[Item=\"Reseller\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Reseller_Table,{{\"ResellerKey\", Int64.Type}, {\"Reseller ID\", type text}, {\"Business Type\", type text}, {\"Reseller\", type text}, {\"City\", type text}, {\"State-Province\", type text}, {\"Country-Region\", type text}, {\"Postal Code\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\jterh\\OneDrive - Microsoft\\_Corp Era\\Power BI\\AW2020 Sample\\Sales\\AdventureWorks Sales.xlsx\"), null, true),\n    Sales_Table = Source{[Item=\"Sales\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sales_Table,{{\"SalesOrderLineKey\", Int64.Type}, {\"ResellerKey\", Int64.Type}, {\"CustomerKey\", Int64.Type}, {\"ProductKey\", Int64.Type}, {\"OrderDateKey\", Int64.Type}, {\"DueDateKey\", Int64.Type}, {\"ShipDateKey\", Int64.Type}, {\"SalesTerritoryKey\", Int64.Type}, {\"Order Quantity\", Int64.Type}, {\"Unit Price\", type number}, {\"Extended Amount\", type number}, {\"Unit Price Discount Pct\", Int64.Type}, {\"Product Standard Cost\", type number}, {\"Total Product Cost\", type number}, {\"Sales Amount\", type number}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\jterh\\OneDrive - Microsoft\\_Corp Era\\Power BI\\AW2020 Sample\\Sales\\AdventureWorks Sales.xlsx\"), null, true),\n    SalesOrder_Table = Source{[Item=\"SalesOrder\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(SalesOrder_Table,{{\"Channel\", type text}, {\"SalesOrderLineKey\", Int64.Type}, {\"Sales Order\", type text}, {\"Sales Order Line\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\jterh\\OneDrive - Microsoft\\_Corp Era\\Power BI\\AW2020 Sample\\Sales\\AdventureWorks Sales.xlsx\"), null, true),\n    SalesTerritory_Table = Source{[Item=\"SalesTerritory\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(SalesTerritory_Table,{{\"SalesTerritoryKey\", Int64.Type}, {\"Region\", type text}, {\"Country\", type text}, {\"Group\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WckxOTi0uzi/KTC1W0lEyUYrViVZyyswG8wzBPOec/JKMzLx0oIAxRCA/tyA/LzWvBKTGSCk2FgA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Category = _t, Sorting = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Category\", type text}, {\"Sorting\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = List.Generate(() => \n  [Result = try country(1) otherwise null, Page=1],\n  each [Result] <> null,\n  each [Result = try country([Page] + 1) otherwise null, Page=[Page] + 1],\n  each [Result]\n),\n    #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Expanded Column1\" = Table.ExpandTableColumn(#\"Converted to Table\", \"Column1\", {\"iso2Code\", \"name\", \"region\", \"adminregion\", \"incomeLevel\", \"lendingType\", \"capitalCity\", \"longitude\", \"latitude\", \"Attribute:id\"}, {\"Column1.iso2Code\", \"Column1.name\", \"Column1.region\", \"Column1.adminregion\", \"Column1.incomeLevel\", \"Column1.lendingType\", \"Column1.capitalCity\", \"Column1.longitude\", \"Column1.latitude\", \"Column1.Attribute:id\"}),\n    #\"Column1 region\" = #\"Expanded Column1\"{11}[Column1.region],\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Column1 region\",{{\"Element:Text\", type text}, {\"Attribute:id\", type text}, {\"Attribute:iso2code\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mwham\\Desktop\\test.xlsx\"), null, true),\n    Kris_Sheet = Source{[Item=\"Kris\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Kris_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"a\", Int64.Type}, {\"b\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = List.Generate(() => \n  [Result = try country(1) otherwise null, Page=1],\n  each [Result] <> null,\n  each [Result = try country([Page] + 1) otherwise null, Page=[Page] + 1],\n  each [Result]\n),\n    #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Expanded Column1\" = Table.ExpandTableColumn(#\"Converted to Table\", \"Column1\", {\"iso2Code\", \"name\", \"region\", \"adminregion\", \"incomeLevel\", \"lendingType\", \"capitalCity\", \"longitude\", \"latitude\", \"Attribute:id\"}, {\"Column1.iso2Code\", \"Column1.name\", \"Column1.region\", \"Column1.adminregion\", \"Column1.incomeLevel\", \"Column1.lendingType\", \"Column1.capitalCity\", \"Column1.longitude\", \"Column1.latitude\", \"Column1.Attribute:id\"}),\n    #\"Column1 region\" = #\"Expanded Column1\"{11}[Column1.region],\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Column1 region\",{{\"Element:Text\", type text}, {\"Attribute:id\", type text}, {\"Attribute:iso2code\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mwham\\Desktop\\test.xlsx\"), null, true),\n    Kris_Sheet = Source{[Item=\"Kris\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Kris_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"a\", Int64.Type}, {\"b\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WSlSK1YlWSgKTyWAyBUymKsXGAgA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [a = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"a\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    #\"avg temp_Sheet\" = Source{[Item=\"avg temp\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"avg temp_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Year\", Int64.Type}, {\"Mean temp\", type number}}),\n    #\"Duplicated Column\" = Table.DuplicateColumn(#\"Changed Type\", \"Year\", \"Year - Copy\")\nin\n    #\"Duplicated Column\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    #\"co2 emissions_Sheet\" = Source{[Item=\"co2 emissions\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"co2 emissions_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Year\", Int64.Type}, {\"co2 conc. Ppm\", type number}, {\"ss\", type date}, {\"Column4\", type any}, {\"Column5\", type any}, {\"Column6\", type any}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column4\", \"Column5\", \"Column6\"}),\n    #\"Duplicated Column\" = Table.DuplicateColumn(#\"Removed Columns\", \"ss\", \"ss - Copy\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Duplicated Column\",{{\"ss\", \"date\"}}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"ss - Copy\", type date}})\nin\n    #\"Changed Type1\"", "Calendar(Date(Year(MIN('co2 emissions'[date])), 1, 1), Date(Year(MAX('co2 emissions'[date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    disasters_Sheet = Source{[Item=\"disasters\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(disasters_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Entity\", type text}, {\"Year\", Int64.Type}, {\"Number of disasters\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    extinction_Sheet = Source{[Item=\"extinction\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(extinction_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Class\", type text}, {\"sub-class\", type text}, {\"year\", Int64.Type}, {\"No. of threatened\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    Forest_Sheet = Source{[Item=\"Forest\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Forest_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Country Name\", type text}, {\"Year\", Int64.Type}, {\"area (sq km)\", type number}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    #\"greenhouse gas conc_Sheet\" = Source{[Item=\"greenhouse gas conc\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"greenhouse gas conc_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"year\", Int64.Type}, {\"conc. (PPM)\", type number}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    #\"ppl disasters_Sheet\" = Source{[Item=\"ppl disasters\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"ppl disasters_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Entity\", type text}, {\"Year\", Int64.Type}, {\"Affected\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    sealevel_Sheet = Source{[Item=\"sealevel\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(sealevel_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Year\", Int64.Type}, {\"sea level (inches)\", type number}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    glaciers_Sheet = Source{[Item=\"glaciers\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(glaciers_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"year\", Int64.Type}, {\"mean cumulative mass\", type number}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('co2 emissions'[ss - Copy])), 1, 1), Date(Year(MAX('co2 emissions'[ss - Copy])), 12, 31))", "Calendar(Date(Year(MIN('Forest'[date])), 1, 1), Date(Year(MAX('Forest'[date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\RBI01072\\Desktop\\cc_10_01_18(2).xlsx\"), null, true),\n    Solution_Sheet = Source{[Item=\"Solution\",Kind=\"Sheet\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Solution_Sheet,{{\"Column1\", type text}}),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Changed Type\", [PromoteAllScalars=true]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Solution\", type text}})\nin\n    #\"Changed Type1\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\willthom\\Microsoft\\Gartner Data and Analytics Summit - Bake-off\\acaps_covid19_government_measures_dataset.xlsx\"), null, true),\n    Dataset_Sheet = Source{[Item=\"Dataset\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Dataset_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ID\", Int64.Type}, {\"ISO\", type text}, {\"COUNTRY\", type text}, {\"REGION\", type text}, {\"ADMIN_LEVEL_NAME\", type text}, {\"PCODE\", type any}, {\"LOG_TYPE\", type text}, {\"CATEGORY\", type text}, {\"MEASURE\", type text}, {\"TARGETED_POP_GROUP\", type text}, {\"COMMENTS\", type text}, {\"NON_COMPLIANCE\", type text}, {\"DATE_IMPLEMENTED\", type date}, {\"SOURCE\", type text}, {\"SOURCE_TYPE\", type text}, {\"LINK\", type text}, {\"ENTRY_DATE\", type date}, {\"Alternative source\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"ADMIN_LEVEL_NAME\", \"PCODE\", \"LOG_TYPE\"}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Removed Columns\",null,\"False\",Replacer.ReplaceValue,{\"TARGETED_POP_GROUP\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"checked\",\"True\",Replacer.ReplaceText,{\"TARGETED_POP_GROUP\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Replaced Value1\",{{\"TARGETED_POP_GROUP\", \"Specific Group Targeted\"}, {\"MEASURE\", \"Measure\"}, {\"CATEGORY\", \"Category\"}}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Renamed Columns\",null,\"Not applicable\",Replacer.ReplaceValue,{\"NON_COMPLIANCE\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Replaced Value2\",{{\"DATE_IMPLEMENTED\", \"Date implemented\"}, {\"COMMENTS\", \"Comments\"}, {\"SOURCE\", \"Source\"}, {\"SOURCE_TYPE\", \"Source type\"}, {\"ENTRY_DATE\", \"Entry date\"}})\nin\n    #\"Renamed Columns1\"", "Calendar(Date(Year(MIN('Govt Measures'[Entry date])), 1, 1), Date(Year(MAX('Govt Measures'[Entry date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\willthom\\Microsoft\\Gartner Data and Analytics Summit - Bake-off\\acaps_covid19_government_measures_dataset.xlsx\"), null, true),\n    Dataset_Sheet = Source{[Item=\"Dataset\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Dataset_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ID\", Int64.Type}, {\"ISO\", type text}, {\"COUNTRY\", type text}, {\"REGION\", type text}, {\"ADMIN_LEVEL_NAME\", type text}, {\"PCODE\", type any}, {\"LOG_TYPE\", type text}, {\"CATEGORY\", type text}, {\"MEASURE\", type text}, {\"TARGETED_POP_GROUP\", type text}, {\"COMMENTS\", type text}, {\"NON_COMPLIANCE\", type text}, {\"DATE_IMPLEMENTED\", type date}, {\"SOURCE\", type text}, {\"SOURCE_TYPE\", type text}, {\"LINK\", type text}, {\"ENTRY_DATE\", type date}, {\"Alternative source\", type text}}),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Changed Type\",{\"ISO\", \"COUNTRY\", \"REGION\"}),\n    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\"),\n    #\"Added Custom\" = Table.AddColumn(#\"Removed Duplicates\", \"Custom\", each if [COUNTRY] = \"United States\" or [COUNTRY] = \"Canada\" then \"North America\" else if [REGION] = \"Americas\" then \"Central and South America\" else [REGION]),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Custom\",{{\"Custom\", \"Regions\"}}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Renamed Columns\", {\"ISO\"}, #\"Table 3\", {\"Text Between Delimiters\"}, \"Table 3\", JoinKind.LeftOuter),\n    #\"Expanded Table 3\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Table 3\", {\"Population\", \"Growth Rate\", \"FlagURL\", \"Area (km2)\", \"Density\"}, {\"Population\", \"Growth Rate\", \"FlagURL\", \"Area (km2)\", \"Density\"}),\n    #\"Added Prefix\" = Table.TransformColumns(#\"Expanded Table 3\", {{\"FlagURL\", each \"http://countryflags.azurewebsites.net/\" & _, type text}}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Added Prefix\",{{\"Regions\", \"Continent\"}, {\"FlagURL\", \"Flag\"}, {\"COUNTRY\", \"Country\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = Csv.Document(Web.Contents(\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\"),[Delimiter=\",\", Columns=14, Encoding=65001, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Promoted Headers\",{\"location\"}),\n    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\"),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Duplicates\", each ([location] <> \"Bureau of Prisons\" and [location] <> \"Dept of Defense\" and [location] <> \"Federated States of Micronesia\" and [location] <> \"Indian Health Svc\" and [location] <> \"Long Term Care\" and [location] <> \"Northern Mariana Islands\" and [location] <> \"Republic of Palau\" and [location] <> \"United States\" and [location] <> \"Veterans Health\")),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered Rows\",{{\"location\", \"State\"}}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Renamed Columns\",\" State\",\"\",Replacer.ReplaceText,{\"State\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Replaced Value1\", {\"State\"}, #\"state population\", {\"State\"}, \"Table 1\", JoinKind.LeftOuter),\n    #\"Expanded Table 1\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Table 1\", {\"Population estimate, July 1, 2019[2]\"}, {\"Population estimate, July 1, 2019[2]\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Expanded Table 1\",{{\"Population estimate, July 1, 2019[2]\", \"Population\"}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Renamed Columns1\",null,58791,Replacer.ReplaceValue,{\"Population\"}),\n    #\"Added Custom\" = Table.AddColumn(#\"Replaced Value\", \"Flag\", each \"https://www.states101.com/img/flags/gif/small/\"&[State]&\".gif\"),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Added Custom\",\" \",\"-\",Replacer.ReplaceText,{\"Flag\"}),\n    #\"Lowercased Text\" = Table.TransformColumns(#\"Replaced Value2\",{{\"Flag\", Text.Lower, type text}}),\n    #\"Merged Queries1\" = Table.NestedJoin(#\"Lowercased Text\", {\"State\"}, Lats, {\"State\"}, \"Lats\", JoinKind.LeftOuter),\n    #\"Expanded Lats\" = Table.ExpandTableColumn(#\"Merged Queries1\", \"Lats\", {\"Average Temperature\u00a0\", \"Latitude\", \"Longitude\"}, {\"Average Temperature\u00a0\", \"Latitude\", \"Longitude\"})\nin\n    #\"Expanded Lats\"", "let\n    Source = Sql.Database(\"dsna-researchlab-wcu-sqlserver.database.windows.net\", \"researchlab\", [Query=\"SELECT [Key]#(lf),[GeoLevel]#(lf),[CountyName]#(lf)#(tab)#(tab),[Date]#(lf)#(tab)#(tab),[Date_Day1Case]#(lf)#(tab)#(tab),[Date_Day1Death]#(lf)#(tab)#(tab),[Date_Max]#(lf)                ,[Days_from_Day1Case]#(lf)                ,[Days_from_Day1Death]#(lf)#(tab)#(tab),[CumulativeCases]#(lf)#(tab)#(tab),[CumulativeDeaths]#(lf)#(tab)#(tab),[IncrementalCases]#(lf)#(tab)#(tab),[IncrementalDeaths]#(lf)#(tab)#(tab),[IncrementalCasesNoNegatives]#(lf)#(tab)#(tab),[IncrementalDeathsNoNegatives]#(lf)  FROM [COVID19].[vw_WHO_USAFacts_BingTracker_Data_Combined]\"]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}, {\"Date_Day1Case\", type date}, {\"Date_Day1Death\", type date}, {\"Date_Max\", type date}, {\"CumulativeCases\", Int64.Type}, {\"CumulativeDeaths\", Int64.Type}, {\"IncrementalCases\", Int64.Type}, {\"IncrementalDeaths\", Int64.Type}, {\"IncrementalCasesNoNegatives\", Int64.Type}, {\"IncrementalDeathsNoNegatives\", Int64.Type}, {\"Days_from_Day1Case\", Int64.Type}, {\"Days_from_Day1Death\", Int64.Type}}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each ([GeoLevel] = \"Country\")),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Rows\",{\"CountyName\", \"Date_Day1Case\", \"Date_Day1Death\", \"Date_Max\", \"Days_from_Day1Case\", \"Days_from_Day1Death\", \"IncrementalCasesNoNegatives\", \"IncrementalDeathsNoNegatives\"}),\n    #\"Inserted Text After Delimiter\" = Table.AddColumn(#\"Removed Columns\", \"Text After Delimiter\", each Text.AfterDelimiter([Key], \"_\"), type text),\n    #\"Filtered Rows1\" = Table.SelectRows(#\"Inserted Text After Delimiter\", each ([Key] <> null)),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered Rows1\",{{\"Text After Delimiter\", \"Country\"}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Renamed Columns\",\"The United Kingdom\",\"United Kingdom\",Replacer.ReplaceText,{\"Country\"})\nin\n    #\"Replaced Value\"", "let\n    Source = Sql.Database(\"dsna-researchlab-wcu-sqlserver.database.windows.net\", \"researchlab\", [Query=\"SELECT [Key]#(lf),[GeoLevel]#(lf),[CountyName]#(lf)#(tab)#(tab),[Date]#(lf)#(tab)#(tab),[Date_Day1Case]#(lf)#(tab)#(tab),[Date_Day1Death]#(lf)#(tab)#(tab),[Date_Max]#(lf)                ,[Days_from_Day1Case]#(lf)                ,[Days_from_Day1Death]#(lf)#(tab)#(tab),[CumulativeCases]#(lf)#(tab)#(tab),[CumulativeDeaths]#(lf)#(tab)#(tab),[IncrementalCases]#(lf)#(tab)#(tab),[IncrementalDeaths]#(lf)#(tab)#(tab),[IncrementalCasesNoNegatives]#(lf)#(tab)#(tab),[IncrementalDeathsNoNegatives]#(lf)  FROM [COVID19].[vw_WHO_USAFacts_BingTracker_Data_Combined]\"]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}, {\"Date_Day1Case\", type date}, {\"Date_Day1Death\", type date}, {\"Date_Max\", type date}, {\"CumulativeCases\", Int64.Type}, {\"CumulativeDeaths\", Int64.Type}, {\"IncrementalCases\", Int64.Type}, {\"IncrementalDeaths\", Int64.Type}, {\"IncrementalCasesNoNegatives\", Int64.Type}, {\"IncrementalDeathsNoNegatives\", Int64.Type}, {\"Days_from_Day1Case\", Int64.Type}, {\"Days_from_Day1Death\", Int64.Type}}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each ([GeoLevel] = \"State\")),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Rows\",{\"CountyName\", \"GeoLevel\", \"Date_Day1Case\", \"Date_Day1Death\", \"Date_Max\", \"Days_from_Day1Case\", \"Days_from_Day1Death\", \"IncrementalCases\", \"IncrementalDeaths\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"IncrementalCasesNoNegatives\", \"IncrementalCases\"}, {\"IncrementalDeathsNoNegatives\", \"IncrementalDeaths\"}}),\n    #\"Inserted Text After Delimiter\" = Table.AddColumn(#\"Renamed Columns1\", \"Text After Delimiter\", each Text.AfterDelimiter([Key], \"_\"), type text),\n    #\"Filtered Rows1\" = Table.SelectRows(#\"Inserted Text After Delimiter\", each ([Key] <> null)),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered Rows1\",{{\"Text After Delimiter\", \"State\"}}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Renamed Columns\", {\"State\", \"Date\"}, us_state_vaccinations, {\"location\", \"date\"}, \"us_state_vaccinations\", JoinKind.LeftOuter),\n    #\"Expanded us_state_vaccinations\" = Table.ExpandTableColumn(#\"Merged Queries\", \"us_state_vaccinations\", {\"total_vaccinations\", \"total_distributed\", \"people_vaccinated\", \"people_fully_vaccinated_per_hundred\", \"total_vaccinations_per_hundred\", \"people_fully_vaccinated\", \"people_vaccinated_per_hundred\", \"distributed_per_hundred\", \"daily_vaccinations_raw\", \"daily_vaccinations\", \"daily_vaccinations_per_million\", \"share_doses_used\"}, {\"total_vaccinations\", \"total_distributed\", \"people_vaccinated\", \"people_fully_vaccinated_per_hundred\", \"total_vaccinations_per_hundred\", \"people_fully_vaccinated\", \"people_vaccinated_per_hundred\", \"distributed_per_hundred\", \"daily_vaccinations_raw\", \"daily_vaccinations\", \"daily_vaccinations_per_million\", \"share_doses_used\"}),\n    #\"Renamed Columns2\" = Table.RenameColumns(#\"Expanded us_state_vaccinations\",{{\"IncrementalCases\", \"Incremental cases\"}, {\"people_fully_vaccinated_per_hundred\", \"People fully vaccinated per hundred\"}}),\n    #\"Fix New York spike\" = Table.ReplaceValue(#\"Renamed Columns2\",each [Incremental cases],each if [Key]=\"State_New York\" and [Incremental cases]=20184 then 7154 else [Incremental cases],Replacer.ReplaceValue,{\"Incremental cases\"}),\n    #\"Fix Minnesota spike\" = Table.ReplaceValue(#\"Fix New York spike\",each [Incremental cases],each \n        if [Key]=\"State_Minnesota\" and [Incremental cases]=0 then 1651 \n        else if [Key]=\"State_Missouri\" and [Incremental cases]=50328 then 512 \n        else [Incremental cases],Replacer.ReplaceValue,{\"Incremental cases\"}),\n    #\"Fix New Jersey spiek\" = Table.ReplaceValue(#\"Fix Minnesota spike\",each [Incremental cases],each if [Key]=\"State_New Jersey\" and [Incremental cases]=51092 then 4215 else [Incremental cases],Replacer.ReplaceValue,{\"Incremental cases\"})\nin\n    #\"Fix New Jersey spiek\"", "CALENDARAUTO()", "let\n    Source = Csv.Document(Web.Contents(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\"),[Delimiter=\",\", Columns=59, Encoding=65001, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"iso_code\", type text}, {\"continent\", type text}, {\"location\", type text}, {\"date\", type date}, {\"total_cases\", Int64.Type}, {\"new_cases\", Int64.Type}, {\"new_cases_smoothed\", type number}, {\"total_deaths\", Int64.Type}, {\"new_deaths\", Int64.Type}, {\"new_deaths_smoothed\", type number}, {\"total_cases_per_million\", type number}, {\"new_cases_per_million\", type number}, {\"new_cases_smoothed_per_million\", type number}, {\"total_deaths_per_million\", type number}, {\"new_deaths_per_million\", type number}, {\"new_deaths_smoothed_per_million\", type number}, {\"reproduction_rate\", type number}, {\"icu_patients\", type number}, {\"icu_patients_per_million\", type number}, {\"hosp_patients\", type number}, {\"hosp_patients_per_million\", type number}, {\"weekly_icu_admissions\", type number}, {\"weekly_icu_admissions_per_million\", type number}, {\"weekly_hosp_admissions\", type number}, {\"weekly_hosp_admissions_per_million\", type number}, {\"new_tests\", type number}, {\"total_tests\", type number}, {\"total_tests_per_thousand\", type number}, {\"new_tests_per_thousand\", type number}, {\"new_tests_smoothed\", type number}, {\"new_tests_smoothed_per_thousand\", type number}, {\"positive_rate\", type number}, {\"tests_per_case\", type number}, {\"tests_units\", type text}, {\"total_vaccinations\", type number}, {\"people_vaccinated\", type number}, {\"people_fully_vaccinated\", type number}, {\"new_vaccinations\", type number}, {\"new_vaccinations_smoothed\", type number}, {\"total_vaccinations_per_hundred\", type number}, {\"people_vaccinated_per_hundred\", type number}, {\"people_fully_vaccinated_per_hundred\", type number}, {\"new_vaccinations_smoothed_per_million\", type number}, {\"stringency_index\", type number}, {\"population\", Int64.Type}, {\"population_density\", type number}, {\"median_age\", type number}, {\"aged_65_older\", type number}, {\"aged_70_older\", type number}, {\"gdp_per_capita\", type number}, {\"extreme_poverty\", type number}, {\"cardiovasc_death_rate\", type number}, {\"diabetes_prevalence\", type number}, {\"female_smokers\", type number}, {\"male_smokers\", type number}, {\"handwashing_facilities\", type number}, {\"hospital_beds_per_thousand\", type number}, {\"life_expectancy\", type number}, {\"human_development_index\", type number}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{\n        {\"total_cases\", \"Total cases\"},\n        {\"new_cases\", \"New cases\"}, {\"new_cases_smoothed\", \"New cases smoothed\"}, {\"total_deaths\", \"Total deaths\"}, {\"new_deaths\", \"New deaths\"}, {\"new_deaths_smoothed\", \"New deaths smoothed\"}, {\"total_cases_per_million\", \"Total cases per million\"}, {\"new_cases_per_million\", \"New cases per million\"}, {\"new_cases_smoothed_per_million\", \"New cases smoothed per million\"}, {\"total_deaths_per_million\", \"Total deaths per million\"}, {\"new_deaths_per_million\", \"New deaths per million\"}, {\"new_deaths_smoothed_per_million\", \"New deaths smoothed per million\"}, {\"reproduction_rate\", \"Reproduction rate\"}, {\"icu_patients\", \"ICU patients\"}, {\"icu_patients_per_million\", \"ICU patients per million\"}, {\"hosp_patients\", \"Hospital patients\"}, {\"hosp_patients_per_million\", \"Hospital patients per million\"}, {\"weekly_icu_admissions\", \"Weekly ICU admissions\"}, {\"weekly_icu_admissions_per_million\", \"Weekly ICU admissisions per million\"}, {\"weekly_hosp_admissions_per_million\", \"Weekly hospital admissions per million\"},{\"total_tests_per_thousand\", \"Total tests per thousand\"}, {\"new_tests_per_thousand\", \"New tests per thousands\"}, {\"total_vaccinations_per_hundred\", \"Total vaccinations per hundred\"}, {\"people_vaccinated_per_hundred\", \"People vaccinated per hundred\"}, {\"people_fully_vaccinated_per_hundred\", \"People fully vaccinated per hundred\"}, {\"new_vaccinations_smoothed_per_million\", \"New vaccinations smoothed per million\"}, {\"population\", \"Population\"}, {\"population_density\", \"Population density\"}, {\"median_age\", \"Median age\"}, {\"aged_65_older\", \"Aged 65 and older\"}, {\"aged_70_older\", \"Aged 70 and old\"}, {\"gdp_per_capita\", \"GDP per capita\"}, {\"extreme_poverty\", \"Extreme poverty\"}, {\"cardiovasc_death_rate\", \"Cardiovascular death rate\"}, {\"diabetes_prevalence\", \"Diabetes prevalence\"}, {\"female_smokers\", \"Female smoking rate\"}, {\"male_smokers\", \"Male smoking rate\"}, {\"handwashing_facilities\", \"Handwashing facilities availalbe\"}, {\"hospital_beds_per_thousand\", \"Hospital beds per thousand\"}, {\"life_expectancy\", \"Life expectancy\"}\n\n    })\nin\n    #\"Renamed Columns\"", "let\n    Source = OxCGRT_latest,\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"C1_School closing\", \"C1_Flag\", \"C2_Workplace closing\", \"C2_Flag\", \"C3_Cancel public events\", \"C3_Flag\", \"C4_Restrictions on gatherings\", \"C4_Flag\", \"C5_Close public transport\", \"C5_Flag\", \"C6_Stay at home requirements\", \"C6_Flag\", \"C7_Restrictions on internal movement\", \"C7_Flag\", \"C8_International travel controls\", \"E1_Income support\", \"E1_Flag\", \"E2_Debt/contract relief\", \"E3_Fiscal measures\", \"E4_International support\", \"H1_Public information campaigns\", \"H1_Flag\", \"H2_Testing policy\", \"H3_Contact tracing\", \"H4_Emergency investment in healthcare\", \"H5_Investment in vaccines\", \"H6_Facial Coverings\", \"H6_Flag\", \"H7_Vaccination policy\", \"H7_Flag\", \"H8_Protection of elderly people\", \"H8_Flag\", \"M1_Wildcard\", \"ConfirmedCases\", \"ConfirmedDeaths\", \"StringencyIndex\", \"StringencyIndexForDisplay\", \"StringencyLegacyIndex\", \"StringencyLegacyIndexForDisplay\", \"GovernmentResponseIndex\"})\nin\n    #\"Removed Columns\"", "\nvar daysRecorded =  COUNTROWS(VALUES('CGRT Mandates'[Date]))\nreturn SUMMARIZECOLUMNS('CGRT Mandates'[CountryCode], \n\"Days with School closures\",                  daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[School closures] = \"No measures\"              )),\n\"Days with Workplace closures\",               daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Workplace closures] = \"No measures\"           )),\n\"Days with Cancelling public events\",         daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Cancelling public events] = \"No measures\"     )),\n\"Days with Restrictions on gathering\",        daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Restrictions on gathering] = \"No measures\"    )),\n\"Days with Public transport closures\",        daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Public transport closures] = \"No measures\"    )),\n\"Days with Stay at home requirements\",        daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Stay at home requirements] = \"No measures\"    )),\n\"Days with Internal mov't restrictions\",      daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Internal mov't restrictions] = \"No measures\"  )),\n\"Days with International travel controls\",    daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[International travel controls] = \"No measures\")),\n\"Days with Face coverings required\",          daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Face coverings] = \"No measures\"               )),\n\"Days with Vaccinations available\",           daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Vaccination policy] = \"No availability\"       ))\n\n)", "\nvar daysRecorded =  COUNTROWS(VALUES('OWID COVID data'[date]))\nreturn SUMMARIZECOLUMNS('Days with restrictions'[CountryCode], \n\"School closures\",                  switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[School closures] = \"No measures\"              )) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[School closures] = \"No measures\"               )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[School closures] = \"No measures\"               )) <300, \"200-300 days\" ,\">300 days\"),\n\"Workplace closures\",               switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Workplace closures] = \"No measures\"           )) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Workplace closures] = \"No measures\"            )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Workplace closures] = \"No measures\"            )) <300, \"200-300 days\" ,\">300 days\"),\n\"Cancelling public events\",         switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Cancelling public events] = \"No measures\"     )) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Cancelling public events] = \"No measures\"      )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Cancelling public events] = \"No measures\"      )) <300, \"200-300 days\" ,\">300 days\"),\n\"Restrictions on gathering\",        switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Restrictions on gathering] = \"No measures\"    )) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Restrictions on gathering] = \"No measures\"     )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Restrictions on gathering] = \"No measures\"     )) <300, \"200-300 days\" ,\">300 days\"),\n\"Public transport closures\",        switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Public transport closures] = \"No measures\"    )) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Public transport closures] = \"No measures\"     )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Public transport closures] = \"No measures\"     )) <300, \"200-300 days\" ,\">300 days\"),\n\"Stay at home requirements\",        switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Stay at home requirements] = \"No measures\"    )) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Stay at home requirements] = \"No measures\"     )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Stay at home requirements] = \"No measures\"     )) <300, \"200-300 days\" ,\">300 days\"),\n\"Domestic travel restrictions\",      switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Internal mov't restrictions] = \"No measures\"  )) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Internal mov't restrictions] = \"No measures\"   )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Internal mov't restrictions] = \"No measures\"   )) <300, \"200-300 days\" ,\">300 days\"),\n\"International travel controls\",    switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[International travel controls] = \"No measures\")) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[International travel controls] = \"No measures\" )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[International travel controls] = \"No measures\" )) <300, \"200-300 days\" ,\">300 days\"),\n\"Face coverings required\",          switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Face coverings] = \"No measures\"               )) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Face coverings] = \"No measures\"                )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Face coverings] = \"No measures\"                )) <300, \"200-300 days\" ,\">300 days\"),\n\"Vaccinations available\",           switch(true(), daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Vaccination policy] = \"No availability\"       )) <100, \"<100 days\", daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Vaccination policy] = \"No availability\"        )) <200, \"100-200 days\" , daysRecorded - COUNTROWS(FILTER('CGRT Mandates', 'CGRT Mandates'[Vaccination policy] = \"No availability\"        )) <300, \"200-300 days\" ,\">300 days\") \n\n)", "let\n    Source = Csv.Document(File.Contents(\"C:\\Users\\willthom\\Microsoft\\Gartner Data and Analytics Summit - Bake-off\\WEO_History.txt\"),[Delimiter=\"\t\", Columns=57, Encoding=1252, QuoteStyle=QuoteStyle.None]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}, {\"Column2\", type text}, {\"Column3\", type text}, {\"Column4\", type text}, {\"Column5\", type text}, {\"Column6\", type text}, {\"Column7\", type text}, {\"Column8\", type text}, {\"Column9\", type text}, {\"Column10\", type text}, {\"Column11\", type text}, {\"Column12\", type text}, {\"Column13\", type text}, {\"Column14\", type text}, {\"Column15\", type text}, {\"Column16\", type text}, {\"Column17\", type text}, {\"Column18\", type text}, {\"Column19\", type text}, {\"Column20\", type text}, {\"Column21\", type text}, {\"Column22\", type text}, {\"Column23\", type text}, {\"Column24\", type text}, {\"Column25\", type text}, {\"Column26\", type text}, {\"Column27\", type text}, {\"Column28\", type text}, {\"Column29\", type text}, {\"Column30\", type text}, {\"Column31\", type text}, {\"Column32\", type text}, {\"Column33\", type text}, {\"Column34\", type text}, {\"Column35\", type text}, {\"Column36\", type text}, {\"Column37\", type text}, {\"Column38\", type text}, {\"Column39\", type text}, {\"Column40\", type text}, {\"Column41\", type text}, {\"Column42\", type text}, {\"Column43\", type text}, {\"Column44\", type number}, {\"Column45\", type number}, {\"Column46\", type number}, {\"Column47\", type number}, {\"Column48\", type number}, {\"Column49\", type number}, {\"Column50\", type number}, {\"Column51\", type number}, {\"Column52\", type number}, {\"Column53\", type number}, {\"Column54\", type number}, {\"Column55\", type number}, {\"Column56\", type number}, {\"Column57\", type text}}),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Changed Type\", [PromoteAllScalars=true]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"WEO Country Code\", Int64.Type}, {\"ISO\", type text}, {\"WEO Subject Code\", type text}, {\"Country\", type text}, {\"Subject Descriptor\", type text}, {\"Subject Notes\", type text}, {\"Units\", type text}, {\"Scale\", type text}, {\"Country/Series-specific Notes\", type text}, {\"1980\", type text}, {\"1981\", type text}, {\"1982\", type text}, {\"1983\", type text}, {\"1984\", type text}, {\"1985\", type text}, {\"1986\", type text}, {\"1987\", type text}, {\"1988\", type text}, {\"1989\", type text}, {\"1990\", type text}, {\"1991\", type text}, {\"1992\", type text}, {\"1993\", type text}, {\"1994\", type text}, {\"1995\", type text}, {\"1996\", type text}, {\"1997\", type text}, {\"1998\", type text}, {\"1999\", type text}, {\"2000\", type text}, {\"2001\", type text}, {\"2002\", type text}, {\"2003\", type text}, {\"2004\", type text}, {\"2005\", type text}, {\"2006\", type text}, {\"2007\", type text}, {\"2008\", type text}, {\"2009\", type text}, {\"2010\", type text}, {\"2011\", type text}, {\"2012\", type text}, {\"2013\", type text}, {\"2014\", type number}, {\"2015\", type number}, {\"2016\", type number}, {\"2017\", type number}, {\"2018\", type number}, {\"2019\", type number}, {\"2020\", type number}, {\"2021\", type number}, {\"2022\", type number}, {\"2023\", type number}, {\"2024\", type number}, {\"2025\", type number}, {\"2026\", type number}, {\"Estimates Start After\", Int64.Type}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"WEO Country Code\", \"Subject Notes\", \"Country/Series-specific Notes\", \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\", \"1987\", \"1988\", \"1989\", \"1990\", \"1991\", \"1992\", \"1993\", \"1994\", \"1995\", \"1996\", \"1997\", \"1998\", \"1999\", \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"Estimates Start After\"}),\n    #\"Replaced Errors\" = Table.ReplaceErrorValues(#\"Removed Columns\", {{\"2019\", null}, {\"2020\", null}, {\"2021\", null}}),\n    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Replaced Errors\", {\"ISO\", \"WEO Subject Code\", \"Country\", \"Subject Descriptor\", \"Units\", \"Scale\"}, \"Attribute\", \"Value\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Unpivoted Columns\",{{\"Attribute\", \"Year\"}}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Renamed Columns\", each ([Subject Descriptor] = \"Gross domestic product, constant prices\")),\n    #\"Pivoted Column\" = Table.Pivot(#\"Filtered Rows\", List.Distinct(#\"Filtered Rows\"[Units]), \"Units\", \"Value\", List.Sum),\n    #\"Grouped Rows\" = Table.Group(#\"Pivoted Column\", {\"ISO\", \"Country\", \"Year\"}, {{\"GDP (bn)\", each List.Sum([National currency]), type nullable number}, {\"% change\", each List.Sum([Percent change]), type nullable number}}),\n    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Grouped Rows\",{{\"Year\", Int64.Type}})\nin\n    #\"Changed Type2\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"XVVdb9w2EPwrBz/HBD+Wy93HIkYbN7VdtGmMIvCDfKf4iDtLhqSL4/76LrmU4xbwg3UaUrOzO7Nfvpz9dOzuu8fu7N1Z8IYsYnLy/zmhSexcsPKA8uLs7l3FzocCRWdCsslhgbroDVgAx/Lk0aBip/zPONR7g0meU+QKds5AcN6Xr6A1oYEP3TB3c0GDYeRkoaDZy3cEHRQMFfy+O+av4zTkejka59DboJezQXIRy+HIK348jlO3GwuajY1MrpbobDRB+NRPQTSuoYeh3y55e1rKz85ETol8OZC8STGGKhBwRV/0x+65m3q9OziKlet5iiaKPlCgMbYqL/K8THm7bMavGyF1erzXEsgQJwhUDyZjvdSQykHXdP9ZCsi7gvXJJESfqpbkpFpMVL6YrEkV+0s/Tg+56W7BolNsMAjBplIrBhMr9oNwz7lc64xlaQtpP5MBphBSvbciL3fdvggIYLz0eu0lGEhEnvSNyn15POZhzKWXIP0FhpgqAzJM6MJ/KrscdrnTKWFDgvXYps9H8okUq5Vdjs8FCN5Y52KoFDgYL32spyC1Sz++zhIZeYXWVqhMtEegAo3QWvKxH5bT9vBSwMmgCA8VTGAwWYtJ+6cj/dt4yvNK1xmHHKHSZSlH+mBjERebDlddHnoVBjkwVBFQhoQc+1Rnq+Gml2M37Np4okDrpQnFjlKcU76+gee52+5Pc78ss4rhg3Xq2STDKg+2iaETepW3+/zQDeW3YILIoV2WCmNAy/Ft766yDP88Lp06AhkgQtOZrRXi6olGJs9z+Xt6yhofCRwqeRIjJkJGHTd4xY+nKWtnIKKl2FzuiQKSVqpiX43DolIDGvby6agzJzEQIcSg1etoXPf3U4smYee8mFR7TkbMZKt9gdp4XPfful0zXnAhunaxOK+4u6YBN/Wu++fNh+7xad7nanKREKIH9qveGKgWKS/o9cSv/TT3L2oAz8QaZkkUL/2sDf3B/Hlz1X/P21Gzj8CuhKyYAAgq+bhqWPB/j9NBq3cYkzpGLmeQCXTauQYep2W/ed9No1iyViw9DTLWeoRL3mtsR35z4KI7tBFIwpjY1WqZTRJ29QHWLL7Z57EZnUiT6JykNgSuVcQ1lm4OR0mQx0YiYgzgmyu5fCJpYmvvb6b+YRx0MKVA6zWvvTg/Wa5BKd1UBr/3wzC/HL91ug+ESWSbom9h6q1snvi2/X/sx12/uZyb56CEqCUOa0dlEMgqdTXon+PpfypKryOSDgFZET5am3RRwpsjP3QU+zK3LSI6Sta30IzNSp/6Yry571WfJLEKsSUhsg/1QXIZG/q75pvEdgSgGi2cyjQC1sUKrdi/lm6vqjjhGPy6ggk9BFBZ9M7P/fQollO2kvCUcN15Mok1NWXgdEw+Z1kxbf+WhcS6K84TlVBkNfK6UG87Mc/wsGhDZbVYy1aJyNoBMQc3IhrJt/28bN5+QTotI9gWg6gtFVf3vy6R2zxvx2HObWLE8RIQawqJRSypQRufl/FR+LT4iJHVDc4mE6xY29Y3Z3d3/wI=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [State = _t, Latitude = _t, Longitude = _t, #\"Average Temperature\u00a0\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"State\", type text}, {\"Latitude\", type number}, {\"Longitude\", type number}, {\"Average Temperature\u00a0\", type number}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Table.NestedJoin(Cases, {\"County Name\", \"State\", \"StateFIPS\", \"Date\", \"FIPS\"}, Deaths, {\"County Name\", \"State\", \"StateFIPS\", \"Date\", \"FIPS\"}, \"Deaths\", JoinKind.LeftOuter),\n    #\"Expanded Deaths\" = Table.ExpandTableColumn(Source, \"Deaths\", {\"Deaths\"}, {\"Deaths.1\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded Deaths\",{{\"Deaths.1\", \"Deaths\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Date\", type date}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Changed Type\",\"Jackson County (including other portions of Kansas City)\",\"Jackson County\",Replacer.ReplaceText,{\"County Name\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"New York City\",\"New York*\",Replacer.ReplaceText,{\"County Name\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"City of St. Louis\",\"St. Louis City\",Replacer.ReplaceText,{\"County Name\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"City and Borough of Juneau\",\"Juneau Borough\",Replacer.ReplaceText,{\"County Name\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"Municipality of Anchorage\",\"Anchorage\",Replacer.ReplaceText,{\"County Name\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Replaced Value4\",{{\"Cases\", Int64.Type}, {\"Deaths\", Int64.Type}})\nin\n    #\"Changed Type1\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"XZTRbuowDIZfpeJ62jsgykbHmlYU6DjTLkyb0ahtjJJ0jPP0J07ZqZmEkPq5sX/7j/v+Ppt3cIQeZg+z+av/Ezj7eAjUtgGuGTTqL+pA/3DagrZgCW8mvIBOfaLRit5fzFkAOzRQI+GMY61l5VQ1OIpsp0gsO7iAkZ7Eywk/+TSqpuxPTPizRHMKNZ9ZzZVPoJR/XiUTTGpoSEUSM9Z1SqOiZhKWNdG1gtB5IhjFS0Cs0PpnFOuCQandULVXwocJv+Kg7C3tK8uRgtLUbLrkzFw70DXhmGNroWoGK52jqilPo6pGnUATTjj2c7boqGoqOLeWfuczzSkt7iM4mICZYSlqN4pPmVlCHs3t6oglx18QvBJ7Di/RCvqzbVRwV6zuYy/SWElTEy/3gVR+q4qsE+l94ICmJcKmLNC4JlqAQe9sULD4HYyhHech2GizRlGFjGnK2s7fmLArGVuLzMgT0pgzdv1zqbW9dl8wLkDOjNk0WMsosTc/N8ycAod7scXid/C/2IKJ3Uoy1Uqa4lZw/h1u4/ZtYjsHjX/aMdP20vTeTQ/2nCq/SaP8PZNfgvdLn1xoueQBaV3EDpXM6lLZCrVV4QxruLxi75MRZZ7Ne2lUBToqoMfwvaHreJB2XPEBetrvHWPBSGl05BeFVuo23rATOXsvH6RxGG3G65NvWGj3WDze5LPT+4S9EivrvDAX4WfkP2NDfwyNxsykHDoYKHX5c+7jHw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [State = _t, #\"State code\" = _t, #\"US territories\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"State\", type text}, {\"State code\", type text}, {\"US territories\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wcs7PS8ssyk1NUXBOLE4tVtJRMlSK1YlWcklNLMkAcY3AXJCkgltiSWJOZkmlQlBiSSpQylgpNhYA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Metric = _t, Order = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Metric\", type text}, {\"Order\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('COVID'[Date])), 1, 1), Date(Year(MAX('COVID'[Date])), 12, 31))", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Column1 = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", Int64.Type}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})\nin\n    #\"Removed Columns\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mwham\\Documents\\repos\\pbyx\\multilang1.xlsx\"), null, true),\n    section_Sheet = Source{[Item=\"section\",Kind=\"Sheet\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(section_Sheet,{{\"Column1\", type text}, {\"Column2\", type text}, {\"Column3\", type text}, {\"Column4\", type text}, {\"Column5\", type text}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mwham\\Documents\\repos\\pbyx\\multilang1.xlsx\"), null, true),\n    section_Sheet = Source{[Item=\"section\",Kind=\"Sheet\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(section_Sheet,{{\"Column1\", type text}, {\"Column2\", type text}, {\"Column3\", type text}, {\"Column4\", type text}, {\"Column5\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mwham\\Documents\\repos\\pbyx\\multilang1.xlsx\"), null, true),\n    section_Sheet = Source{[Item=\"section\",Kind=\"Sheet\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(section_Sheet,{{\"Column1\", type text}, {\"Column2\", type text}, {\"Column3\", type text}, {\"Column4\", type text}, {\"Column5\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT #(lf)       concat([GJAHR] , substring([PERDE], 2, 2) ) + 400 YearPeriod#(lf)      ,[KNDNR] [Customer Key]#(lf)      --,[ARTNR] [Product]#(lf)      --,[FKART] [Billing Type]#(lf)      --,[FRWAE] [Currency Key]#(lf)      --,[VTWEG] [Distribution Channel]#(lf)   ,[VTWEG] [Product Key]#(lf)      --,[PRCTR] [Profit Center]#(lf)   ,pc.[Profit Center Key] [BU Key]#(lf)   ,1 [Scenario Key]#(lf)      --,[KMMAKL] [Material Group]#(lf)      ,[ERLOS]*1.20 [Revenue]#(lf)      ,[VVMAT] [Material Costs]#(lf)      ,[VVLCV] [Labor Costs Variable]#(lf)      ,[VVN30] [Taxes]#(lf)      ,[VV910] [Rev for Exp Travel]#(lf)      ,[VV950] [Travel Expenses]#(lf)      ,[VV970] [Cost Third Party]#(lf)      ,[VVYSV] [Subscription Revenue]#(lf)  FROM OSQ.[osq].[CE11010] f, mds.mdm.profitcenter pc#(lf)where  [MANDT]  = 210 and concat([GJAHR] , substring([PERDE], 2, 2) ) < 201012 and f.PRCTR = pc.PCName and [FRWAE] = 'USD'#(lf)union all #(lf)SELECT #(lf)       concat([GJAHR] , substring([PERDE], 2, 2) ) + 400 PeriodYear#(lf)      ,[KNDNR] [Customer]#(lf)      --,[ARTNR] [Product]#(lf)      --,[FKART] [Billing Type]#(lf)      --,[FRWAE] [Currency Key]#(lf)      --,[VTWEG] [Distribution Channel]#(lf)   ,[VTWEG] [Product Key]#(lf)      --,[PRCTR] [Profit Center]#(lf)   ,pc.[Profit Center Key] [BU Key]#(lf)   ,2 [Scenario Key]#(lf)      --,[KMMAKL] [Material Group]#(lf)      ,[ERLOS]*1.4 [Revenue]#(lf)      ,[VVMAT] [Material Costs]#(lf)      ,[VVLCV] [Labor Costs Variable]#(lf)      ,[VVN30] [Taxes]#(lf)      ,[VV910] [Rev for Exp Travel]#(lf)      ,[VV950] [Travel Expenses]#(lf)      ,[VV970] [Cost Third Party]#(lf)      ,[VVYSV] [Subscription Revenue]#(lf)  FROM OSQ.[osq].[CE11010] f tablesample (85 percent),  mds.mdm.profitcenter pc#(lf)where  [MANDT]  = 300 and concat([GJAHR] , substring([PERDE], 2, 2) ) < 201012 and f.PRCTR = pc.PCName and [FRWAE] = 'USD'\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Customer Key\", \"Customer Key\"}, {\"Product Key\", \"Product Key\"}, {\"BU Key\", \"BU Key\"}, {\"Scenario Key\", \"Scenario Key\"}, {\"Revenue\", \"Revenue\"}, {\"Material Costs\", \"Material Costs\"}, {\"Labor Costs Variable\", \"Labor Costs Variable\"}, {\"Taxes\", \"Taxes\"}, {\"Rev for Exp Travel\", \"Rev for Exp Travel\"}, {\"Travel Expenses\", \"Travel Expenses\"}, {\"Cost Third Party\", \"Cost Third Party\"}, {\"Subscription Revenue\", \"Subscription Revenue\"}, {\"YearPeriod\", \"YearPeriod\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Customer Key\", Int64.Type}, {\"Product Key\", type text}, {\"BU Key\", type number}, {\"Scenario Key\", Int64.Type}, {\"Revenue\", type number}, {\"Material Costs\", type number}, {\"Labor Costs Variable\", type number}, {\"Taxes\", type number}, {\"Rev for Exp Travel\", type number}, {\"Travel Expenses\", type number}, {\"Cost Third Party\", type number}, {\"Subscription Revenue\", type number}, {\"YearPeriod\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT #(lf)       #(lf)      [Profit Center Key] [BU Key],#(lf)   BU,#(lf)   Division, Executive_id#(lf)  FROM [MDS].[mdm].[profitcenter]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"BU Key\", \"BU Key\"}, {\"BU\", \"BU\"}, {\"Division\", \"Division\"}, {\"Executive_id\", \"Executive_id\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"BU Key\", type number}, {\"BU\", type text}, {\"Division\", type text}, {\"Executive_id\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT#(lf)       concat([Year], [period]) YearPeriod#(lf)#(tab)  ,[Year]#(lf)      ,[Period]#(lf)      ,[Date]#(lf)      ,[Month]#(lf)      ,[QtrID]#(lf)      ,[Qtr]#(lf)  FROM [MDS].[mdm].[fiscalperiod]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"YearPeriod\", \"YearPeriod\"}, {\"Year\", \"Year\"}, {\"Period\", \"Period\"}, {\"Date\", \"Date\"}, {\"Month\", \"Month\"}, {\"QtrID\", \"QtrID\"}, {\"Qtr\", \"Qtr\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"YearPeriod\", type text}, {\"Year\", Int64.Type}, {\"Period\", type text}, {\"Date\", type datetime}, {\"Month\", type text}, {\"QtrID\", type text}, {\"Qtr\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlTSUXJMLilNzFGK1YlWMgJynUpT0lNLlGJjAQ==\", BinaryEncoding.Base64), Compression.Deflate))),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Column1\", \"Scenario Key\"}, {\"Column2\", \"Scenario\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Scenario Key\", Int64.Type}, {\"Scenario\", type text}})\n in\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMjRQ0lEKzi9LVIrViVYyAvECijJzS4vBfGMQ3yW/KD8dIm8C4rvnJKZkQhVYgAR8PXXNjSBcI5B8aV5eapFSbCwA\", BinaryEncoding.Base64), Compression.Deflate))),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Column1\", \"Product Key\"}, {\"Column2\", \"Product\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Product Key\", Int64.Type}, {\"Product\", type text}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Customer and Product Profitability\\Data\\dimCustomer.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Customer\", \"Customer\"}, {\"Country\", \"Country/Region\"}, {\"Name\", \"Name\"}, {\"City\", \"City\"}, {\"Postal Code\", \"Postal Code\"}, {\"State\", \"State\"}, {\"Industry ID\", \"Industry ID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Customer\", type number}, {\"Country/Region\", type text}, {\"Name\", type text}, {\"City\", type text}, {\"Postal Code\", type number}, {\"State\", type text}, {\"Industry ID\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT [dbo].[Industry].*   FROM [dbo].[Industry]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"ID\", \"ID\"}, {\"Industry\", \"Industry\"}, {\"Image\", \"Image\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"ID\", Int64.Type}, {\"Industry\", type text}, {\"Image\", type binary}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT [dbo].[Executive].*   FROM [dbo].[Executive]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"ID\", \"ID\"}, {\"Name\", \"Name\"}, {\"Img\", \"Img\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"ID\", Int64.Type}, {\"Name\", type text}, {\"Img\", type binary}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"select StateShort StateCode, StateName State, Region from MDS.mdm.state\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"StateCode\", \"StateCode\"}, {\"State\", \"State\"}, {\"Region\", \"Region\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"StateCode\", type text}, {\"State\", type text}, {\"Region\", type text}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "Calendar(Date(Year(MIN('Date'[Date])), 1, 1), Date(Year(MAX('Date'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(Filepath), null, true),\n    Company_Sheet = Source{[Item=\"Company\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Company_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Company ID\", Int64.Type}, {\"Company Size\", type text}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(Filepath), null, true),\n    #\"Customer Table_Sheet\" = Source{[Item=\"Customer Table\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Customer Table_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Customer ID\", Int64.Type}, {\"Tenure\", Int64.Type}, {\"Geography ID\", Int64.Type}, {\"Completed tutorial\", type text}, {\"Subscription ID\", Int64.Type}, {\"Role\", Int64.Type}, {\"Company ID\", Int64.Type}, {\"Rating\", type text}, {\"Theme\", type text}, {\"Original Score\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(Filepath), null, true),\n    Device_Sheet = Source{[Item=\"Device\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Device_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ID\", Int64.Type}, {\"Customer ID\", Int64.Type}, {\"device\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(Filepath), null, true),\n    Geography_Sheet = Source{[Item=\"Geography\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Geography_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Geography ID\", Int64.Type}, {\"Continent\", type text}, {\"Country-Region\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(Filepath), null, true),\n    Role_Sheet = Source{[Item=\"Role\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Role_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Role ID\", Int64.Type}, {\"Role in Org\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(Filepath), null, true),\n    Subscription_Sheet = Source{[Item=\"Subscription\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Subscription_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Subscription ID\", Int64.Type}, {\"Subscription Type\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(Filepath), null, true),\n    #\"Support Tickets_Sheet\" = Source{[Item=\"Support Tickets\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Support Tickets_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Support Ticket ID\", Int64.Type}, {\"Customer ID\", Int64.Type}, {\"Date Created\", type date}, {\"Date Completed\", type date}, {\"Escalated\", Int64.Type}, {\"Duration\", Int64.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Support Tickets'[Date Created])), 1, 1), Date(Year(MAX('Support Tickets'[Date Created])), 12, 31))", "Calendar(Date(Year(MIN('Support Tickets'[Date Completed])), 1, 1), Date(Year(MAX('Support Tickets'[Date Completed])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"fdCtEoMwEATgV+lEY5qfgsdVt4qJYMIxE0OYpJg+PS0hqOy5vfnM7g2D6GkJ3+CdaK54uwvb1EVCUVA0FAPlkSXSZ3QUtvS36yj9gEpWFauaVcMq37lltTv0ucUxpeMTJZ5bayKhKCgaioGSd72iL1Li2a0mEoqCkru9l7SS87On6YfC2h0=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Era = _t, #\"10_my_bin\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Era\", type text}, {\"10_my_bin\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Era\", \"Period\"}})\nin\n    #\"Renamed Columns\"", "DISTINCT(SELECTCOLUMNS(FILTER('Discoveries',[class_name]<>\"Aves\"),\"Genus Name\",[occurrence.genus_name]))", "let\n    Source = Csv.Document(File.Contents(\"C:\\temp\\powerbi\\dinosaurs\\24208217190-occs.csv\"),[Delimiter=\",\", Columns=89, Encoding=1252, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Promoted Headers\",\"R\",\"\",Replacer.ReplaceText,{\"abund_value\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Replaced Value\",{{\"collection_no\", type text}, {\"source_database\", type text}, {\"collection.authorizer\", type text}, {\"class_name\", type text}, {\"class_extant\", type text}, {\"order_name\", type text}, {\"order_extant\", type text}, {\"family_name\", type text}, {\"family_extant\", type text}, {\"genus_extant\", type text}, {\"occurrence.genus_reso\", type text}, {\"occurrence.genus_name\", type text}, {\"occurrence.subgenus_reso\", type text}, {\"occurrence.subgenus_name\", type text}, {\"original.genus_reso\", type text}, {\"original.genus_name\", type text}, {\"original.subgenus_reso\", type text}, {\"original.subgenus_name\", type text}, {\"occurrence.authorizer\", type text}, {\"occurrence.enterer\", type text}, {\"occurrence.modifier\", type text}, {\"abund_value\", Int64.Type}, {\"abund_unit\", type text}, {\"occurrence.reference_no\", type text}, {\"original.authorizer\", type text}, {\"original.enterer\", type text}, {\"original.modifier\", type text}, {\"original.reference_no\", type text}, {\"first_author\", type text}, {\"second_author\", type text}, {\"other_authors\", type text}, {\"year_named\", Int64.Type}, {\"preservation\", type text}, {\"type_specimen\", type text}, {\"type_body_part\", type text}, {\"common_name\", type text}, {\"collection.enterer\", type text}, {\"collection.modifier\", type text}, {\"collection.reference_no\", type text}, {\"pubyr\", type text}, {\"collection_name\", type text}, {\"collection_aka\", type text}, {\"country\", type text}, {\"state\", type text}, {\"county\", type text}, {\"plate\", type text}, {\"latdec\", type number}, {\"lngdec\", type number}, {\"paleolatdec\", type number}, {\"paleolngdec\", type number}, {\"altitude_value\", type number}, {\"altitude_unit\", type text}, {\"geogscale\", type text}, {\"10_my_bin\", type text}, {\"research_group\", type text}, {\"formation\", type text}, {\"member\", type text}, {\"stratscale\", type text}, {\"lithdescript\", type text}, {\"lithification\", type text}, {\"minor_lithology\", type text}, {\"lithification2\", type text}, {\"minor_lithology2\", type text}, {\"\", type text}, {\"_4\", type text}, {\"_5\", type text}, {\"_6\", type text}, {\"_7\", type text}, {\"_8\", type text}, {\"_9\", type text}, {\"_10\", type text}, {\"_11\", type text}, {\"_12\", type text}, {\"_13\", type text}, {\"_14\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"\", \"_4\", \"_5\", \"_6\", \"_7\", \"_8\", \"_9\", \"_10\", \"_11\", \"_12\", \"_13\", \"_14\"}),\n    #\"Replaced Errors\" = Table.ReplaceErrorValues(#\"Removed Columns\", {{\"latdec\", null}}),\n    #\"Added Index\" = Table.AddIndexColumn(#\"Replaced Errors\", \"Index\", 1, 1),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Added Index\",\"\",\"unspecified\",Replacer.ReplaceValue,{\"preservation\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\",\"unspecified\",Replacer.ReplaceValue,{\"geogscale\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"\",\"Unspecified\",Replacer.ReplaceValue,{\"formation\"}),\n    #\"Capitalized Each Word\" = Table.TransformColumns(#\"Replaced Value3\",{{\"geogscale\", Text.Proper, type text}, {\"preservation\", Text.Proper, type text}})\nin\n    #\"Capitalized Each Word\"", "let\n    Source = Csv.Document(File.Contents(\"C:\\temp\\powerbi\\dinosaurs\\24208217190_raw_measurements.txt\"),[Delimiter=\"\t\", Columns=24, Encoding=1252, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Promoted Headers\",\"NA\",\"\",Replacer.ReplaceText,{\"type locality number\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Replaced Value\",{{\"measurement_no\", type text}, {\"species\", type text}, {\"order\", type text}, {\"family\", type text}, {\"authors\", type text}, {\"year published\", Int64.Type}, {\"type specimen\", type text}, {\"type body part\", type text}, {\"type locality number\", Int64.Type}, {\"extant\", type text}, {\"specimen ID\", type text}, {\"part\", type text}, {\"position\", type text}, {\"measurement\", type text}, {\"specimens measured\", Int64.Type}, {\"mean\", type number}, {\"min\", type text}, {\"max\", type text}, {\"median\", type text}, {\"error\", type text}, {\"error unit\", type text}, {\"authorizer\", type text}, {\"enterer\", type text}, {\"references\", type text}}),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Changed Type\", \"species\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"species.1\", \"species.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"species.1\", type text}, {\"species.2\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type1\",{{\"species.1\", \"Genus\"}, {\"species.2\", \"Species\"}}),\n    #\"Added Index\" = Table.AddIndexColumn(#\"Renamed Columns\", \"Index\", 1, 1)\nin\n    #\"Added Index\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wci5KLUlMTs0vLVbSUTIE41idaCWv0qLE4uLMZKCAARAbgQVDijKRBY2VYmMB\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Answer = _t, IsCorrect = _t, Order = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Answer\", type text}, {\"IsCorrect\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8k0tSS0qVorViVZyS00tATN8M3NyMnMREp55yRmpQGYsAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Type = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Type\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Type\", \"Unit\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMjQ3MIgpNTAwMi9W0lEyAGJDpVgdoLgFurgRRNwSXdwYLG5kgCxuCMQmSrGxAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Answer = _t, IsCorrect = _t, Order = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Answer\", type text}, {\"IsCorrect\", Int64.Type}, {\"Order\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"nZNRa8IwEMe/SujTBrZ538tAxY2xgeDAB5FyS882WHNyicvcp1/SWSu+pW/Jwe+XP3eXzSZbN2jEGqxwDYqFZuvEXBuycOJwsIq+kbF6zibZlIzRKFagGnDYtpSvwJ+R52Qm4l3/gpg1wC1aT+waEYjGuaN9ktJ7X1jVUAvWaVUoOkiHQYNsJXAoBei/ok2dKzIOjZM+JMs92HwXU+XVJVU49Klktp1ssj5ueHCt9/qIlYabx9EUvi8XxLWMN3mFomHG6EAhnWyS4waLlrcTg7VaJTmuUDR8sk43XKHbXogl8F4siA/gNJlRrSmjoxwc0f9BzNqSGanu8Tvra9gmEbqJYyNHQdkJ7sxLh5y+HAMVHVPNVRLeAd084YcMHc7i4UtTS/X5MW2yF7wc8G5bWwhfIPyaxG0dsK4zYGpASOvLhYn8C8ZIWkErdqNmNgjKQbDd/gE=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Title = _t, Credit = _t, URL = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Title\", type text}, {\"Credit\", type text}, {\"URL\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Credit\", \"Source\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wck7MS0xJVNJRMgBiQ6VYHaBQRmYeTMQILBKal1mSmqLgnZmXnpKfC5UyRpYKLkksSS0GG6GjZKIUGwsA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Answer = _t, IsCorrect = _t, Order = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Answer\", type text}, {\"IsCorrect\", Int64.Type}, {\"Order\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"lc49D4IwGATgv0I6A2+LmBhXibqYGKMTIU1TClboR1rQvy9VcWe44ZbnrixRIbXxbHTRmbkOxQhPIVPuw2D9FmC0vWF1+pKdVKKWLDWuhdBsaMCNUkZ74MA3MFs0WHSv0odtURWX6Cj6Pto5IeaFbPkCA9ZAgOgH+tsn45z0Rv9+r5bLDTQcDhOq6UU+haO3K80wXicEJySnGcH5d616Aw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Answer = _t, IsCorrect = _t, Order = _t, Image = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Answer\", type text}, {\"IsCorrect\", Int64.Type}, {\"Order\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMtAzU8hNLUktKlbQMNSzNFNIS00t0VTSUTIAYkOlWJ1oJUM9A7gSYz0jCxQlRlAlxnAlJnpG5nAlhkBsDFZihGSKmZ4pqkUmSrGxAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Answer = _t, IsCorrect = _t, Order = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Answer\", type text}, {\"IsCorrect\", Int64.Type}, {\"Order\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.Combine({Images1, Images2})\nin\n    Source", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\ducng\\OneDrive\\Documents\\My Work\\My Projects\\Power BI Contest\\Data\\Appliance Electricity Power.xlsx\"), null, true),\n    Appliance_Table = Source{[Item=\"Appliance\",Kind=\"Table\"]}[Data],\n    #\"Added Custom\" = Table.AddColumn(Appliance_Table, \"Appliance Title\", each if [Usage Period] = \"All Day\" then [Appliance] &\" - \"& [Usage Period] else [Appliance]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Added Custom\",{{\"Image Url\", type text}, {\"Category\", type text}, {\"Appliance\", type text}, {\"Number in Default House\", Int64.Type}, {\"Usage Period\", type text}, {\"\u00a0Active Power (Watts)\", type number}, {\"Annual Active Usage (hours)\", Int64.Type}, {\"Standby Power (Watts)\", type number}, {\"Annual Standby Usage (hours)\", Int64.Type}, {\"Active Energy (kWh)\", type number}, {\"Standby Energy (kWh)\", type number}, {\"Total Energy (kWh)\", type number}, {\"Appliance Title\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\ducng\\OneDrive\\Documents\\My Work\\My Projects\\Power BI Contest\\Data\\Appliance Electricity Power.xlsx\"), null, true),\n    Rate_Table = Source{[Item=\"Rate\",Kind=\"Table\"]}[Data],\n    #\"Extracted Text Before Delimiter\" = Table.TransformColumns(Rate_Table, {{\"2019\", each Text.BeforeDelimiter(_, \"\u00a2\"), type text}, {\"2018\", each Text.BeforeDelimiter(_, \"\u00a2\"), type text}, {\"2017\", each Text.BeforeDelimiter(_, \"\u00a2\"), type text}, {\"2016\", each Text.BeforeDelimiter(_, \"\u00a2\"), type text}, {\"2015\", each Text.BeforeDelimiter(_, \"\u00a2\"), type text}}),\n    #\"Unpivoted Columns\" = Table.UnpivotOtherColumns(#\"Extracted Text Before Delimiter\", {\"STATE\", \"State code\"}, \"Year\", \"\u00a2/ kWh\"),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Unpivoted Columns\",{{\"Year\", type date}, {\"\u00a2/ kWh\", type number}, {\"STATE\", type text}, {\"State code\", type text}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Rate'[Year])), 1, 1), Date(Year(MAX('Rate'[Year])), 12, 31))", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "GENERATESERIES(0, 1440, 1)", "let\n    Source = Appliance,\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"Appliance\", \"Image Url\", \"Number in Default House\", \"Usage Period\", \"\u00a0Active Power (Watts)\", \"Annual Active Usage (hours)\", \"Standby Power (Watts)\", \"Annual Standby Usage (hours)\", \"Active Energy (kWh)\", \"Standby Energy (kWh)\", \"Total Energy (kWh)\"}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each ([Category] = \"Bathroom\"))\nin\n    #\"Filtered Rows\"", "let\n    Source = Appliance,\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"Appliance\", \"Image Url\", \"Number in Default House\", \"Usage Period\", \"\u00a0Active Power (Watts)\", \"Annual Active Usage (hours)\", \"Standby Power (Watts)\", \"Annual Standby Usage (hours)\", \"Active Energy (kWh)\", \"Standby Energy (kWh)\", \"Total Energy (kWh)\"}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each [Category] = \"Home Entertainment\")\nin\n    #\"Filtered Rows\"", "let\n    Source = Appliance,\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"Appliance\", \"Image Url\", \"Number in Default House\", \"Usage Period\", \"\u00a0Active Power (Watts)\", \"Annual Active Usage (hours)\", \"Standby Power (Watts)\", \"Annual Standby Usage (hours)\", \"Active Energy (kWh)\", \"Standby Energy (kWh)\", \"Total Energy (kWh)\"}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each [Category] = \"Home Office\")\nin\n    #\"Filtered Rows\"", "let\n    Source = Appliance,\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"Appliance\", \"Image Url\", \"Number in Default House\", \"Usage Period\", \"\u00a0Active Power (Watts)\", \"Annual Active Usage (hours)\", \"Standby Power (Watts)\", \"Annual Standby Usage (hours)\", \"Active Energy (kWh)\", \"Standby Energy (kWh)\", \"Total Energy (kWh)\"}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each [Category] = \"Kitchen\")\nin\n    #\"Filtered Rows\"", "let\n    Source = Appliance,\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"Appliance\", \"Image Url\", \"Number in Default House\", \"Usage Period\", \"\u00a0Active Power (Watts)\", \"Annual Active Usage (hours)\", \"Standby Power (Watts)\", \"Annual Standby Usage (hours)\", \"Active Energy (kWh)\", \"Standby Energy (kWh)\", \"Total Energy (kWh)\"}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each [Category] = \"Other Miscellaneous\")\nin\n    #\"Filtered Rows\"", "GENERATESERIES(0, 1440, 1)", "let\n    Source = Csv.Document(File.Contents(\"C:\\Users\\ducng\\OneDrive\\Documents\\My Work\\My Projects\\Power BI Contest\\Data\\List_of_plants_for_all_fuels_United_States_all_sectors.csv\"),[Delimiter=\",\", Columns=8, Encoding=1252, QuoteStyle=QuoteStyle.None]),\n    #\"Removed Top Rows\" = Table.Skip(Source,4),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Top Rows\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Plant Name\", type text}, {\"Plant Code\", Int64.Type}, {\"State\", type text}, {\"Sector Name\", type text}, {\"Prime Movers\", type text}, {\"Fuel Types\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Csv.Document(File.Contents(\"C:\\Users\\ducng\\OneDrive\\Documents\\My Work\\My Projects\\Power BI Contest\\Data\\Net_generation_United_States_all_sectors_monthly.csv\"),[Delimiter=\",\", Columns=8, Encoding=1252, QuoteStyle=QuoteStyle.None]),\n    #\"Removed Top Rows\" = Table.Skip(Source,4),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Top Rows\", [PromoteAllScalars=true]),\n    #\"Unpivoted Other Columns\" = Table.UnpivotOtherColumns(#\"Promoted Headers\", {\"Month\"}, \"Source\", \"kWh\"),\n    #\"Extracted Text Before Delimiter\" = Table.TransformColumns(#\"Unpivoted Other Columns\", {{\"Source\", each Text.BeforeDelimiter(_, \"thousand megawatthours\"), type text}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Extracted Text Before Delimiter\",{{\"Month\", type date}, {\"kWh\", type number}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Net generation by sector'[Month])), 1, 1), Date(Year(MAX('Net generation by sector'[Month])), 12, 31))", "let\n    Source = Csv.Document(File.Contents(\"C:\\Users\\ducng\\OneDrive\\Documents\\My Work\\My Projects\\Power BI Contest\\Data\\Retail_sales_of_electricity.csv\"),[Delimiter=\",\", Columns=141, Encoding=1252, QuoteStyle=QuoteStyle.None]),\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Column4] <> \"\")),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Filtered Rows\", [PromoteAllScalars=true]),\n    #\"Unpivoted Other Columns\" = Table.UnpivotOtherColumns(#\"Promoted Headers\", {\"source key\", \"units\", \"description\"}, \"Date\", \"Value\"),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Unpivoted Other Columns\",\"--\",\"0\",Replacer.ReplaceText,{\"Value\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Replaced Value\",{{\"Date\", type date}, {\"Value\", Currency.Type}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('Retail sales of electricity'[Date])), 1, 1), Date(Year(MAX('Retail sales of electricity'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\ducng\\OneDrive\\Documents\\My Work\\My Projects\\Power BI Contest\\Data\\Energy Source.xlsx\"), null, true),\n    Table1_Table = Source{[Item=\"Table1\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Table1_Table,{{\"Energy Source Grouping Code\", type text}, {\" Energy Source\", type text}, {\"Energy Source Description\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\ducng\\OneDrive\\Documents\\My Work\\My Projects\\Power BI Contest\\Data\\Appliance Electricity Power.xlsx\"), null, true),\n    Rate_Table = Source{[Item=\"Rate\",Kind=\"Table\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(Rate_Table,{\"STATE\", \"State code\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"STATE\", type text}, {\"State code\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\ducng\\OneDrive\\Documents\\My Work\\My Projects\\Power BI Contest\\Data\\Energy Source.xlsx\"), null, true),\n    Table1_Table = Source{[Item=\"Table2\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Table1_Table,{{\"Prime Mover Code\", type text}, {\"Category\", type text}, {\"Prime Mover Description\", type text}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = List.Generate(() => \n  [Result = try country(1) otherwise null, Page=1],\n  each [Result] <> null,\n  each [Result = try country([Page] + 1) otherwise null, Page=[Page] + 1],\n  each [Result]\n),\n    #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Expanded Column1\" = Table.ExpandTableColumn(#\"Converted to Table\", \"Column1\", {\"iso2Code\", \"name\", \"region\", \"adminregion\", \"incomeLevel\", \"lendingType\", \"capitalCity\", \"longitude\", \"latitude\", \"Attribute:id\"}, {\"Column1.iso2Code\", \"Column1.name\", \"Column1.region\", \"Column1.adminregion\", \"Column1.incomeLevel\", \"Column1.lendingType\", \"Column1.capitalCity\", \"Column1.longitude\", \"Column1.latitude\", \"Column1.Attribute:id\"}),\n    #\"Column1 region\" = #\"Expanded Column1\"{11}[Column1.region],\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Column1 region\",{{\"Element:Text\", type text}, {\"Attribute:id\", type text}, {\"Attribute:iso2code\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mwham\\Desktop\\test.xlsx\"), null, true),\n    Kris_Sheet = Source{[Item=\"Kris\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Kris_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"a\", Int64.Type}, {\"b\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WSlSK1YlWSgKTyWAyBUymKsXGAgA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [a = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"a\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"F:\\Power BI\\POC PBIX Files\\Infocepts POC\\Global Superstore.xlsx\"), null, true),\n    Returns_Sheet = Source{[Item=\"Returns\",Kind=\"Sheet\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Returns_Sheet,{{\"Column1\", type text}, {\"Column2\", type text}, {\"Column3\", type text}}),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Changed Type\", [PromoteAllScalars=true]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Returned\", type text}, {\"Order ID\", type text}, {\"Market\", type text}})\nin\n    #\"Changed Type1\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"F:\\Power BI\\POC PBIX Files\\Infocepts POC\\Global Superstore.xlsx\"), null, true),\n    Orders_Sheet = Source{[Item=\"Orders\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Orders_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Category\", type text}, {\"City\", type text}, {\"Country\", type text}, {\"Customer Name\", type text}, {\"Market\", type text}, {\"Customer ID\", type text}, {\"Order Date\", type date}, {\"Year (OrderDate)\", Int64.Type}, {\"Order ID\", type text}, {\"Order Priority\", type text}, {\"Product ID\", type text}, {\"Product Name\", type text}, {\"Region\", type text}, {\"Row ID\", Int64.Type}, {\"Segment\", type text}, {\"Ship Date\", type date}, {\"Ship Mode\", type text}, {\"State\", type text}, {\"Sub-Category\", type text}, {\"Discount\", type number}, {\"Profit\", type number}, {\"Quantity\", Int64.Type}, {\"Sales\", type number}, {\"Shipping Cost\", type number}}),\n    #\"Duplicated Column\" = Table.DuplicateColumn(#\"Changed Type\", \"Order Date\", \"Order Date - Copy\"),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Duplicated Column\",{{\"Order Date - Copy\", type text}}),\n    #\"Added Index\" = Table.AddIndexColumn(#\"Changed Type1\", \"Index\", 1, 1),\n    #\"Inserted Modulo\" = Table.AddColumn(#\"Added Index\", \"Modulo\", each Number.Mod([Index], 2), type number),\n    #\"Added Custom\" = Table.AddColumn(#\"Inserted Modulo\", \"Target Sales\", each if ([Modulo]=1) then [Sales]-[Profit] else [Sales] + [Profit]),\n    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Added Custom\",{{\"Target Sales\", type number}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type2\",{\"Index\"}),\n    #\"Added Custom1\" = Table.AddColumn(#\"Removed Columns\", \"Poor\", each if ([Modulo]=1) then [Target Sales]*0.3 else [Target Sales]),\n    #\"Added Custom2\" = Table.AddColumn(#\"Added Custom1\", \"Satisfactory\", each if ([Modulo]=1) then [Target Sales]*0.9 else [Target Sales]),\n    #\"Added Custom3\" = Table.AddColumn(#\"Added Custom2\", \"Good\", each if ([Modulo]=1) then [Target Sales]*2 else [Target Sales]),\n    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Added Custom3\",{{\"Good\", type number}, {\"Satisfactory\", type number}, {\"Poor\", type number}}),\n    #\"Duplicated Column1\" = Table.DuplicateColumn(#\"Changed Type3\", \"Sales\", \"Sales - Copy\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Duplicated Column1\",{{\"Sales - Copy\", \"Sales w/o decimal\"}}),\n    #\"Changed Type4\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Sales w/o decimal\", Int64.Type}})\nin\n    #\"Changed Type4\"", "Calendar(Date(Year(MIN('Orders'[Ship Date])), 1, 1), Date(Year(MAX('Orders'[Ship Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"F:\\Power BI\\POC PBIX Files\\Infocepts POC\\Global Superstore.xlsx\"), null, true),\n    People_Sheet = Source{[Item=\"People\",Kind=\"Sheet\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(People_Sheet,{{\"Column1\", type text}, {\"Column2\", type text}}),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Changed Type\", [PromoteAllScalars=true]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Person\", type text}, {\"Region\", type text}})\nin\n    #\"Changed Type1\"", "let\n    Source = Date(#date(2012, 1, 1), #date(2016, 12, 31), 4)\nin\n    Source", "Calendar(Date(Year(MIN('Date Table'[Date])), 1, 1), Date(Year(MAX('Date Table'[Date])), 12, 31))", "Calendar(Date(Year(MIN('Date Table'[WeekEnding])), 1, 1), Date(Year(MAX('Date Table'[WeekEnding])), 12, 31))", "let\n    Fonte = Excel.Workbook(File.Contents(\"C:\\Users\\marinj06\\Documents\\Green Plastic Cycle.xlsx\"), null, true),\n    Tabela3_Table = Fonte{[Item=\"Tabela3\",Kind=\"Table\"]}[Data],\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(Tabela3_Table,{{\"Number\", Int64.Type}, {\"Id\", type text}, {\"Language\", type text}, {\"Text\", type text}})\nin\n    #\"Tipo Alterado1\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Fonte = Excel.Workbook(File.Contents(\"C:\\Users\\marinj06\\Documents\\Green Plastic Cycle.xlsx\"), null, true),\n    #\"\u00c1reas Plantadas (Mundo)_Sheet\" = Fonte{[Item=\"\u00c1reas Plantadas (Mundo)\",Kind=\"Sheet\"]}[Data],\n    #\"Cabe\u00e7alhos Promovidos\" = Table.PromoteHeaders(#\"\u00c1reas Plantadas (Mundo)_Sheet\", [PromoteAllScalars=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Cabe\u00e7alhos Promovidos\",{{\"Country\", type text}, {\"Sigla\", type text}, {\"Produ\u00e7\u00e3o (1000 t)\", Int64.Type}, {\"\u00c1rea (1000 ha)\", Int64.Type}, {\"Produtividade (t/ha)\", type number}})\nin\n    #\"Tipo Alterado\"", "let\n    Fonte = Excel.Workbook(File.Contents(\"C:\\Users\\marinj06\\Documents\\Green Plastic Cycle.xlsx\"), null, true),\n    #\"\u00c1reas Colhida (Brasil)_Sheet\" = Fonte{[Item=\"\u00c1reas Colhida (Brasil)\",Kind=\"Sheet\"]}[Data],\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"\u00c1reas Colhida (Brasil)_Sheet\",{{\"Column1\", type text}, {\"Column2\", Int64.Type}, {\"Column3\", Int64.Type}, {\"Column4\", Int64.Type}, {\"Column5\", Int64.Type}, {\"Column6\", Int64.Type}, {\"Column7\", Int64.Type}}),\n    #\"Cabe\u00e7alhos Promovidos\" = Table.PromoteHeaders(#\"Tipo Alterado\", [PromoteAllScalars=true]),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Cabe\u00e7alhos Promovidos\",{{\"ESTADO/SAFRA\", type text}, {\"2012\", Int64.Type}, {\"2013\", Int64.Type}, {\"2014\", Int64.Type}, {\"2015\", Int64.Type}, {\"2016\", Int64.Type}, {\"2017\", Int64.Type}}),\n    #\"Outras Colunas N\u00e3o Din\u00e2micas\" = Table.UnpivotOtherColumns(#\"Tipo Alterado1\", {\"ESTADO/SAFRA\"}, \"Ano\", \"Valor\"),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Outras Colunas N\u00e3o Din\u00e2micas\",{{\"ESTADO/SAFRA\", \"Estado\"}})\nin\n    #\"Colunas Renomeadas\"", "let\n    Fonte = Excel.Workbook(File.Contents(\"C:\\Users\\marinj06\\Documents\\Green Plastic Cycle.xlsx\"), null, true),\n    References_Sheet = Fonte{[Item=\"References\",Kind=\"Sheet\"]}[Data],\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(References_Sheet,{{\"Column1\", type text}, {\"Column2\", type text}}),\n    #\"Cabe\u00e7alhos Promovidos\" = Table.PromoteHeaders(#\"Tipo Alterado\", [PromoteAllScalars=true]),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Cabe\u00e7alhos Promovidos\",{{\"Fonte\", type text}, {\"Site\", type text}})\nin\n    #\"Tipo Alterado1\"", "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W0lOKjQUA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"Coluna 1\" = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Coluna 1\", type text}}),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Tipo Alterado\",{\"Coluna 1\"})\nin\n    #\"Colunas Removidas\"", "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wck7MLchXcCstSU3Kz1HSUbIwMjVQitWJVnLNSU1LzCtJBYqZGRhAxJxySlN1wzMSc0CihqYGYPFYAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Medida = _t, Valor = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Medida\", type text}, {\"Valor\", type number}})\nin\n    #\"Tipo Alterado\"", "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"PY9BTsNADEWvYkVil1blEAixogvEpurCmbiJhTNunZlW4TR0hbgC21wMTwqsPP5j/f/fbldt1VLuMo1U1dUzbGW+jomDwitZSzB/gcJRhSmxUPS3aZvfuVWYP+CIltjAF0oYVaBFCBhx1dIK58/5O6Ct4YUGUOPOh7nFeb6eSepifb/Z3LkWOMgiAgFyLCYak3GTuUQgHIzQvAiesh8PFJNCJ9qgrKt9vaseYic89k7waETRKbBAAI+A8OaOoAc43sTaG4pQW6gmSv3kWHTDCq4eTAcYc4fmIORcfQFbw1OCHoudI9AFG6GFiWNdUv5ApiDLF3qkh4n8kyQawVuHbA3H7rc9XNAGX51i/wM=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Language = _t, Text = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Text\", type text}, {\"Language\", type text}})\nin\n    #\"Tipo Alterado\"", "let\n    Min = 1,\n    Max = List.Max(#\"Areas Plantation (World)\"[#\"\u00c1rea (1000 ha)\"]),\n    Lista = List.Numbers(Min, Max),\n    #\"Convertido para Tabela\" = Table.FromList(Lista, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Convertido para Tabela\",{{\"Column1\", \"Hectares\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Hectares\", Int64.Type}})\nin\n    #\"Tipo Alterado\"", "let\n    Fonte = Excel.Workbook(File.Contents(\"C:\\Users\\marinj06\\Documents\\Green Plastic Cycle.xlsx\"), null, true),\n    Curiosities_Sheet = Fonte{[Item=\"Curiosities\",Kind=\"Sheet\"]}[Data],\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Curiosities_Sheet,{{\"Column1\", type text}, {\"Column2\", type text}}),\n    #\"Cabe\u00e7alhos Promovidos\" = Table.PromoteHeaders(#\"Tipo Alterado\", [PromoteAllScalars=true]),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Cabe\u00e7alhos Promovidos\",{{\"Text\", type text}, {\"Image\", type text}})\nin\n    #\"Tipo Alterado1\"", "let\n    Fonte = Excel.Workbook(File.Contents(\"C:\\Users\\marinj06\\Documents\\Green Plastic Cycle.xlsx\"), null, true),\n    Conversor_Sheet = Fonte{[Item=\"Conversor\",Kind=\"Sheet\"]}[Data],\n    #\"Cabe\u00e7alhos Promovidos\" = Table.PromoteHeaders(Conversor_Sheet, [PromoteAllScalars=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Cabe\u00e7alhos Promovidos\",{{\"Measure\", type text}, {\"Name\", type text}, {\"Type\", type text}, {\"Valor BR\", Int64.Type}, {\"Unidade BR2\", type text}, {\"Valor US\", type number}, {\"Unidade US\", type text}})\nin\n    #\"Tipo Alterado\"", "let\n    Min = 1,\n    Max = 1000,\n    Lista = List.Numbers(Min, Max),\n    #\"Convertido para Tabela\" = Table.FromList(Lista, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Convertido para Tabela\",{{\"Column1\", \"KMs\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"KMs\", Int64.Type}})\nin\n    #\"Tipo Alterado\"", "let\n    Fonte = Kilometers\nin\n    Fonte", "let\n    Fonte = Excel.Workbook(File.Contents(\"C:\\Users\\marinj06\\Documents\\Green Plastic Cycle.xlsx\"), null, true),\n    #\"Step by step_Sheet\" = Fonte{[Item=\"Step by step\",Kind=\"Sheet\"]}[Data],\n    #\"Cabe\u00e7alhos Promovidos\" = Table.PromoteHeaders(#\"Step by step_Sheet\", [PromoteAllScalars=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Cabe\u00e7alhos Promovidos\",{{\"id\", Int64.Type}, {\"imagem\", type text}, {\"text\", type text}})\nin\n    #\"Tipo Alterado\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\willthom\\Microsoft\\Gartner Data and Analytics Summit - Bake-off\\acaps_covid19_government_measures_dataset.xlsx\"), null, true),\n    Dataset_Sheet = Source{[Item=\"Dataset\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Dataset_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ID\", Int64.Type}, {\"ISO\", type text}, {\"COUNTRY\", type text}, {\"REGION\", type text}, {\"ADMIN_LEVEL_NAME\", type text}, {\"PCODE\", type any}, {\"LOG_TYPE\", type text}, {\"CATEGORY\", type text}, {\"MEASURE\", type text}, {\"TARGETED_POP_GROUP\", type text}, {\"COMMENTS\", type text}, {\"NON_COMPLIANCE\", type text}, {\"DATE_IMPLEMENTED\", type date}, {\"SOURCE\", type text}, {\"SOURCE_TYPE\", type text}, {\"LINK\", type text}, {\"ENTRY_DATE\", type date}, {\"Alternative source\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"ADMIN_LEVEL_NAME\", \"PCODE\", \"LOG_TYPE\"}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Removed Columns\",null,\"False\",Replacer.ReplaceValue,{\"TARGETED_POP_GROUP\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"checked\",\"True\",Replacer.ReplaceText,{\"TARGETED_POP_GROUP\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Replaced Value1\",{{\"TARGETED_POP_GROUP\", \"Specific Group Targeted\"}, {\"MEASURE\", \"Measure\"}, {\"CATEGORY\", \"Category\"}}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Renamed Columns\",null,\"Not applicable\",Replacer.ReplaceValue,{\"NON_COMPLIANCE\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Replaced Value2\",{{\"DATE_IMPLEMENTED\", \"Date implemented\"}, {\"COMMENTS\", \"Comments\"}, {\"SOURCE\", \"Source\"}, {\"SOURCE_TYPE\", \"Source type\"}, {\"ENTRY_DATE\", \"Entry date\"}})\nin\n    #\"Renamed Columns1\"", "Calendar(Date(Year(MIN('Govt Measures'[Entry date])), 1, 1), Date(Year(MAX('Govt Measures'[Entry date])), 12, 31))", "Calendar(Date(Year(MIN('Govt Measures'[Date implemented])), 1, 1), Date(Year(MAX('Govt Measures'[Date implemented])), 12, 31))", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"select distinct market BU,#(lf)  REGIONTITLE Region,#(lf)  MARKETDIRECTOR VP#(lf)from hr.bu\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"BU\", \"BU\"}, {\"Region\", \"RegionSeq\"}, {\"VP\", \"VP\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"BU\", type text}, {\"RegionSeq\", type text}, {\"VP\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT [HR].[FP].*   FROM [HR].[FP]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"FP\", \"FP\"}, {\"FPDesc\", \"FPDesc\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"FP\", type text}, {\"FPDesc\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"select distinct PayTypeID, [Hrly-Salaried] PayType#(lf)from [HR].[PayGroup]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"PayTypeID\", \"PayTypeID\"}, {\"PayType\", \"PayType\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"PayTypeID\", type text}, {\"PayType\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT distinct SeparationTypeID, [Vol-Invol] SeparationReason#(lf)  FROM [IP].[HR].[TermReason]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"SeparationTypeID\", \"SeparationTypeID\"}, {\"SeparationReason\", \"SeparationReason\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"SeparationTypeID\", type text}, {\"SeparationReason\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT [HR].[Date].*   FROM [HR].[Date]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Date\", \"Date\"}, {\"Month\", \"Month\"}, {\"MonthNumber\", \"MonthNumber\"}, {\"Period\", \"Period\"}, {\"PeriodNumber\", \"PeriodNumber\"}, {\"Qtr\", \"Qtr\"}, {\"QtrNumber\", \"QtrNumber\"}, {\"Year\", \"Year\"}, {\"Day\", \"Day\"}, {\"MonthStartDate\", \"MonthStartDate\"}, {\"MonthEndDate\", \"MonthEndDate\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Date\", type datetime}, {\"Month\", type text}, {\"MonthNumber\", Int64.Type}, {\"Period\", type text}, {\"PeriodNumber\", Int64.Type}, {\"Qtr\", Int64.Type}, {\"QtrNumber\", type text}, {\"Year\", Int64.Type}, {\"Day\", Int64.Type}, {\"MonthStartDate\", type datetime}, {\"MonthEndDate\", type datetime}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT dateadd(year, 1, d.date) Date#(lf)  ,Market BU#(lf)  ,[EmplID]#(lf)  ,iif([Gender]='M', 'C', 'D') Gender --  ,iif([Gender]='M', 'F', 'M') Gender#(lf)  ,[Age] - (2013 - year(d.date)) Age#(lf)  ,[EthnicGroup]#(lf)  ,[FP]#(lf)  ,dateadd(year, 1, [SenDate]) HireDate#(lf)  ,p.PayTypeID#(lf)  ,null [TermDate]#(lf)  ,null [TermReason]#(lf) FROM [IP].[HR].[AllEmps] E , [HR].[Date] d , [HR].[BU] b , hr.PayGroup p --, hr.TermReason t#(lf) where d.day = 1 and e.SenDate <= d.MonthEndDate and isnull(e.termdate, '9999-01-01') >= d.MonthEndDate and d.Date < '2014-01-01'#(lf)  and p.PayGroup = e.PayGroup#(lf)  and b.UNIT = e.Unit and [EmplID] % 2 = 0#(lf)union all#(lf)--seps#(lf)SELECT dateadd(year, 1, d.date) Date#(lf)    ,Market BU#(lf)      ,[EmplID]#(lf)      ,iif([Gender]='M', 'C', 'D') Gender#(lf)      ,[Age] - (2013 - year(d.date)) Age#(lf)      ,[EthnicGroup]#(lf)      ,[FP]#(lf)      ,dateadd(year, 1,[SenDate]) HireDate#(lf)      ,p.PayTypeID#(lf)      ,dateadd(year, 1, [TermDate]) [TermDate]#(lf)      ,t.[SeparationTypeID] [TermReason]#(lf)  FROM [IP].[HR].[AllEmps] E, [HR].[Date] d , [HR].[BU] b, hr.PayGroup p , hr.TermReason t#(lf) where d.day = 1 and e.TermDate <= d.MonthEndDate and e.TermDate >= d.MonthStartDate and d.Date < '2014-01-01'#(lf)  and p.PayGroup = e.PayGroup #(lf)  and t.[Term-Discharge]= e.[Term-Discharge]#(lf)  and b.UNIT = e.Unit and [EmplID] % 2 = 0\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"date\", \"date\"}, {\"EmplID\", \"EmplID\"}, {\"Gender\", \"Gender\"}, {\"Age\", \"Age\"}, {\"EthnicGroup\", \"EthnicGroup\"}, {\"FP\", \"FP\"}, {\"TermDate\", \"TermDate\"}, {\"BU\", \"BU\"}, {\"HireDate\", \"HireDate\"}, {\"PayTypeID\", \"PayTypeID\"}, {\"TermReason\", \"TermReason\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"date\", type datetime}, {\"EmplID\", Int64.Type}, {\"Gender\", type text}, {\"Age\", Int64.Type}, {\"EthnicGroup\", type text}, {\"FP\", type text}, {\"TermDate\", type datetime}, {\"BU\", type text}, {\"HireDate\", type datetime}, {\"PayTypeID\", type text}, {\"TermReason\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlTSUXIvyi8tUHBUitWJVjKC853AfGM43xnMN4HzXcB8UzjfFcw3g/PdwHxzON9dKTYWAA==\", BinaryEncoding.Base64), Compression.Deflate))),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Column1\", \"Ethnic Group\"}, {\"Column2\", \"Ethnicity\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Ethnic Group\", type text}, {\"Ethnicity\", type text}})\n in\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WclHSUfJNzEkFUoZKsTrRSs5AlltqLkTISCk2FgA=\", BinaryEncoding.Base64), Compression.Deflate))),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Column1\", \"ID\"}, {\"Column2\", \"Gender\"}, {\"Column3\", \"Sort\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"ID\", type text}, {\"Gender\", type text}, {\"Sort\", Int64.Type}})\n in\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlTSUYopNTAwTjY2UIrViVYyAgoYG+iaWIJ5xkCeqYG2UmwsAA==\", BinaryEncoding.Base64), Compression.Deflate))),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Column1\", \"AgeGroupID\"}, {\"Column2\", \"AgeGroup\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"AgeGroupID\", Int64.Type}, {\"AgeGroup\", type text}})\n in\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "Calendar(Date(Year(MIN('Date'[Date])), 1, 1), Date(Year(MAX('Date'[Date])), 12, 31))", "Calendar(Date(Year(MIN('Date'[MonthStartDate])), 1, 1), Date(Year(MAX('Date'[MonthStartDate])), 12, 31))", "Calendar(Date(Year(MIN('Date'[MonthEndDate])), 1, 1), Date(Year(MAX('Date'[MonthEndDate])), 12, 31))", "Calendar(Date(Year(MIN('Employee'[TermDate])), 1, 1), Date(Year(MAX('Employee'[TermDate])), 12, 31))", "Calendar(Date(Year(MIN('Employee'[HireDate])), 1, 1), Date(Year(MAX('Employee'[HireDate])), 12, 31))", "let\n    Source = Csv.Document(File.Contents(\"C:\\Users\\Justyna\\Desktop\\misiurescue\\healthappended.csv\"),[Delimiter=\",\", Columns=44, Encoding=1252, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"\", Int64.Type}, {\"GHO..CODE.\", type text}, {\"GHO..DISPLAY.\", type text}, {\"GHO..URL.\", type text}, {\"DATASOURCE..CODE.\", type text}, {\"DATASOURCE..DISPLAY.\", type text}, {\"DATASOURCE..URL.\", type text}, {\"PUBLISHSTATE..CODE.\", type text}, {\"PUBLISHSTATE..DISPLAY.\", type text}, {\"PUBLISHSTATE..URL.\", type text}, {\"YEAR..CODE.\", Int64.Type}, {\"YEAR..DISPLAY.\", type text}, {\"YEAR..URL.\", type text}, {\"REGION..CODE.\", type text}, {\"REGION..DISPLAY.\", type text}, {\"REGION..URL.\", type text}, {\"WORLDBANKINCOMEGROUP..CODE.\", type text}, {\"WORLDBANKINCOMEGROUP..DISPLAY.\", type text}, {\"WORLDBANKINCOMEGROUP..URL.\", type text}, {\"COUNTRY..CODE.\", type text}, {\"COUNTRY..DISPLAY.\", type text}, {\"COUNTRY..URL.\", type text}, {\"EDUCATIONLEVEL..CODE.\", type text}, {\"EDUCATIONLEVEL..DISPLAY.\", type text}, {\"EDUCATIONLEVEL..URL.\", type text}, {\"SEX..CODE.\", type text}, {\"SEX..DISPLAY.\", type text}, {\"SEX..URL.\", type text}, {\"RESIDENCEAREATYPE..CODE.\", type text}, {\"RESIDENCEAREATYPE..DISPLAY.\", type text}, {\"RESIDENCEAREATYPE..URL.\", type text}, {\"WEALTHQUINTILE..CODE.\", type text}, {\"WEALTHQUINTILE..DISPLAY.\", type text}, {\"WEALTHQUINTILE..URL.\", type text}, {\"DHSMICSGEOREGION..CODE.\", type text}, {\"DHSMICSGEOREGION..DISPLAY.\", type text}, {\"DHSMICSGEOREGION..URL.\", type text}, {\"Display.Value\", type text}, {\"Numeric\", type text}, {\"Low\", type text}, {\"High\", type text}, {\"StdErr\", type text}, {\"StdDev\", type text}, {\"Comments\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"\"}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each ([#\"GHO..CODE.\"] <> \"#indicator+code\")),\n    #\"Removed Columns1\" = Table.RemoveColumns(#\"Filtered Rows\",{\"DATASOURCE..CODE.\", \"DATASOURCE..DISPLAY.\", \"DATASOURCE..URL.\", \"PUBLISHSTATE..CODE.\", \"PUBLISHSTATE..DISPLAY.\", \"PUBLISHSTATE..URL.\", \"YEAR..CODE.\", \"YEAR..URL.\", \"REGION..URL.\", \"WORLDBANKINCOMEGROUP..CODE.\", \"WORLDBANKINCOMEGROUP..DISPLAY.\", \"WORLDBANKINCOMEGROUP..URL.\", \"EDUCATIONLEVEL..CODE.\", \"EDUCATIONLEVEL..DISPLAY.\", \"EDUCATIONLEVEL..URL.\", \"SEX..CODE.\", \"SEX..URL.\", \"RESIDENCEAREATYPE..CODE.\", \"RESIDENCEAREATYPE..DISPLAY.\", \"RESIDENCEAREATYPE..URL.\", \"WEALTHQUINTILE..CODE.\", \"WEALTHQUINTILE..DISPLAY.\", \"WEALTHQUINTILE..URL.\", \"DHSMICSGEOREGION..URL.\", \"DHSMICSGEOREGION..DISPLAY.\", \"DHSMICSGEOREGION..CODE.\", \"COUNTRY..URL.\", \"GHO..CODE.\", \"GHO..URL.\", \"Low\", \"High\", \"StdErr\", \"StdDev\", \"Comments\", \"REGION..CODE.\"}),\n    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Removed Columns1\", \"Display.Value\", Splitter.SplitTextByEachDelimiter({\"[\"}, QuoteStyle.Csv, false), {\"Display Value.1\", \"Display Value.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"Display Value.1\", Int64.Type}, {\"Display Value.2\", type text}}),\n    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Changed Type1\", {\"Display Value.1\"}),\n    #\"Removed Columns2\" = Table.RemoveColumns(#\"Removed Errors\",{\"Display Value.2\", \"Numeric\"}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Removed Columns2\",\"\",\"Both sexes\",Replacer.ReplaceValue,{\"SEX..DISPLAY.\"}),\n    #\"Removed Duplicates\" = Table.Distinct(#\"Replaced Value\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Duplicates\",{{\"GHO..DISPLAY.\", \"Indicator\"}, {\"YEAR..DISPLAY.\", \"Year\"}}),\n    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Year\", Int64.Type}}),\n    #\"Removed Errors1\" = Table.RemoveRowsWithErrors(#\"Changed Type2\", {\"Year\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Errors1\",{{\"REGION..DISPLAY.\", \"Region\"}, {\"COUNTRY..CODE.\", \"Country Code\"}, {\"COUNTRY..DISPLAY.\", \"Country\"}, {\"SEX..DISPLAY.\", \"Sex\"}, {\"Display Value.1\", \"Value\"}}),\n    #\"Pivoted Column\" = Table.Pivot(#\"Renamed Columns1\", List.Distinct(#\"Renamed Columns1\"[Indicator]), \"Indicator\", \"Value\", List.Max),\n    #\"Filtered Rows1\" = Table.SelectRows(#\"Pivoted Column\", each [Year] >= 1960),\n    #\"Removed Columns3\" = Table.RemoveColumns(#\"Filtered Rows1\",{\"Civil registration coverage of cause-of-death (%)\", \"Ill-defined causes in cause-of-death registration (%)\", \"Distribution of years of life lost by broader causes (%) - Injuries\", \"Antenatal care coverage - at least one visit (%)\", \"Births by caesarean section (%)\", \"Unmet need for family planning (%)\", \"Children aged <5 years stunted (%)\", \"Psychiatrists working in mental health sector (per 100 000 population)\", \"Children aged <5 years wasted for age (%)\", \"Children aged <5 years overweight (%)\", \"Crude birth rate (per 1000 population)\", \"Crude death rate (per 1000 population)\", \"Total fertility rate (per woman)\", \"Number of pharmaceutical personnel\", \"Density of pharmaceutical personnel (per 10 000 population)\", \"Number of nursing and midwifery personnel\", \"Dentistry personnel density (per 10 000 population)\", \"Nursing and midwifery personnel density (per 10 000 population)\", \"Civil registration coverage of births (%)\", \"Japanese encephalitis - number of reported cases\", \"Most recent census (year)\", \"Distribution of causes of death among children aged <5 years (%) - Malaria\", \"Prevalence of HIV among adults aged 15 to 49 (%)\", \"Deaths due to tuberculosis among HIV-negative people (per 100 000 population)\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Removed Columns3\", {\"Year\", \"Country Code\", \"Sex\"}, merge_indicators_world, {\"Year\", \"Country Code\", \"Sex\"}, \"merge_indicators_world\", JoinKind.LeftOuter),\n    #\"Expanded merge_indicators_world\" = Table.ExpandTableColumn(#\"Merged Queries\", \"merge_indicators_world\", {\"Rural population growth (annual %)\", \"Rural population (% of total population)\", \"Prevalence of HIV, total (% of population ages 15-49)\", \"Income share held by lowest 20%\", \"Poverty headcount ratio at $1.90 a day (2011 PPP) (% of population)\", \"Vulnerable employment, total (% of total employment) (modeled ILO estimate)\", \"Net migration\", \"Foreign direct investment, net outflows (% of GDP)\", \"Current account balance (% of GDP)\", \"Net primary income (BoP, current US$)\", \"Foreign direct investment, net (BoP, current US$)\", \"Foreign direct investment, net inflows (% of GDP)\", \"Expense (% of GDP)\", \"Adjusted savings: education expenditure (% of GNI)\", \"Adjusted savings: gross savings (% of GNI)\", \"Adjusted net national income (current US$)\", \"Adjusted net national income per capita (current US$)\", \"Adjusted net national income per capita (annual % growth)\", \"GDP per capita (current US$)\", \"GDP per capita (current LCU)\", \"GDP per capita growth (annual %)\", \"GDP per capita, PPP (current international $)\", \"Gross domestic savings (% of GDP)\", \"Gross domestic income (constant LCU)\", \"GNI per capita (current LCU)\", \"GNI per capita growth (annual %)\", \"GNI per capita, PPP (current international $)\", \"Gross savings (% of GNI)\", \"Gross savings (% of GDP)\", \"PPP conversion factor, GDP (LCU per international $)\", \"Barro-Lee: Percentage of female population age 15+ with no education\", \"Barro-Lee: Percentage of population age 15+ with no education\", \"Barro-Lee: Population in thousands, age 15+, total\", \"Barro-Lee: Population in thousands, age 15+, female\", \"Barro-Lee: Average years of total schooling, age 15+, total\", \"Barro-Lee: Average years of total schooling, age 15+, female\", \"Female pupils below minimum reading proficiency at end of primary (%). Low GAML threshold\", \"Male pupils below minimum reading proficiency at end of primary (%). Low GAML threshold\", \"Female primary school age children out-of-school (%)\", \"Male primary school age children out-of-school (%)\", \"Cumulative drop-out rate to the last grade of primary education, both sexes (%)\", \"Pupil-teacher ratio in lower secondary education (headcount basis)\", \"Pupil-teacher ratio in upper secondary education (headcount basis)\", \"People using at least basic drinking water services (% of population)\", \"People using safely managed drinking water services (% of population)\", \"Smoking prevalence, total (ages 15+)\", \"Smoking prevalence, females (% of adults)\", \"Smoking prevalence, males (% of adults)\"}, {\"Rural population growth (annual %)\", \"Rural population (% of total population)\", \"Prevalence of HIV, total (% of population ages 15-49)\", \"Income share held by lowest 20%\", \"Poverty headcount ratio at $1.90 a day (2011 PPP) (% of population)\", \"Vulnerable employment, total (% of total employment) (modeled ILO estimate)\", \"Net migration\", \"Foreign direct investment, net outflows (% of GDP)\", \"Current account balance (% of GDP)\", \"Net primary income (BoP, current US$)\", \"Foreign direct investment, net (BoP, current US$)\", \"Foreign direct investment, net inflows (% of GDP)\", \"Expense (% of GDP)\", \"Adjusted savings: education expenditure (% of GNI)\", \"Adjusted savings: gross savings (% of GNI)\", \"Adjusted net national income (current US$)\", \"Adjusted net national income per capita (current US$)\", \"Adjusted net national income per capita (annual % growth)\", \"GDP per capita (current US$)\", \"GDP per capita (current LCU)\", \"GDP per capita growth (annual %)\", \"GDP per capita, PPP (current international $)\", \"Gross domestic savings (% of GDP)\", \"Gross domestic income (constant LCU)\", \"GNI per capita (current LCU)\", \"GNI per capita growth (annual %)\", \"GNI per capita, PPP (current international $)\", \"Gross savings (% of GNI)\", \"Gross savings (% of GDP)\", \"PPP conversion factor, GDP (LCU per international $)\", \"Barro-Lee: Percentage of female population age 15+ with no education\", \"Barro-Lee: Percentage of population age 15+ with no education\", \"Barro-Lee: Population in thousands, age 15+, total\", \"Barro-Lee: Population in thousands, age 15+, female\", \"Barro-Lee: Average years of total schooling, age 15+, total\", \"Barro-Lee: Average years of total schooling, age 15+, female\", \"Female pupils below minimum reading proficiency at end of primary (%). Low GAML \", \"Male pupils below minimum reading proficiency at end of primary (%). Low GAML th\", \"Female primary school age children out-of-school (%)\", \"Male primary school age children out-of-school (%)\", \"Cumulative drop-out rate to the last grade of primary education, both sexes (%)\", \"Pupil-teacher ratio in lower secondary education (headcount basis)\", \"Pupil-teacher ratio in upper secondary education (headcount basis)\", \"People using at least basic drinking water services (% of population)\", \"People using safely managed drinking water services (% of population)\", \"Smoking prevalence, total (ages 15+)\", \"Smoking prevalence, females (% of adults)\", \"Smoking prevalence, males (% of adults)\"}),\n    #\"Merged Queries1\" = Table.NestedJoin(#\"Expanded merge_indicators_world\", {\"Year\", \"Country\", \"Sex\"}, #\"Alcohol Consumption\", {\"Year\", \"Country\", \"Sex\"}, \"Alcohol Consumption\", JoinKind.LeftOuter),\n    #\"Expanded Alcohol Consumption\" = Table.ExpandTableColumn(#\"Merged Queries1\", \"Alcohol Consumption\", {\" All types\", \" Beer\", \" Wine\", \" Spirits\", \" Other alcoholic beverages\"}, {\" All types\", \" Beer\", \" Wine\", \" Spirits\", \" Other alcoholic beverages\"}),\n    #\"Merged Queries2\" = Table.NestedJoin(#\"Expanded Alcohol Consumption\", {\"Country\", \"Year\", \"Sex\"}, happiness, {\"Country\", \"Year\", \"Sex\"}, \"happiness\", JoinKind.LeftOuter),\n    #\"Expanded happiness\" = Table.ExpandTableColumn(#\"Merged Queries2\", \"happiness\", {\"Happiness Rank\", \"Happiness Score\", \"Economy (GDP per Capita)\", \"Family\", \"Health (Life Expectancy)\", \"Freedom\", \"Trust (Government Corruption)\", \"Generosity\", \"Dystopia Residual\"}, {\"Happiness Rank\", \"Happiness Score\", \"Economy (GDP per Capita)\", \"Family\", \"Health (Life Expectancy)\", \"Freedom\", \"Trust (Government Corruption)\", \"Generosity\", \"Dystopia Residual\"}),\n    #\"Merged Queries3\" = Table.NestedJoin(#\"Expanded happiness\", {\"Year\", \"Country Code\", \"Sex\"}, #\"life expectancy all\", {\"Year\", \"Country Code\", \"Sex\"}, \"life expectancy all\", JoinKind.LeftOuter),\n    #\"Expanded life expectancy all\" = Table.ExpandTableColumn(#\"Merged Queries3\", \"life expectancy all\", {\"Value\"}, {\"Value\"}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Expanded life expectancy all\", \"Life expectancy\", each if [#\"Life expectancy at birth (years)\"] <> null then [#\"Life expectancy at birth (years)\"] else [Value]),\n    #\"Merged Queries4\" = Table.NestedJoin(#\"Added Conditional Column\", {\"Year\", \"Country Code\", \"Sex\"}, gdp, {\"Year\", \"Country Code\", \"Sex\"}, \"gdp\", JoinKind.LeftOuter),\n    #\"Expanded gdp\" = Table.ExpandTableColumn(#\"Merged Queries4\", \"gdp\", {\"GDP\"}, {\"GDP.1\"}),\n    #\"Renamed Columns2\" = Table.RenameColumns(#\"Expanded gdp\",{{\"GDP.1\", \"GDP per capita (current US $)\"}}),\n    #\"Appended Query\" = Table.Combine({#\"Renamed Columns2\", life_expectancy_years}),\n    #\"Renamed Columns3\" = Table.RenameColumns(#\"Appended Query\",{{\"Poverty headcount ratio at $1.90 a day (2011 PPP) (% of population)\", \"% of population living on less than $1.90 per day\"}, {\"Barro-Lee: Average years of total schooling, age 15+, female\", \"Average years of total schooling (female)\"}, {\"Barro-Lee: Percentage of female population age 15+ with no education\", \"Percentage of female population with no education\"}, {\"Female pupils below minimum reading proficiency at end of primary (%). Low GAML \", \"Female pupils below minimum reading proficiency at end of primary (%)\"}, {\"Adjusted net national income per capita (current US$)\", \"Net national income per capita\"}, {\"GDP per capita (current US $)\", \"GDP per capita (US $)\"}}),\n    #\"Removed Columns4\" = Table.RemoveColumns(#\"Renamed Columns3\",{\"Antenatal care coverage - at least one visit (in the two or three years preceding the survey) (%)\", \"Antenatal care coverage - at least four visits (in the two or three years preceding the survey) (%)\", \"Antenatal care coverage - at least four visits (in the five years preceding the survey) (%)\", \"Number of reported cases of cholera\", \"Number of reported deaths from cholera\", \"Number of under-five deaths (thousands)\", \"Number of infant deaths (thousands)\", \"Total density per million population: Computed tomography units\", \"Total density per million population: Radiotherapy units\", \"Estimated percentage of pregnant women living with HIV who received antiretrovirals for preventing mother-to-child transmission\", \"Infant mortality rate (probability of dying between birth and age 1 per 1000 live births)\", \"Adolescent birth rate (per 1000 women aged 15-19 years)\", \"Contraceptive prevalence (%)\", \"Contraceptive prevalence, among girls aged 15-19 (%)\", \"Smear-positive tuberculosis treatment-success rate (%)\", \"Antiretroviral therapy coverage among people with HIV infection eligible for ART according to 2010 guidelines (%)\", \"Mental hospitals (per 100 000 population)\", \"Mental health units in general hospitals (per 100 000 population)\", \"Total (recorded+unrecorded) alcohol per capita (15+) consumption\", \"Births attended by skilled health personnel (in the two or three years preceding the survey) (%)\", \"Births attended by skilled health personnel (in the five years preceding the survey) (%)\", \"Tuberculosis treatment coverage\", \"Tuberculosis - new and relapse cases\", \"Distribution of causes of death among children aged <5 years (%) - Pneumonia\", \"Distribution of causes of death among children aged <5 years (%) - Injuries\", \"Distribution of causes of death among children aged <5 years (%) - Diarrhoea\", \"Distribution of causes of death among children aged <5 years (%) - Measles\", \"Distribution of causes of death among children aged <5 years (%) - HIV/AIDS\", \"Distribution of causes of death among children aged <5 years (%) - Other diseases\", \"Distribution of causes of death among children aged <5 years (%) - Prematurity\", \"Distribution of causes of death among children aged <5 years (%) - Neonatal sepsis\", \"Distribution of causes of death among children aged <5 years (%) - Congenital anomalies\", \"Distribution of causes of death among children aged <5 years (%) - Birth asphyxia\", \"Cholera - number of reported cases\", \"Diphtheria - number of reported cases\", \"Pertussis - number of reported cases\", \"Number of new leprosy cases\", \"Total tetanus - number of reported cases\", \"Malaria - number of reported confirmed cases\", \"Poliomyelitis - number of reported cases\", \"Yellow fever - number of reported cases\", \"Mumps - number of reported cases\", \"Congenital Rubella Syndrome - number of reported cases\", \"Neonatal tetanus - number of reported cases\", \"Total rubella - number of reported cases\", \"Children aged < 5 years with pneumonia symptoms taken to a healthcare provider (%)\", \"Antenatal care coverage - at least one visit, among girls aged 15-19 (%)\", \"Neonates protected at birth against neonatal tetanus (PAB) (%)\", \"Number of dentistry personnel\", \"Social security expenditure on health as a percentage of general government expenditure on health\", \"Population median age (years)\", \"Population proportion under 15 (%)\", \"Population proportion over 60 (%)\", \"Population living in urban areas (%)\", \"Cellular subscribers (per 100 population)\", \"Antiretroviral therapy coverage among people with advanced HIV infection (%), WHO 2006 guidelines\", \"Number of suspected meningitis deaths reported\", \"Low-birth-weight newborns (%)\", \"Deaths due to HIV/AIDS (per 100 000 population)\", \"Meningitis - number of reported cases\", \"Unmet need for family planning, among girls aged 15-19 (%)\", \"Prevalence of smoking any tobacco product among persons aged >= 15 years\", \"Population (in thousands) total\", \"Births attended by skilled health personnel (%)\", \"Estimated number of malaria cases\", \"Antenatal care coverage - at least four visits (%)\", \"Children aged <5 years with diarrhoea receiving ORT (%)\", \"Plague - number of reported cases\", \"H5N1 influenza - number of reported cases\", \"Children aged 6-59 months who received vitamin A supplementation (%)\", \"Number of meningitis epidemic districts\", \"Number of environment and public health workers\", \"Density of environment and public health workers (per 10 000 population)\", \"Rural population growth (annual %)\", \"Rural population (% of total population)\", \"Prevalence of HIV, total (% of population ages 15-49)\", \"Vulnerable employment, total (% of total employment) (modeled ILO estimate)\", \"Net migration\", \"Foreign direct investment, net outflows (% of GDP)\", \"Current account balance (% of GDP)\", \"Net primary income (BoP, current US$)\", \"Foreign direct investment, net (BoP, current US$)\", \"Foreign direct investment, net inflows (% of GDP)\", \"Expense (% of GDP)\", \"Adjusted savings: education expenditure (% of GNI)\", \"Adjusted savings: gross savings (% of GNI)\", \"GDP per capita (current LCU)\", \"GDP per capita growth (annual %)\", \"GDP per capita, PPP (current international $)\", \"Gross domestic income (constant LCU)\", \"GNI per capita (current LCU)\", \"GNI per capita growth (annual %)\", \"GNI per capita, PPP (current international $)\", \"Gross savings (% of GNI)\", \"Gross savings (% of GDP)\", \"PPP conversion factor, GDP (LCU per international $)\", \"Barro-Lee: Population in thousands, age 15+, female\", \"Barro-Lee: Population in thousands, age 15+, total\", \"Barro-Lee: Average years of total schooling, age 15+, total\", \"Smoking prevalence, total (ages 15+)\", \"Smoking prevalence, females (% of adults)\", \"Smoking prevalence, males (% of adults)\", \" All types\", \" Beer\", \" Wine\", \" Spirits\", \" Other alcoholic beverages\", \"Happiness Rank\", \"Happiness Score\", \"Economy (GDP per Capita)\", \"Family\", \"Health (Life Expectancy)\", \"Freedom\", \"Trust (Government Corruption)\", \"Generosity\", \"Dystopia Residual\", \"Value\"}),\n    #\"Renamed Columns4\" = Table.RenameColumns(#\"Removed Columns4\",{{\"Life expectancy\", \"Life expectancy (yrs)\"}}),\n    #\"Removed Columns5\" = Table.RemoveColumns(#\"Renamed Columns4\",{\"Male pupils below minimum reading proficiency at end of primary (%). Low GAML th\", \"Female primary school age children out-of-school (%)\", \"Male primary school age children out-of-school (%)\", \"Cumulative drop-out rate to the last grade of primary education, both sexes (%)\", \"Pupil-teacher ratio in lower secondary education (headcount basis)\", \"Pupil-teacher ratio in upper secondary education (headcount basis)\", \"Barro-Lee: Percentage of population age 15+ with no education\", \"Average years of total schooling (female)\", \"Gross domestic savings (% of GDP)\", \"Adjusted net national income per capita (annual % growth)\", \"Adjusted net national income (current US$)\", \"Number of suspected meningitis cases reported\", \"Per capita total expenditure on health at average exchange rate (US$)\", \"External resources for health as a percentage of total expenditure on health\", \"Out-of-pocket expenditure as a percentage of private expenditure on health\", \"Total expenditure on health as a percentage of gross domestic product\", \"Private expenditure on health as a percentage of total expenditure on health\", \"Private prepaid plans as a percentage of private expenditure on health\", \"Per capita government expenditure on health at average exchange rate (US$)\", \"Per capita total expenditure on health (PPP int. $)\", \"Per capita government expenditure on health (PPP int. $)\"})\nin\n    #\"Removed Columns5\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\Justyna\\OneDrive - Microsoft\\Gartner\\BI Bake Off\\London\\Year.xlsx\"), null, true),\n    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Year\", Int64.Type}}),\n    #\"Inserted Date\" = Table.AddColumn(#\"Changed Type\", \"Date\", each Date.From(Text.From([Year], \"en-US\")), type date)\nin\n    #\"Inserted Date\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\Justyna\\OneDrive - Microsoft\\Gartner\\BI Bake Off\\London\\Country.xlsx\"), null, true),\n    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sheet1_Sheet,{{\"Column1\", type text}, {\"Column2\", type text}}),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Changed Type\", [PromoteAllScalars=true]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Country\", type text}, {\"Country Code\", type text}})\nin\n    #\"Changed Type1\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\Justyna\\OneDrive - Microsoft\\Gartner\\BI Bake Off\\London\\Sex.xlsx\"), null, true),\n    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Sheet1_Sheet,{{\"Column1\", type text}}),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Changed Type\", [PromoteAllScalars=true]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Gender\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type1\",{{\"Gender\", \"Sex\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = \"\"\"\"\"\",\n    #\"Converted to Table\" = #table(1, {{Source}})\nin\n    #\"Converted to Table\"", "Calendar(Date(Year(MIN('Year'[Date])), 1, 1), Date(Year(MAX('Year'[Date])), 12, 31))", "let\n    Source = Csv.Document(File.Contents(\"C:\\Users\\Justyna\\OneDrive - Microsoft\\Gartner\\BI Bake Off\\London\\Decomp Tree Metrics.csv\"),[Delimiter=\",\", Columns=19, Encoding=65001, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Maternal Mortality Change\", Int64.Type}, {\"Maternal Mortality\", type text}, {\"Malaria Cases Change\", Int64.Type}, {\"Malaria Cases\", type text}, {\"Neonatal Mortality\", Int64.Type}, {\"Neonatal Mortality_1\", type text}, {\"GDP Change\", type number}, {\"GDP per capita Change\", type text}, {\"Pupil Teacher Ratio\", type text}, {\"Pupil Teacher Ratio Change\", Int64.Type}, {\"Tuberculosis Incidents\", Int64.Type}, {\"Tuberculosis Incidents_2\", type text}, {\"Country\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Neonatal Mortality\", \"Neonatal Mortality Change\"}, {\"Neonatal Mortality_1\", \"Neonatal Mortality\"}, {\"GDP per capita Change\", \"GDP per capita\"}, {\"Tuberculosis Incidents\", \"Tuberculosis Incidents Change\"}, {\"Tuberculosis Incidents_2\", \"Tuberculosis Incidents\"}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Renamed Columns\",\"\",null,Replacer.ReplaceValue,{\"Maternal Mortality\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\",null,Replacer.ReplaceValue,{\"Malaria Cases\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\",null,Replacer.ReplaceValue,{\"Pupil Teacher Ratio\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"\",null,Replacer.ReplaceValue,{\"Tuberculosis Incidents\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"\",null,Replacer.ReplaceValue,{\"GDP per capita\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Replaced Value4\",{{\"Hib3 Immunizations\", \"Hib3 Immunizations %\"}, {\"Hib3 Immunizations_3\", \"Hib3 Immunizations\"}, {\"Water Services Access\", \"Water Services\"}, {\"Water Services Access_4\", \"Water Services Access\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = Csv.Document(File.Contents(\"C:\\Users\\Justyna\\OneDrive - Microsoft\\Gartner\\BI Bake Off\\London\\Country_Flags.csv\"),[Delimiter=\",\", Columns=5, Encoding=65001, QuoteStyle=QuoteStyle.None]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}, {\"Column2\", type text}, {\"Column3\", type text}}),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Changed Type\", [PromoteAllScalars=true]),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Promoted Headers\",{\"\"})\nin\n    #\"Removed Columns\"", "GENERATESERIES(1800, 2017, 1)", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8slMS1VwrShITS5JzEuuVNCITE0sKtZU0lEyNgASJqZAwgzEMgcRFgZKsbEA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Metric = _t, Bubble01 = _t, Bubble02 = _t, Bubble03 = _t, Bubble04 = _t, Bubble05 = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Metric\", type text}, {\"Bubble01\", Int64.Type}, {\"Bubble02\", Int64.Type}, {\"Bubble03\", Int64.Type}, {\"Bubble04\", Int64.Type}, {\"Bubble05\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\Justyna\\OneDrive - Microsoft\\Gartner\\BI Bake Off\\London\\Population.xlsx\"), null, true),\n    #\"population (1)_Sheet\" = Source{[Item=\"population (1)\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"population (1)_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Entity\", type text}, {\"Code\", type text}, {\"Year\", Int64.Type}, {\"Population\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"PctLDoAwCATQu7AuCVo+epbalfEI3l8okQUkzBvGgOsl6ncnaLDH2nwqm21AJ2T2MCulLEtZUE4P/fRKqeavEmqoxi+XWqoRWqiFSumRuo7nCFtL/0Jkc34=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Bucket = _t, Category = _t, #\"Bucket Sort\" = _t, Bucket_2 = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Bucket\", type text}, {\"Category\", Int64.Type}, {\"Bucket Sort\", Int64.Type}, {\"Bucket_2\", type text}})\nin\n    #\"Changed Type\"", "GENERATESERIES(1800, 2017, 1)", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_customerjourney\"),\n    #\"Changed Type\" = Table.TransformColumnTypes(source,{{\"createdon\", type date}, {\"msdyncrm_startdatetime\", type date}, {\"msdyncrm_enddatetime\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_name\", \"Journey Name\"}, {\"msdyncrm_type_display\", \"Journey Type\"}, {\"msdyncrm_enddatetime\", \"Jorney End\"}, {\"msdyncrm_description\", \"Description\"}, {\"msdyncrm_entitytarget_display\", \"Target audience\"}, {\"msdyncrm_startdatetime\", \"Journey Start\"}, {\"msdyncrm_customerjourneyid\", \"CustomerJourneyId\"}, {\"statuscode_display\", \"Journey Status\"}}),\n    #\"Added Link\" = Table.AddColumn(#\"Renamed Columns\", \"Link\", each GetEntityFormUrl(\"customerjourney\", [CustomerJourneyId])),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Added Link\",{{\"msdyncr2_linkedincampaign\", \"msdyncrm_linkedincampaign\"}})\nin\n    #\"Renamed Columns1\"", "Calendar(Date(Year(MIN('CustomerJourneys'[modifiedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[overriddencreatedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[overriddencreatedon])), 12, 31))", "let\n    Source = fnDateTable(Date.FromText(\"1/8/2018\")),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Week Ending\", type date}}),\n    #\"Added Month-Year\" = Table.AddColumn(#\"Changed Type\", \"Month-Year\", each Text.Start([MonthName],3)&\"-\"&Text.From([Year])),\n    #\"Added Year-Month\" = Table.AddColumn(#\"Added Month-Year\", \"Year-Month\", each Text.From([Year])&\"-\"&Text.Start([MonthName],3)),\n    #\"Added MonthYearSortBy\" = Table.AddColumn(#\"Added Year-Month\", \"MonthYearSortBy\", each [Year]*100+[MonthNumberOfYear]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added MonthYearSortBy\",{{\"Week Ending\", type date}, {\"MonthYearSortBy\", Int64.Type}, {\"IsToday\", type logical}, {\"DayOfMonth\", Int64.Type}}),\n    CoreTable = Table.RenameColumns(#\"Changed Type1\",{{\"Date\", \"Datestamp\"}}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "Calendar(Date(Year(MIN('&DateTable'[Week Ending])), 1, 1), Date(Year(MAX('&DateTable'[Week Ending])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[createdon])), 1, 1), Date(Year(MAX('CustomerJourneys'[createdon])), 12, 31))", "// A table containg a row for each of all the interaction data files in the storage container\nlet\n    Source = GetStorageContainerContent(),\n    #\"Removed Content\" = Table.RemoveColumns(Source,{\"Content\",\"Name\",\"Date modified\"})\n    //Result = Table.Buffer(#\"Removed Content\")\nin\n    #\"Removed Content\"", "let\n    Source = GetInteractionTableData(\"EmailOpened\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"AccountId\", \"MessageId\", \"CustomerJourneyId\", \"ActivityId\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = GetInteractionTableData(\"EmailSubscriptionSubmit\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"Id\", \"ContactId\", \"AccountId\", \"MessageId\", \"CustomerJourneyId\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = #\"%InteractionModel\",\n    CoreTable = Table.RemoveColumns(Source,{\"attributes\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "\"https://mktdemospring.crm.dynamics.com\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "\"mktdemospring\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "Calendar(Date(Year(MIN('EmailSubscriptionSubmit'[Datestamp])), 1, 1), Date(Year(MAX('EmailSubscriptionSubmit'[Datestamp])), 12, 31))", "\"cabeln2\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "let\n    Source = #\"#CDSTContentSource\",\n    \n    CustomProfiles = Source{[Group=\"custom\"]}[Data],\n    #\"Sorted Rows\" = Table.Sort(CustomProfiles,{{\"EntitySetName\", Order.Ascending}}),\n    CoreTable = Table.SelectColumns(#\"Sorted Rows\",{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = #\"#CDSTContentSource\",\n    \n    CustomProfiles = Source{[Group=\"cdm\"]}[Data],\n    CoreTable = Table.SelectColumns(CustomProfiles,{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = AzureStorage.Blobs(#\"@AzureStorageAccountName\")\nin\n    Source", "Calendar(Date(Year(MIN('&DateTable'[Datestamp])), 1, 1), Date(Year(MAX('&DateTable'[Datestamp])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[Jorney End])), 1, 1), Date(Year(MAX('CustomerJourneys'[Jorney End])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[Journey Start])), 1, 1), Date(Year(MAX('CustomerJourneys'[Journey Start])), 12, 31))", "null meta [IsParameterQuery=true, List={7, 14, 31, 180, 365}, DefaultValue=7, Type=\"Number\", IsParameterQueryRequired=false]", "Calendar(Date(Year(MIN('#StorageContainerContentIndex'[Datestamp])), 1, 1), Date(Year(MAX('#StorageContainerContentIndex'[Datestamp])), 12, 31))", "// A table with the Interactionfiles in the globally defines data range (Parameter) where the intearctions are filtered by \n// the interactions specified in the \"!LoadedInteractions' table \nlet\n    Source = FilterStorageContainerContent(null),\n    #\"Remove Columns\" = Table.RemoveColumns(Source,{\"Name\", \"Date modified\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Remove Columns\",{\"Interaction Name\"},#\"!LoadedInteractions\",{\"Interaction Name\"},\"!LoadedInteractions\",JoinKind.Inner),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Merged Queries\",{\"!LoadedInteractions\"}),\n    Result = Table.Buffer(#\"Removed Columns\")\nin\n    Result", "Calendar(Date(Year(MIN('#FilteredStorageContainerContent'[Datestamp])), 1, 1), Date(Year(MAX('#FilteredStorageContainerContent'[Datestamp])), 12, 31))", "let\n    Source = #\"!KnownInteractions\",\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Load Data] = true))\nin\n    #\"Filtered Rows\"", "let\n    Source = #\"%InteractionModel\",\n    #\"Expanded attributes\" = Table.ExpandListColumn(Source, \"attributes\"),\n    CoreTable = Table.ExpandRecordColumn(#\"Expanded attributes\", \"attributes\", {\"name\", \"dataType\"}, {\"Attribute Name\", \"Attribute Type\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Entity = GetCDST_EntityTableWithLink(\"Contact\", \"contactid\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Entity,{\"contactid\", \"emailaddress1\", \"fullname\", \"msgdpr_gdprconsent_display\"}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Other Columns\", each [fullname] <> null and [fullname] <> \"\")\nin\n    #\"Filtered Rows\"", "let\n    Source = GetInteractionTableData(\"EmailClicked\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"AccountId\", \"LinkFriendlyName\", \"MessageId\", \"CustomerJourneyId\", \"ActivityId\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = GetInteractionTableData(\"ActivityContactDispatched\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ActivityId\", \"CustomerJourneyId\", \"ContactId\", \"Id\", \"Datestamp\"}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Removed Other Columns\",{\"Id\", \"ActivityId\", \"CustomerJourneyId\", \"ContactId\", \"Datestamp\"})\nin\n    #\"Reordered Columns\"", "let\n    Source = GetInteractionTableData(\"EmailDelivered\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"AccountId\", \"MessageId\", \"CustomerJourneyId\", \"ActivityId\", \"EmailAddressUsed\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"lVXBcuIwDP0Xzv2JksIsO3ToJLA9dHpwHJF4cGyvLNPl71cO0C6JQ7NH8p7kJ+lJvL3NHiWpo6JTZg0JSXNt5QGq2cNsL7SH2fvDGIV/eTA0gbn4Q4BG6OkRRXAOwXtlzT32k/JOkGw6vYQhSXpBK2MqUy+F0r3SmLNX2Aril3L4HcDTHdy7WEGf0CkBDdTPjSAIMmzTgtLs4Mm2WSOMAf0fcWsQ1TT6vw+kK+oYgD9tQAPXbDlIi9XOVWJQ5i1/xbPu2lWQwD530fIIuhnPbTByFL0DzE87DzgKPwWnlWSRj1UVHTRKXBkR+wWX+kZ5z6rzznXOgsR31Bx0bFKamrG6w61fz99jfmX8XAt50MpzgrUyh4R+thrLxkSOJUBVcvjaWjeMW1r8EFgl4n7w59F5RDCH1hKMUjYOTCJtAaZKb90VTnS9sHsafSiC32gpQuklKtc5MJStohtdhnhBUsu6OLKcrAF5WJkhkEPNIzn7+j6aCdbVr5db357F0G2fIvBLedVXszJHoRX3XSqn+IWUmT85Tp+29g4jzgEwRYhXo+C95nba3uGL5otL8il9eIw3gTb7s3nZjYpuc78I77cN2lA3kw5TzikQJMWHv5bkCy/imQ+aC5mSrYC65b49Q1sC+ozdQvHm1Wlat7Fcnm+UW1SDaVxYF2uVaXRn/AjOB4nnPlF3wCOcknd5i6quJ6a5cPm/59XiYa/tx6SwVyijF1Ptv0ADs77/BQ==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"Interaction Name\" = _t, #\"Load Data\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Interaction Name\", type text}, {\"Load Data\", type logical}})\nin\n    #\"Changed Type\"", "let\n    Source = GetInteractionTableData(\"EmailSent\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"AccountId\", \"MessageId\", \"CustomerJourneyId\", \"ActivityId\", \"EmailAddressUsed\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = GetInteractionTableData(\"EmailForwarded\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"MessageId\", \"CustomerJourneyId\", \"ContactId\", \"AccountId\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = GetInteractionTableData(\"FormSubmitted\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"MessageId\", \"PageId\", \"FormId\", \"FormName\", \"FormSubmissionId\", \"CustomerJourneyId\", \"ContactId\", \"AccountId\", \"ContactMatchingResult\", \"LeadMatchingResult\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8slMKkosqlTSUTLUMzUw0DO0NDQwMFKK1YlWckosTnVJLEkMzi8tSk4thigxhCoxBytxzEvMqaxKLcLQHgsA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Product = _t, Version = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Product\", type text}, {\"Version\", type text}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"Rendered\", each [Product] & \": \" & [Version])\nin\n    #\"Added Custom\"", "let\n    Source = CustomerJourneys,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"CustomerJourneyId\"})\nin\n    #\"Removed Other Columns\"", "\"1a030b50-8826-e911-a978-000d3a346695\" meta [IsParameterQuery=true, List={\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", \"fe8e15b8-92b5-e811-a982-000d3a1ada5f\", \"1a030b50-8826-e911-a978-000d3a346695\"}, DefaultValue=\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", Type=\"Text\", IsParameterQueryRequired=true]", "let\n    Source = #\"#CDSTEntitySource\",\n    Entities = Source{[Group=\"entities\"]}[Data],\n    #\"Sorted Rows\" = Table.Sort(Entities,{{\"EntitySetName\", Order.Ascending}}),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Sorted Rows\",{\"EntitySetName\", \"SchemaName\"})\nin\n    #\"Removed Other Columns\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_customerjourney\"),\n    #\"Changed Type\" = Table.TransformColumnTypes(source,{{\"createdon\", type date}, {\"msdyncrm_startdatetime\", type date}, {\"msdyncrm_enddatetime\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_name\", \"Journey Name\"}, {\"msdyncrm_type_display\", \"Journey Type\"}, {\"msdyncrm_enddatetime\", \"Jorney End\"}, {\"msdyncrm_description\", \"Description\"}, {\"msdyncrm_entitytarget_display\", \"Target audience\"}, {\"msdyncrm_startdatetime\", \"Journey Start\"}, {\"msdyncrm_customerjourneyid\", \"CustomerJourneyId\"}, {\"statuscode_display\", \"Journey Status\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('CustomerJourneys'[modifiedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[overriddencreatedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[overriddencreatedon])), 12, 31))", "let\n    source = MarketingEmailsCore,\n    #\"Removed Other Columns\" = Table.SelectColumns(source,{\"Description\", \"Content Type\", \"From Email\", \"From Name\", \"From User Id\", \"MessageId\", \"Designation\", \"Message Name\", \"Reply To Email\", \"Subject\", \"TemplateId\", \"To Email\", \"statecode\", \"State\", \"statuscode\", \"Status\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = fnDateTable(Date.FromText(\"1/8/2018\")),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Week Ending\", type date}}),\n    #\"Added Month-Year\" = Table.AddColumn(#\"Changed Type\", \"Month-Year\", each Text.Start([MonthName],3)&\"-\"&Text.From([Year])),\n    #\"Added MonthYearSortBy\" = Table.AddColumn(#\"Added Month-Year\", \"MonthYearSortBy\", each [Year]*100+[MonthNumberOfYear]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added MonthYearSortBy\",{{\"Week Ending\", type date}, {\"MonthYearSortBy\", Int64.Type}, {\"IsToday\", type logical}, {\"DayOfMonth\", Int64.Type}}),\n    CoreTable = Table.RenameColumns(#\"Changed Type1\",{{\"Date\", \"Datestamp\"}}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "Calendar(Date(Year(MIN('&DateTable'[Week Ending])), 1, 1), Date(Year(MAX('&DateTable'[Week Ending])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[createdon])), 1, 1), Date(Year(MAX('CustomerJourneys'[createdon])), 12, 31))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_customerjourney_msdyncrm_marketingemail\"),\n    #\"Removed Columns\" = Table.RemoveColumns(source,{\"versionnumber\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"msdyncrm_customerjourneyid\", \"CustomerJourneyId\"}, {\"msdyncrm_marketingemailid\", \"MessageId\"}, {\"msdyncrm_customerjourney_msdyncrm_marketingemailid\", \"Id\"}}),\n    #\"Merged Journeys\" = Table.NestedJoin(#\"Renamed Columns\",{\"CustomerJourneyId\"},CustomerJourneys,{\"CustomerJourneyId\"},\"CustomerJourneys\",JoinKind.LeftOuter),\n    #\"Merged MarketingEmails\" = Table.NestedJoin(#\"Merged Journeys\",{\"MessageId\"},MarketingEmails,{\"MessageId\"},\"MarketingEmails\",JoinKind.LeftOuter),\n    #\"Expanded CustomerJourneys\" = Table.ExpandTableColumn(#\"Merged MarketingEmails\", \"CustomerJourneys\", {\"Jorney End\", \"Journey Name\", \"Journey Start\", \"Journey Status\"}, {\"Jorney End\", \"Journey Name\", \"Journey Start\", \"Journey Status\"}),\n    #\"Expanded MarketingEmails\" = Table.ExpandTableColumn(#\"Expanded CustomerJourneys\", \"MarketingEmails\", {\"Message Name\"}, {\"Message Name\"})\nin\n    #\"Expanded MarketingEmails\"", "let\n    source = GetCDST_EntityTable(\"msdyncrm_marketingemailtemplate\"),\n    #\"Removed Columns\" = Table.RemoveColumns(source,{\"msdyncrm_designerhtml\", \"msdyncrm_emailbody\", \"msdyncrm_email_template_purpose_optionset\", \"msdyncrm_email_template_optimizedfor_optionset\", \"msdyncrm_email_template_market_type_optionset\", \"msdyncrm_email_contenttype\"}),\n    #\"Added Custom\" = Table.AddColumn(#\"Removed Columns\", \"Template Image\", each GetCleanedCRMOrgUrl()&[entityimage_url]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Added Custom\",{{\"createdon\", type date}, {\"entityimage_timestamp\", Int64.Type}, {\"modifiedon\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_email_contenttype_display\", \"Content Type\"}, {\"msdyncrm_name\", \"Template Name\"}, {\"msdyncrm_messagedesignation_display\", \"Designation\"}, {\"msdyncrm_email_template_visual_style_optionset_display\", \"Visual Style\"}, {\"msdyncrm_email_template_purpose_optionset_display\", \"Purpose\"}, {\"msdyncrm_email_template_optimizedfor_optionset_display\", \"Optimized For\"}, {\"msdyncrm_marketingemailtemplateid\", \"TemplateId\"}, {\"msdyncrm_language_display\", \"Language\"}}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Template Image\", type text}}),\n    #\"Removed Columns1\" = Table.RemoveColumns(#\"Changed Type1\",{\"entityimage_url\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns1\",{{\"Template Image\", \"Template Image Url\"}})\nin\n    #\"Renamed Columns1\"", "Calendar(Date(Year(MIN('MarketingEmailTemplates'[createdon])), 1, 1), Date(Year(MAX('MarketingEmailTemplates'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmailTemplates'[modifiedon])), 1, 1), Date(Year(MAX('MarketingEmailTemplates'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmailTemplates'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingEmailTemplates'[overriddencreatedon])), 12, 31))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingemailtestsend\"),\n    #\"Removed Columns\" = Table.RemoveColumns(source,{\"msdyncrm_textpart\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns\",{{\"createdon\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_marketingemailtestsendid\", \"TestSendId\"}, {\"msdyncrm_emailid\", \"MessageId\"}, {\"msdyncrm_marketinglistid\", \"MarketingListId\"}, {\"msdyncrm_testcontactid\", \"TestContactId\"}, {\"msdyncrm_testsendemailaddress\", \"TestSendEmailAddress\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('MarketingEmailTestSends'[modifiedon])), 1, 1), Date(Year(MAX('MarketingEmailTestSends'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmailTestSends'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingEmailTestSends'[overriddencreatedon])), 12, 31))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingpage\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(source,{\"msdyncrm_alloweddomains\", \"msdyncrm_contenttype_display\", \"msdyncrm_full_page_url\", \"msdyncrm_lastpublisheddate\", \"msdyncrm_lastunpublisheddate\", \"msdyncrm_marketingpageid\", \"msdyncrm_marketingpagetemplate\", \"msdyncrm_marketingprovided\", \"msdyncrm_marketingwebsite\", \"msdyncrm_markettype_display\", \"msdyncrm_name\", \"msdyncrm_optimizedfor_display\", \"msdyncrm_partialurl\", \"msdyncrm_purpose_display\", \"msdyncrm_remote_websiteid\", \"msdyncrm_type_display\", \"msdyncrm_visualstyle_display\", \"statecode_display\", \"statuscode_display\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"msdyncrm_name\", \"Page Name\"}, {\"msdyncrm_marketingpageid\", \"MarketingPageId\"}, {\"statuscode_display\", \"Status\"}, {\"msdyncrm_visualstyle_display\", \"Visual Style\"}, {\"msdyncrm_type_display\", \"Page Type\"}, {\"msdyncrm_remote_websiteid\", \"WebsiteId\"}, {\"msdyncrm_purpose_display\", \"Purpose\"}, {\"msdyncrm_partialurl\", \"Partial Url\"}, {\"msdyncrm_optimizedfor_display\", \"Optimized for\"}, {\"msdyncrm_markettype_display\", \"Market type\"}, {\"msdyncrm_full_page_url\", \"Page Url\"}, {\"msdyncrm_marketingpagetemplate\", \"MarketingPageTemplateId\"}, {\"msdyncrm_contenttype_display\", \"Content Type\"}, {\"msdyncrm_alloweddomains\", \"Allowed Domains\"}})\nin\n    #\"Renamed Columns\"", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingpage_marketingemail\"),\n    #\"Removed Columns\" = Table.RemoveColumns(source,{\"versionnumber\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"msdyncrm_marketingemailid\", \"MessageId\"}, {\"msdyncrm_marketingpage_marketingemailid\", \"Id\"}, {\"msdyncrm_marketingpageid\", \"MarketingPageId\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('MarketingPages'[msdyncrm_lastpublisheddate])), 1, 1), Date(Year(MAX('MarketingPages'[msdyncrm_lastpublisheddate])), 12, 31))", "Calendar(Date(Year(MIN('MarketingPages'[msdyncrm_lastunpublisheddate])), 1, 1), Date(Year(MAX('MarketingPages'[msdyncrm_lastunpublisheddate])), 12, 31))", "let\n    Source = GetStorageContainerContent(),\n    #\"Removed Content\" = Table.RemoveColumns(Source,{\"Content\",\"Name\",\"Date modified\"})\n    //Result = Table.Buffer(#\"Removed Content\")\nin\n    #\"Removed Content\"", "let\n    Source = GetInteractionTableData(\"EmailHardBounced\")\nin\n    Source", "let\n    Source = GetInteractionTableData(\"EmailSoftBounced\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailSoftBounced'[Timestamp])), 1, 1), Date(Year(MAX('EmailSoftBounced'[Timestamp])), 12, 31))", "let\n    Leads = GetCDST_CDMProfileTable(\"Lead\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Leads,{\"accountid\", \"address1_city\", \"address1_country\", \"address1_line1\", \"address1_name\", \"address1_postalcode\", \"emailaddress1\", \"fullname\", \"msdyncrm_contactid\", \"msdyncrm_customerjourneyid\", \"msdyncrm_emailid\", \"msdyncrm_latestsubmissiondate\", \"msdyncrm_leadid\", \"msdyncrm_leadsourcetype\", \"msdyncrm_leadsourcetype_display\", \"msdyncrm_linkedincampaign\", \"msdyncrm_linkedinsubmissioncount\", \"msdyncrm_marketingformid\", \"msdyncrm_marketingpageid\", \"msdyncrm_salesaccepted\", \"msdyncrm_salesready\", \"statecode\", \"statuscode\", \"subject\", \"telephone1\", \"websiteurl\"})\nin\n    #\"Removed Other Columns\"", "Calendar(Date(Year(MIN('Leads'[msdyncrm_latestsubmissiondate])), 1, 1), Date(Year(MAX('Leads'[msdyncrm_latestsubmissiondate])), 12, 31))", "let\n    Source = GetInteractionTableData(\"EmailBlockBounced\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailBlockBounced'[Timestamp])), 1, 1), Date(Year(MAX('EmailBlockBounced'[Timestamp])), 12, 31))", "let\n    Source = GetInteractionTableData(\"EmailBlocked\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailBlocked'[Timestamp])), 1, 1), Date(Year(MAX('EmailBlocked'[Timestamp])), 12, 31))", "let\n    Source = GetInteractionTableData(\"EmailClicked\")\nin\n    Source", "let\n    Source = GetInteractionTableData(\"EmailContainsBlacklistedLinks\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailContainsBlacklistedLinks'[Timestamp])), 1, 1), Date(Year(MAX('EmailContainsBlacklistedLinks'[Timestamp])), 12, 31))", "let\n    Source = GetInteractionTableData(\"EmailFeedbackLoop\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailFeedbackLoop'[Timestamp])), 1, 1), Date(Year(MAX('EmailFeedbackLoop'[Timestamp])), 12, 31))", "let\n    Source = GetInteractionTableData(\"EmailForwarded\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailForwarded'[Timestamp])), 1, 1), Date(Year(MAX('EmailForwarded'[Timestamp])), 12, 31))", "let\n    Source = GetInteractionTableData(\"EmailOpened\")\nin\n    Source", "let\n    Source = GetInteractionTableData(\"EmailSendingFailed\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailSendingFailed'[Timestamp])), 1, 1), Date(Year(MAX('EmailSendingFailed'[Timestamp])), 12, 31))", "let\n    Source = GetInteractionTableData(\"EmailSubscriptionSubmit\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailSubscriptionSubmit'[Timestamp])), 1, 1), Date(Year(MAX('EmailSubscriptionSubmit'[Timestamp])), 12, 31))", "let\n    Source = GetInteractionTableData(\"InvalidRecipientAddress\")\nin\n    Source", "Calendar(Date(Year(MIN('InvalidRecipientAddress'[Timestamp])), 1, 1), Date(Year(MAX('InvalidRecipientAddress'[Timestamp])), 12, 31))", "let\n    Source = #\"%InteractionModel\",\n    CoreTable = Table.RemoveColumns(Source,{\"attributes\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "\"https://mktdemospring.crm.dynamics.com\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "\"mktdemospring\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "Calendar(Date(Year(MIN('EmailContainsBlacklistedLinks'[Datestamp])), 1, 1), Date(Year(MAX('EmailContainsBlacklistedLinks'[Datestamp])), 12, 31))", "Calendar(Date(Year(MIN('EmailSendingFailed'[Datestamp])), 1, 1), Date(Year(MAX('EmailSendingFailed'[Datestamp])), 12, 31))", "Calendar(Date(Year(MIN('EmailSubscriptionSubmit'[Datestamp])), 1, 1), Date(Year(MAX('EmailSubscriptionSubmit'[Datestamp])), 12, 31))", "Calendar(Date(Year(MIN('EmailClicked'[Timestamp])), 1, 1), Date(Year(MAX('EmailClicked'[Timestamp])), 12, 31))", "Calendar(Date(Year(MIN('EmailOpened'[Timestamp])), 1, 1), Date(Year(MAX('EmailOpened'[Timestamp])), 12, 31))", "Calendar(Date(Year(MIN('EmailHardBounced'[Timestamp])), 1, 1), Date(Year(MAX('EmailHardBounced'[Timestamp])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmailTestSends'[createdon])), 1, 1), Date(Year(MAX('MarketingEmailTestSends'[createdon])), 12, 31))", "\"cabeln2\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "let\n    Source = #\"#CDSTContentSource\",\n    \n    CustomProfiles = Source{[Group=\"custom\"]}[Data],\n    #\"Sorted Rows\" = Table.Sort(CustomProfiles,{{\"EntitySetName\", Order.Ascending}}),\n    CoreTable = Table.SelectColumns(#\"Sorted Rows\",{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = #\"#CDSTContentSource\",\n    \n    CustomProfiles = Source{[Group=\"cdm\"]}[Data],\n    CoreTable = Table.SelectColumns(CustomProfiles,{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = GetInteractionTableData(\"EmailSent\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailSent'[Timestamp])), 1, 1), Date(Year(MAX('EmailSent'[Timestamp])), 12, 31))", "let\n    Source = AzureStorage.Blobs(#\"@AzureStorageAccountName\")\nin\n    Source", "Calendar(Date(Year(MIN('&DateTable'[Datestamp])), 1, 1), Date(Year(MAX('&DateTable'[Datestamp])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[Jorney End])), 1, 1), Date(Year(MAX('CustomerJourneys'[Jorney End])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[Journey Start])), 1, 1), Date(Year(MAX('CustomerJourneys'[Journey Start])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneysEmails'[Jorney End])), 1, 1), Date(Year(MAX('CustomerJourneysEmails'[Jorney End])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneysEmails'[Journey Start])), 1, 1), Date(Year(MAX('CustomerJourneysEmails'[Journey Start])), 12, 31))", "null meta [IsParameterQuery=true, List={7, 14, 31, 180, 365}, DefaultValue=7, Type=\"Number\", IsParameterQueryRequired=false]", "let\n    Source = FilterStorageContainerContent(null),\n    #\"Remove Columns\" = Table.RemoveColumns(Source,{\"Name\", \"Date modified\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Remove Columns\",{\"Interaction Name\"},#\"!LoadedInteractions\",{\"Interaction Name\"},\"!LoadedInteractions\",JoinKind.Inner),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Merged Queries\",{\"!LoadedInteractions\"}),\n    Result = Table.Buffer(#\"Removed Columns\")\nin\n    Result", "Calendar(Date(Year(MIN('#FilteredStorageContainerContent'[Datestamp])), 1, 1), Date(Year(MAX('#FilteredStorageContainerContent'[Datestamp])), 12, 31))", "let\n    Source = #\"!KnownInteractions\",\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Load Data] = true))\nin\n    #\"Filtered Rows\"", "let\n    Source = GetInteractionTableData(\"InvalidSenderAddress\")\nin\n    Source", "Calendar(Date(Year(MIN('InvalidSenderAddress'[Timestamp])), 1, 1), Date(Year(MAX('InvalidSenderAddress'[Timestamp])), 12, 31))", "let\n    Source = #\"%InteractionModel\",\n    #\"Expanded attributes\" = Table.ExpandListColumn(Source, \"attributes\"),\n    CoreTable = Table.ExpandRecordColumn(#\"Expanded attributes\", \"attributes\", {\"name\", \"dataType\"}, {\"Attribute Name\", \"Attribute Type\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8slMKkosqlTSUTLUMzUw0DO0NDQwMFKK1YlWckosTnVJLEkMzi8tSk4thigxhCoxBytxzEvMqaxKLULWbmhgphQbCwA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Product = _t, Version = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Product\", type text}, {\"Version\", type text}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"Rendered\", each [Product] & \": \" & [Version])\nin\n    #\"Added Custom\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"lVXBcuIwDP0Xzv2JktJZdui0k8D20OnBcUTiwbGzskyXv185hEISB+iRvGfpSXoSHx+zR0lqr+iQWENC0lxbuYNi9jAj9DD7fJhi8C8Hhm4TF/8I0Ah994PMNw2Cc8qaK+Qn5RpBsrqq9Q2tDJFM+SyU7lOZslVYC+I8Kfz14IK2rdAuhrsmyB8SWiGggdrQFxCCIEiwjuuJs70jWyeVMAb0D96tQBT30S8TxCtqGYC/rUcDp2gpSIvFpinEqMw+f8mDbtuVkUDqd3tR8wDaAc+tN3IKnP4+P2wcYC/9JfzkG60kK3wsimCeSeLSiNAs6Iqb5L2o1jenIQsSt6gp6NChODVhdbHq2vjKuLkWcqeV4wArZXZuRGSbsWqMhHgGKHJ+vbK2GYMWvwQWkWe/+PPULAKWQm0JzoxBQa8NmMjLDEwRXbcTSuOPdktTQgJ2Q0jmcydRNa3xfF6rfgZDvBexHV3sWUxSgdwtzRhIoeRhHO18HU0E69KD4Nz2+ihmsAcB+KOcGnxemr3QinsuVaM4wdnFY0qjD2sbs3nHCCMAjEQIlyLjXeZe2sGxC54Lu/Gt+3R+z5RXT6/bo2fZhYr6ud+Ec+sKrS+rK8foW0rKERAkhbyR1cjCXfeaq7gjVgZlzS17gToHdAn7hMKRKwcj6WjtlnJtrlLNolBDV3SszlR5HN0YN4HzEeKJX5N9Qfa4h0P0EK9RleV91XdU/q95t7jbavt1V/J3yIMJz70fQWeXdtDnfw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"Interaction Name\" = _t, #\"Load Data\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Interaction Name\", type text}, {\"Load Data\", type logical}})\nin\n    #\"Changed Type\"", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingform\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(source,{\"msdyncrm_allowprefill\", \"msdyncrm_alwaysgenerateleads\", \"msdyncrm_entityupdatebehavioronsubmit_display\", \"msdyncrm_marketingformid\", \"msdyncrm_marketingformtemplate\", \"msdyncrm_marketingprovided\", \"msdyncrm_name\", \"msdyncrm_purpose_display\", \"msdyncrm_validforpagetype_display\", \"msdyncrm_visualstyle_display\", \"statecode_display\", \"statuscode_display\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"msdyncrm_name\", \"Page Name\"}, {\"msdyncrm_marketingformid\", \"MarketingFormId\"}, {\"statuscode_display\", \"Status\"}, {\"msdyncrm_visualstyle_display\", \"Visual Style\"}, {\"msdyncrm_purpose_display\", \"Purpose\"}, {\"msdyncrm_marketingformtemplate\", \"MarketingFormTemplateId\"}, {\"msdyncrm_entityupdatebehavioronsubmit_display\", \"Entity Update Behavior On Submit\"}, {\"statecode_display\", \"State\"}, {\"msdyncrm_validforpagetype_display\", \"Valid For Page Type\"}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Renamed Columns\",{\"msdyncrm_alwaysgenerateleads\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns\",{{\"msdyncrm_allowprefill\", \"Allow Prefill\"}, {\"msdyncrm_marketingprovided\", \"Marketing Provided\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = MarketingForms,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"MarketingFormId\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Removed Other Columns\",{\"MarketingFormId\"},Leads,{\"msdyncrm_marketingformid\"},\"Leads\",JoinKind.Inner),\n    #\"Aggregated Leads\" = Table.AggregateTableColumn(#\"Merged Queries\", \"Leads\", {{\"msdyncrm_leadid\", List.Count, \"Number of Leads\"}})\nin\n    #\"Aggregated Leads\"", "let\n    Source = MarketingPages,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"MarketingPageId\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Removed Other Columns\",{\"MarketingPageId\"},Leads,{\"msdyncrm_marketingpageid\"},\"Leads\",JoinKind.Inner),\n    #\"Aggregated Leads\" = Table.AggregateTableColumn(#\"Merged Queries\", \"Leads\", {{\"msdyncrm_leadid\", List.Count, \"Number of Leads\"}})\nin\n    #\"Aggregated Leads\"", "let\n    Source = CustomerJourneys,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"CustomerJourneyId\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Removed Other Columns\",{\"CustomerJourneyId\"},Leads,{\"msdyncrm_customerjourneyid\"},\"Leads\",JoinKind.Inner),\n    #\"Aggregated Leads\" = Table.AggregateTableColumn(#\"Merged Queries\", \"Leads\", {{\"msdyncrm_leadid\", List.Count, \"Number of Leads\"}})\nin\n    #\"Aggregated Leads\"", "let\n    Source = MarketingEmails,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"MessageId\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Removed Other Columns\",{\"MessageId\"},Leads,{\"msdyncrm_emailid\"},\"Leads\",JoinKind.Inner),\n    #\"Aggregated Leads\" = Table.AggregateTableColumn(#\"Merged Queries\", \"Leads\", {{\"msdyncrm_leadid\", List.Count, \"Number of Leads\"}})\nin\n    #\"Aggregated Leads\"", "let\n    Source = EmailOpened,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"MessageId\"}),\n    #\"Grouped Rows\" = Table.Group(#\"Removed Other Columns\", {\"MessageId\"}, {{\"Unique Opens\", each Table.RowCount(Table.Distinct(_)), type number}})\nin\n    #\"Grouped Rows\"", "let\n    Source = EmailClicked,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"MessageId\"}),\n    #\"Grouped Rows\" = Table.Group(#\"Removed Other Columns\", {\"MessageId\"}, {{\"Unique Clicks\", each Table.RowCount(Table.Distinct(_)), type number}})\nin\n    #\"Grouped Rows\"", "let\n    Source = EmailOpened,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"CustomerJourneyId\"}),\n    #\"Grouped Rows\" = Table.Group(#\"Removed Other Columns\", {\"CustomerJourneyId\"}, {{\"Unique Opens\", each Table.RowCount(Table.Distinct(_)), type number}})\nin\n    #\"Grouped Rows\"", "let\n    Source = EmailClicked,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"CustomerJourneyId\"}),\n    #\"Grouped Rows\" = Table.Group(#\"Removed Other Columns\", {\"CustomerJourneyId\"}, {{\"Unique Clicks\", each Table.RowCount(Table.Distinct(_)), type number}})\nin\n    #\"Grouped Rows\"", "let\n    Source = #\"#CDSTEntitySource\",\n    Entities = Source{[Group=\"entities\"]}[Data],\n    #\"Sorted Rows\" = Table.Sort(Entities,{{\"EntitySetName\", Order.Ascending}}),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Sorted Rows\",{\"EntitySetName\", \"SchemaName\"})\nin\n    #\"Removed Other Columns\"", "let\n    source = GetCDST_EntityTable(\"msdyncrm_marketingemaildynamiccontentmetadata\")\nin\n    source", "Calendar(Date(Year(MIN('MarketingEmailDynamicContentMetaData'[createdon])), 1, 1), Date(Year(MAX('MarketingEmailDynamicContentMetaData'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmailDynamicContentMetaData'[modifiedon])), 1, 1), Date(Year(MAX('MarketingEmailDynamicContentMetaData'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmailDynamicContentMetaData'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingEmailDynamicContentMetaData'[overriddencreatedon])), 12, 31))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingdynamiccontentmetadata\")\nin\n    source", "Calendar(Date(Year(MIN('MarketingDynamicContentMetaData'[createdon])), 1, 1), Date(Year(MAX('MarketingDynamicContentMetaData'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingDynamicContentMetaData'[modifiedon])), 1, 1), Date(Year(MAX('MarketingDynamicContentMetaData'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingDynamicContentMetaData'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingDynamicContentMetaData'[overriddencreatedon])), 12, 31))", "\"1a030b50-8826-e911-a978-000d3a346695\" meta [IsParameterQuery=true, List={\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", \"fe8e15b8-92b5-e811-a982-000d3a1ada5f\", \"1a030b50-8826-e911-a978-000d3a346695\"}, DefaultValue=\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", Type=\"Text\", IsParameterQueryRequired=true]", "let\n    Source = GetInteractionTableData(\"EmailBlockedMissingContactData\")\nin\n    Source", "Calendar(Date(Year(MIN('EmailBlockedMissingContactData'[Timestamp])), 1, 1), Date(Year(MAX('EmailBlockedMissingContactData'[Timestamp])), 12, 31))", "Calendar(Date(Year(MIN('EmailBlockedMissingContactData'[Datestamp])), 1, 1), Date(Year(MAX('EmailBlockedMissingContactData'[Datestamp])), 12, 31))", "let\n    Conmtacts = GetCDST_CDMProfileTable(\"Contact\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Conmtacts,{\"contactid\", \"emailaddress1\", \"fullname\", \"statecode\", \"statecode_display\", \"statuscode\", \"statuscode_display\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"fullname\", \"Full name\"}, {\"emailaddress1\", \"Email\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = fnDateTable(Date.FromText(\"1/8/2018\")),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Week Ending\", type date}}),\n    #\"Added Month-Year\" = Table.AddColumn(#\"Changed Type\", \"Month-Year\", each Text.Start([MonthName],3)&\"-\"&Text.From([Year])),\n    #\"Added MonthYearSortBy\" = Table.AddColumn(#\"Added Month-Year\", \"MonthYearSortBy\", each [Year]*100+[MonthNumberOfYear]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added MonthYearSortBy\",{{\"Week Ending\", type date}, {\"MonthYearSortBy\", Int64.Type}, {\"IsToday\", type logical}, {\"DayOfMonth\", Int64.Type}}),\n    CoreTable = Table.RenameColumns(#\"Changed Type1\",{{\"Date\", \"Datestamp\"}}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "Calendar(Date(Year(MIN('&DateTable'[Week Ending])), 1, 1), Date(Year(MAX('&DateTable'[Week Ending])), 12, 31))", "let\n    Source = GetStorageContainerContent(),\n    #\"Removed Content\" = Table.RemoveColumns(Source,{\"Content\",\"Name\",\"Date modified\"})\nin\n    #\"Removed Content\"", "let\n    Source = #\"%InteractionModel\",\n    CoreTable = Table.RemoveColumns(Source,{\"attributes\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "\"https://mktdemospring.crm.dynamics.com\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "\"mktdemospring\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "\"cabeln1\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "let\n    Source = #\"#CDSTHubSource\",\n    \n    CustomProfiles = Source{[Group=\"custom\"]}[Data],\n    #\"Sorted Rows\" = Table.Sort(CustomProfiles,{{\"EntitySetName\", Order.Ascending}}),\n    CoreTable = Table.SelectColumns(#\"Sorted Rows\",{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = #\"#CDSTHubSource\",\n    \n    CustomProfiles = Source{[Group=\"cdm\"]}[Data],\n    CoreTable = Table.SelectColumns(CustomProfiles,{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = AzureStorage.Blobs(#\"@AzureStorageAccountName\")\nin\n    Source", "Calendar(Date(Year(MIN('&DateTable'[Datestamp])), 1, 1), Date(Year(MAX('&DateTable'[Datestamp])), 12, 31))", "null meta [IsParameterQuery=true, List={7, 14, 31, 180, 365}, DefaultValue=7, Type=\"Number\", IsParameterQueryRequired=false]", "Calendar(Date(Year(MIN('#StorageContainerContentIndex'[Datestamp])), 1, 1), Date(Year(MAX('#StorageContainerContentIndex'[Datestamp])), 12, 31))", "let\n    Source = #\"!KnownInteractions\",\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Load Data] = true))\nin\n    #\"Filtered Rows\"", "let\n    Source = Table.NestedJoin(#\"#StorageContainerContentIndex\",{\"Interaction Name\"},#\"!LoadedInteractions\",{\"Interaction Name\"},\"!LoadedInteractions\",JoinKind.Inner),\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"!LoadedInteractions\"}),\n    // Filter by the number of daysback\n    FilterByRecency = if (not (#\"@LoadInteractionsForNumberOfDaysBack\" is null))\n      then Table.SelectRows(#\"Removed Columns\", each [DaysFromToday] >= -#\"@LoadInteractionsForNumberOfDaysBack\")\n      else #\"Removed Columns\"\nin\n    FilterByRecency", "Calendar(Date(Year(MIN('#FilteredStorageContainerContentIndex'[Datestamp])), 1, 1), Date(Year(MAX('#FilteredStorageContainerContentIndex'[Datestamp])), 12, 31))", "let\n    Source = #\"%InteractionModel\",\n    #\"Expanded attributes\" = Table.ExpandListColumn(Source, \"attributes\"),\n    CoreTable = Table.ExpandRecordColumn(#\"Expanded attributes\", \"attributes\", {\"name\", \"dataType\"}, {\"Attribute Name\", \"Attribute Type\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8slMKkosqlTSUTLUMzUw0DO0NDQwMFKK1YlWckosTnVJLEkMzi8tSk4thigxhCoxBytxzEvMqaxKLcLQHgsA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Product = _t, Version = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Product\", type text}, {\"Version\", type text}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"Rendered\", each [Product] & \": \" & [Version])\nin\n    #\"Added Custom\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"lVXBcuIwDP0Xzv2JktJZdujQSaA9dHpwHJF4cGyvLNPy9ysH6JTgpOmRvGfpSXoSb2+ze0nqoOiYWUNC0lxbuYdqdjfbCe1h9n43ROFfHgxNYC4+CdAIPf1FEZxD8F5ZM8Z+UN4Jks243me0MsYy9aNQusdlzk5hK4hT5fAvgKcR3LtYQp/QSQEN1I+NIAgybNOC0uzgybZZI4wB/Yt3KxDVNPr3BOmKOgbgXxvQwCVaDtJitXWVuCnzmr/kYXftKkhgn7toeQTdkOc2GDmIjgDz49YDDsIPwWklWeR9VUULDRKXRsR+wbm+Qd6T6rxzmbMg8RM1Bx2blKZmrC5ZXpdAGT/XQu618hxhpcw+UQB7jXVjKsgjQFXy+5W1LoFa/BBYpR7+4e+DI4lgDq0lGKSsHZjuO2H49rkAU6UX7wInGl/YHQ0miuAPWopQeonKdSYMZat6OQzxkqQWdnFgPVkDcr80t0AONU/l5O1xNBMsrF8wN789qaHrRkXgRXnVV7M0B6EVN14qpzhDytBfHKePGzvCiIMATBHi5Sh4t7mftnf8ov/ionxJv73I60Dr3cm/bEhF17GfhfebBm2om0nHKecQCJJi4tSiFPHWB82FTIlWQN1y356gLQF9xnahePfqNK3bWi7PN8otqptpnFlnb5VpdGv8AM5Hiec+UXfAAxyTt3mDqq4nhjlz+f/n1eJ+p+3HpGevUEYvptp/hm7M+v4f\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"Interaction Name\" = _t, #\"Load Data\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Interaction Name\", type text}, {\"Load Data\", type logical}})\nin\n    #\"Changed Type\"", "\"c1b8fe39-53b4-e911-a968-000d3a13cead\" meta [IsParameterQuery=true, List={\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", \"fe8e15b8-92b5-e811-a982-000d3a1ada5f\", \"1a030b50-8826-e911-a978-000d3a346695\"}, DefaultValue=\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", Type=\"Text\", IsParameterQueryRequired=true]", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingform\"),\n    #\"Renamed Columns\" = Table.RenameColumns(source,{{\"msdyncrm_name\", \"Form Name\"}, {\"msdyncrm_marketingformid\", \"MarketingFormId\"}, {\"statuscode_display\", \"Lifecycle\"}, {\"msdyncrm_visualstyle_display\", \"Visual Style\"}, {\"msdyncrm_purpose_display\", \"Purpose\"}, {\"msdyncrm_capturing\", \"External Form Capturing\"}, {\"msdyncrm_allowprefill\", \"Prefill allowed\"}, {\"msdyncrm_alwaysgenerateleads\", \"Always generate leads\"}, {\"msdyncrm_validforpagetype_display\", \"For page type\"}, {\"msdyncrm_entityupdatebehavioronsubmit_display\", \"Submission behavior\"}, {\"modifiedon\", \"Last modified\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('MarketingForms'[createdon])), 1, 1), Date(Year(MAX('MarketingForms'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingForms'[Last modified])), 1, 1), Date(Year(MAX('MarketingForms'[Last modified])), 12, 31))", "Calendar(Date(Year(MIN('MarketingForms'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingForms'[overriddencreatedon])), 12, 31))", "let\n    Source = GetInteractionTableData(\"FormSubmitted\"),\n    #\"Changed Type with Locale\" = Table.TransformColumnTypes(Source, {{\"Timestamp\", type datetimezone}}, \"en-US\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type with Locale\",{{\"FormName\", \"Form Name\"}}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Renamed Columns\", \"InOutbound\", each if [MessageId] = \"\" then \"Inbound\" else \"Outbound\"),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Added Conditional Column\",{{\"InOutbound\", type text}, {\"InteractionType\", type text}, {\"OrganizationId\", type text}, {\"Id\", type text}, {\"SubmittedValues\", type text}, {\"LeadId\", type text}, {\"VisitorAnonymousStatus\", type text}, {\"LeadFailureMessage\", type text}, {\"ContactFailureMessage\", type text}, {\"VisitorReturningStatus\", type text}, {\"VisitDuration\", type text}, {\"SearchEngineName\", type text}, {\"SearchPhrase\", type text}, {\"SendingId\", type text}, {\"ReferrerUri\", type text}, {\"OperatingSystemVersion\", type text}, {\"OperatingSystemId\", type text}, {\"BrowserVersion\", type text}, {\"BrowserId\", type text}, {\"PostalCode\", type text}, {\"City\", type text}, {\"State\", type text}, {\"CountryIsoCode\", type text}, {\"LeadMatchingResult\", type text}, {\"ContactMatchingResult\", type text}, {\"AccountId\", type text}, {\"ContactId\", type text}, {\"SessionId\", type text}, {\"VisitorId\", type text}, {\"Result\", type text}, {\"CustomerJourneyIterationId\", type text}, {\"CustomerJourneyId\", type text}, {\"FormSubmissionId\", type text}, {\"Form Name\", type text}, {\"FormId\", type text}, {\"PageId\", type text}, {\"MessageId\", type text}})\nin\n    #\"Changed Type\"", "Calendar(Date(Year(MIN('FormSubmitted'[Timestamp])), 1, 1), Date(Year(MAX('FormSubmitted'[Timestamp])), 12, 31))", "let\n    Source = FormSubmitted,\n    \n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"FormId\", \"FormSubmissionId\", \"SubmittedValues\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"SubmittedValues\", type text}, {\"FormId\", type text}, {\"FormSubmissionId\", type text}}),\n    #\"Split Column by Delimiter\" = Table.ExpandListColumn(Table.TransformColumns(#\"Changed Type\", {{\"SubmittedValues\", Splitter.SplitTextByDelimiter(\"#(cr)#(lf)\", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), \"SubmittedValues\"),\n    #\"Split Column by Delimiter1\" = Table.SplitColumn(#\"Split Column by Delimiter\", \"SubmittedValues\", Splitter.SplitTextByEachDelimiter({\": \"}, QuoteStyle.None, false), {\"SubmittedValues.1\", \"SubmittedValues.2\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter1\",{{\"SubmittedValues.1\", type text}, {\"SubmittedValues.2\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type1\",{{\"SubmittedValues.1\", \"Field Name\"}, {\"SubmittedValues.2\", \"Value\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_customerjourney\"),\n    #\"Changed Type\" = Table.TransformColumnTypes(source,{{\"createdon\", type date}, {\"msdyncrm_startdatetime\", type date}, {\"msdyncrm_enddatetime\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_name\", \"Journey Name\"}, {\"msdyncrm_type_display\", \"Journey Type\"}, {\"msdyncrm_enddatetime\", \"Jorney End\"}, {\"msdyncrm_description\", \"Description\"}, {\"msdyncrm_entitytarget_display\", \"Target audience\"}, {\"msdyncrm_startdatetime\", \"Journey Start\"}, {\"msdyncrm_customerjourneyid\", \"CustomerJourneyId\"}, {\"statuscode_display\", \"Journey Status\"}}),\n    #\"Added Link\" = Table.AddColumn(#\"Renamed Columns\", \"Link\", each GetEntityFormUrl(\"customerjourney\", [CustomerJourneyId]))\nin\n    #\"Added Link\"", "Calendar(Date(Year(MIN('CustomerJourneys'[modifiedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[overriddencreatedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[overriddencreatedon])), 12, 31))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingemail\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(source,{\"createdby\", \"createdon\", \"modifiedby\", \"modifiedon\", \"msdyncrm_clickmap\", \"msdyncrm_description\", \"msdyncrm_email_contenttype\", \"msdyncrm_email_contenttype_display\", \"msdyncrm_fromemail\", \"msdyncrm_fromname\", \"msdyncrm_fromuser\", \"msdyncrm_insights_placeholder\", \"msdyncrm_istemplategalleryneeded\", \"msdyncrm_marketingemailid\", \"msdyncrm_messagedesignation\", \"msdyncrm_messagedesignation_display\", \"msdyncrm_name\", \"msdyncrm_replytoemail\", \"msdyncrm_subject\", \"msdyncrm_templateid\", \"msdyncrm_to\", \"msdyncrm_uicentityid\", \"overriddencreatedon\", \"ownerid\", \"owningbusinessunit\", \"owningteam\", \"owninguser\", \"statecode\", \"statecode_display\", \"statuscode\", \"statuscode_display\", \"timezoneruleversionnumber\", \"utcconversiontimezonecode\", \"versionnumber\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"createdon\", type date}, {\"modifiedon\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_name\", \"Message Name\"}, {\"msdyncrm_subject\", \"Subject\"}, {\"msdyncrm_fromname\", \"From Name\"}, {\"msdyncrm_description\", \"Description\"}, {\"msdyncrm_messagedesignation_display\", \"Designation\"}, {\"msdyncrm_email_contenttype_display\", \"Content Type\"}, {\"msdyncrm_marketingemailid\", \"MessageId\"}, {\"msdyncrm_fromemail\", \"From Email Address\"}, {\"msdyncrm_fromuser\", \"From User Id\"}, {\"msdyncrm_templateid\", \"TemplateId\"}, {\"statuscode_display\", \"Status\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('MarketingEmails'[modifiedon])), 1, 1), Date(Year(MAX('MarketingEmails'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmails'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingEmails'[overriddencreatedon])), 12, 31))", "let\n    Source = fnDateTable(Date.FromText(\"1/8/2018\")),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Week Ending\", type date}}),\n    #\"Added Month-Year\" = Table.AddColumn(#\"Changed Type\", \"Month-Year\", each Text.Start([MonthName],3)&\"-\"&Text.From([Year])),\n    #\"Added MonthYearSortBy\" = Table.AddColumn(#\"Added Month-Year\", \"MonthYearSortBy\", each [Year]*100+[MonthNumberOfYear]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added MonthYearSortBy\",{{\"Week Ending\", type date}, {\"MonthYearSortBy\", Int64.Type}, {\"IsToday\", type logical}, {\"DayOfMonth\", Int64.Type}}),\n    CoreTable = Table.RenameColumns(#\"Changed Type1\",{{\"Date\", \"Datestamp\"}}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "Calendar(Date(Year(MIN('CustomerJourneys'[createdon])), 1, 1), Date(Year(MAX('CustomerJourneys'[createdon])), 12, 31))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_customerjourney_msdyncrm_marketingemail\"),\n    #\"Removed Columns\" = Table.RemoveColumns(source,{\"versionnumber\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"msdyncrm_customerjourneyid\", \"CustomerJourneyId\"}, {\"msdyncrm_marketingemailid\", \"MessageId\"}, {\"msdyncrm_customerjourney_msdyncrm_marketingemailid\", \"Id\"}}),\n    #\"Merged Journeys\" = Table.NestedJoin(#\"Renamed Columns\",{\"CustomerJourneyId\"},CustomerJourneys,{\"CustomerJourneyId\"},\"CustomerJourneys\",JoinKind.LeftOuter),\n    #\"Merged MarketingEmails\" = Table.NestedJoin(#\"Merged Journeys\",{\"MessageId\"},MarketingEmails,{\"MessageId\"},\"MarketingEmails\",JoinKind.LeftOuter),\n    #\"Expanded CustomerJourneys\" = Table.ExpandTableColumn(#\"Merged MarketingEmails\", \"CustomerJourneys\", {\"Jorney End\", \"Journey Name\", \"Journey Start\", \"Journey Status\"}, {\"Jorney End\", \"Journey Name\", \"Journey Start\", \"Journey Status\"}),\n    #\"Expanded MarketingEmails\" = Table.ExpandTableColumn(#\"Expanded CustomerJourneys\", \"MarketingEmails\", {\"Message Name\"}, {\"Message Name\"})\nin\n    #\"Expanded MarketingEmails\"", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingpage\"),\n    #\"Removed Columns\" = Table.RemoveColumns(source,{\"msdyncrm_content\"}),\n    #\"Added Link\" = Table.AddColumn(#\"Removed Columns\", \"Link\", each GetEntityFormUrl(\"msdyncrm_marketingpage\", [msdyncrm_marketingpageid])),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Link\",{{\"msdyncrm_name\", \"Page Name\"}, {\"msdyncrm_marketingpageid\", \"MarketingPageId\"}, {\"statuscode_display\", \"Status\"}, {\"msdyncrm_visualstyle_display\", \"Visual Style\"}, {\"msdyncrm_type_display\", \"Page Type\"}, {\"msdyncrm_remote_websiteid\", \"WebsiteId\"}, {\"msdyncrm_purpose_display\", \"Purpose\"}, {\"msdyncrm_partialurl\", \"Partial Url\"}, {\"msdyncrm_optimizedfor_display\", \"Optimized for\"}, {\"msdyncrm_markettype_display\", \"Market type\"}, {\"msdyncrm_full_page_url\", \"Page Url\"}, {\"msdyncrm_marketingpagetemplate\", \"MarketingPageTemplateId\"}})\nin\n    #\"Renamed Columns\"", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingpage_marketingemail\"),\n    #\"Removed Columns\" = Table.RemoveColumns(source,{\"versionnumber\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"msdyncrm_marketingemailid\", \"MessageId\"}, {\"msdyncrm_marketingpage_marketingemailid\", \"Id\"}, {\"msdyncrm_marketingpageid\", \"MarketingPageId\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('MarketingPages'[createdon])), 1, 1), Date(Year(MAX('MarketingPages'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingPages'[modifiedon])), 1, 1), Date(Year(MAX('MarketingPages'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingPages'[msdyncrm_lastpublisheddate])), 1, 1), Date(Year(MAX('MarketingPages'[msdyncrm_lastpublisheddate])), 12, 31))", "Calendar(Date(Year(MIN('MarketingPages'[msdyncrm_lastunpublisheddate])), 1, 1), Date(Year(MAX('MarketingPages'[msdyncrm_lastunpublisheddate])), 12, 31))", "Calendar(Date(Year(MIN('MarketingPages'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingPages'[overriddencreatedon])), 12, 31))", "// A table containg a row for each of all the interaction data files in the storage container\nlet\n    Source = GetStorageContainerContent(),\n    #\"Removed Content\" = Table.RemoveColumns(Source,{\"Content\",\"Name\",\"Date modified\"})\n    //Result = Table.Buffer(#\"Removed Content\")\nin\n    #\"Removed Content\"", "let\n    Source = GetInteractionTableData(\"EmailOpened\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"AccountId\", \"MessageId\", \"CustomerJourneyId\", \"ActivityId\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = GetInteractionTableData(\"EmailSubscriptionSubmit\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"Id\", \"ContactId\", \"AccountId\", \"MessageId\", \"CustomerJourneyId\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = #\"%InteractionModel\",\n    CoreTable = Table.RemoveColumns(Source,{\"attributes\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "\"https://mktdemospring.crm.dynamics.com\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "\"mktdemospring\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "Calendar(Date(Year(MIN('EmailSubscriptionSubmit'[Datestamp])), 1, 1), Date(Year(MAX('EmailSubscriptionSubmit'[Datestamp])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmails'[createdon])), 1, 1), Date(Year(MAX('MarketingEmails'[createdon])), 12, 31))", "\"cabeln1\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "let\n    Source = #\"#CDSTContentSource\",\n    \n    CustomProfiles = Source{[Group=\"custom\"]}[Data],\n    #\"Sorted Rows\" = Table.Sort(CustomProfiles,{{\"EntitySetName\", Order.Ascending}}),\n    CoreTable = Table.SelectColumns(#\"Sorted Rows\",{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = #\"#CDSTContentSource\",\n    \n    CustomProfiles = Source{[Group=\"cdm\"]}[Data],\n    CoreTable = Table.SelectColumns(CustomProfiles,{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = AzureStorage.Blobs(#\"@AzureStorageAccountName\")\nin\n    Source", "Calendar(Date(Year(MIN('CustomerJourneys'[Jorney End])), 1, 1), Date(Year(MAX('CustomerJourneys'[Jorney End])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[Journey Start])), 1, 1), Date(Year(MAX('CustomerJourneys'[Journey Start])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneysEmails'[Jorney End])), 1, 1), Date(Year(MAX('CustomerJourneysEmails'[Jorney End])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneysEmails'[Journey Start])), 1, 1), Date(Year(MAX('CustomerJourneysEmails'[Journey Start])), 12, 31))", "null meta [IsParameterQuery=true, List={7, 14, 31, 180, 365}, DefaultValue=7, Type=\"Number\", IsParameterQueryRequired=false]", "Calendar(Date(Year(MIN('#StorageContainerContentIndex'[Datestamp])), 1, 1), Date(Year(MAX('#StorageContainerContentIndex'[Datestamp])), 12, 31))", "// A table with the Interactionfiles in the globally defines data range (Parameter) where the intearctions are filtered by \n// the interactions specified in the \"!LoadedInteractions' table \nlet\n    Source = FilterStorageContainerContent(null),\n    #\"Remove Columns\" = Table.RemoveColumns(Source,{\"Name\", \"Date modified\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Remove Columns\",{\"Interaction Name\"},#\"!LoadedInteractions\",{\"Interaction Name\"},\"!LoadedInteractions\",JoinKind.Inner),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Merged Queries\",{\"!LoadedInteractions\"}),\n    Result = Table.Buffer(#\"Removed Columns\")\nin\n    Result", "Calendar(Date(Year(MIN('#FilteredStorageContainerContent'[Datestamp])), 1, 1), Date(Year(MAX('#FilteredStorageContainerContent'[Datestamp])), 12, 31))", "let\n    Source = #\"!KnownInteractions\",\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Load Data] = true))\nin\n    #\"Filtered Rows\"", "let\n    Source = #\"%InteractionModel\",\n    #\"Expanded attributes\" = Table.ExpandListColumn(Source, \"attributes\"),\n    CoreTable = Table.ExpandRecordColumn(#\"Expanded attributes\", \"attributes\", {\"name\", \"dataType\"}, {\"Attribute Name\", \"Attribute Type\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = GetInteractionTableData(\"EmailClicked\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"AccountId\", \"LinkFriendlyName\", \"MessageId\", \"CustomerJourneyId\", \"ActivityId\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = GetInteractionTableData(\"ActivityContactDispatched\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ActivityId\", \"CustomerJourneyId\", \"ContactId\", \"Id\", \"Datestamp\"}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Removed Other Columns\",{\"Id\", \"ActivityId\", \"CustomerJourneyId\", \"ContactId\", \"Datestamp\"})\nin\n    #\"Reordered Columns\"", "let\n    Source = GetInteractionTableData(\"EmailDelivered\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"ContactId\", \"AccountId\", \"MessageId\", \"CustomerJourneyId\", \"ActivityId\", \"EmailAddressUsed\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"lVXBcuIwDP0Xzv2JksIsO3ToJLA9dHpwHJF4cGyvLNPl71cO0C6JQ7NH8p7kJ+lJvL3NHiWpo6JTZg0JSXNt5QGq2cNsL7SH2fvDGIV/eTA0gbn4Q4BG6OkRRXAOwXtlzT32k/JOkGw6vYQhSXpBK2MqUy+F0r3SmLNX2Aril3L4HcDTHdy7WEGf0CkBDdTPjSAIMmzTgtLs4Mm2WSOMAf0fcWsQ1TT6vw+kK+oYgD9tQAPXbDlIi9XOVWJQ5i1/xbPu2lWQwD530fIIuhnPbTByFL0DzE87DzgKPwWnlWSRj1UVHTRKXBkR+wWX+kZ5z6rzznXOgsR31Bx0bFKamrG6w61fz99jfmX8XAt50MpzgrUyh4R+thrLxkSOJUBVcvjaWjeMW1r8EFilWvuDv48OJII5tJZglLJxYBJ6CjBVeu2ucKLthd3T6EMR/EZLEUovUbnOgqFsFd3oMsQbktrWxZHlZA3Iw8oMgRxqnsnZ2PfRTLCufr3c+/Yshm77FIFfyqu+mpU5Cq2471I5xS+k3PzJcfq0tXcYcQ6AKUI8GwUvNrfT9i5fdF/ckk/pw2u8CbTZn93LdlR0m/tFeL9t0Ia6mXSZck6BICk+/LUlX3gR73zQXMiUbAXULfftGdoS0GfsFopHr07TupXl8nyj3KIaTOPCulirTKM740dwvkg894m6Ax7hlDzMW1R1PTHNhct/Pq8WD3ttPyaFvUIZvZhq/wUamPX9Lw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"Interaction Name\" = _t, #\"Load Data\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Interaction Name\", type text}, {\"Load Data\", type logical}})\nin\n    #\"Changed Type\"", "let\n    Source = GetInteractionTableData(\"FormSubmitted\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"MessageId\", \"PageId\", \"FormId\", \"FormName\", \"FormSubmissionId\", \"CustomerJourneyId\", \"ContactId\", \"AccountId\", \"ContactMatchingResult\", \"LeadMatchingResult\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8slMKkosqlTSUTLUMzUw0DO0NDQwMFKK1YlWckosTnVJLEkMzi8tSk4thigxhCoxBytxzEvMqaxKLcLQHgsA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Product = _t, Version = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Product\", type text}, {\"Version\", type text}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"Rendered\", each [Product] & \": \" & [Version])\nin\n    #\"Added Custom\"", "let\n    Source = CustomerJourneys,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"CustomerJourneyId\"})\nin\n    #\"Removed Other Columns\"", "\"1a030b50-8826-e911-a978-000d3a346695\" meta [IsParameterQuery=true, List={\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", \"fe8e15b8-92b5-e811-a982-000d3a1ada5f\", \"1a030b50-8826-e911-a978-000d3a346695\"}, DefaultValue=\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", Type=\"Text\", IsParameterQueryRequired=true]", "let\n    Source = #\"#CDSTEntitySource\",\n    Entities = Source{[Group=\"entities\"]}[Data],\n    #\"Sorted Rows\" = Table.Sort(Entities,{{\"EntitySetName\", Order.Ascending}}),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Sorted Rows\",{\"EntitySetName\", \"SchemaName\"})\nin\n    #\"Removed Other Columns\"", "let\n    source = #\"GetCDST_EntityTable\"(\"msdyncrm_marketingform\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(source,{\"msdyncrm_allowprefill\", \"msdyncrm_alwaysgenerateleads\", \"msdyncrm_entityupdatebehavioronsubmit_display\", \"msdyncrm_marketingformid\", \"msdyncrm_marketingformtemplate\", \"msdyncrm_marketingprovided\", \"msdyncrm_name\", \"msdyncrm_purpose_display\", \"msdyncrm_validforpagetype_display\", \"msdyncrm_visualstyle_display\", \"statecode_display\", \"statuscode_display\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"msdyncrm_name\", \"Page Name\"}, {\"msdyncrm_marketingformid\", \"MarketingFormId\"}, {\"statuscode_display\", \"Status\"}, {\"msdyncrm_visualstyle_display\", \"Visual Style\"}, {\"msdyncrm_purpose_display\", \"Purpose\"}, {\"msdyncrm_marketingformtemplate\", \"MarketingFormTemplateId\"}, {\"msdyncrm_entityupdatebehavioronsubmit_display\", \"Entity Update Behavior On Submit\"}, {\"statecode_display\", \"State\"}, {\"msdyncrm_validforpagetype_display\", \"Valid For Page Type\"}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Renamed Columns\",{\"msdyncrm_alwaysgenerateleads\"}),\n    #\"Added Link\" = Table.AddColumn(#\"Removed Columns\", \"Link\", each GetEntityFormUrl(\"msdyncrm_marketingform\", [MarketingFormId])),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Added Link\",{{\"msdyncrm_allowprefill\", \"Allow Prefill\"}, {\"msdyncrm_marketingprovided\", \"Marketing Provided\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = MarketingEmails,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"MessageId\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = #\"GetInteractionTableData\"(\"EmailForwarded\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"MessageId\", \"CustomerJourneyId\", \"ContactId\", \"AccountId\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "Calendar(Date(Year(MIN('EmailForwarded'[Datestamp])), 1, 1), Date(Year(MAX('EmailForwarded'[Datestamp])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "SELECT * FROM [CustomerJourneys]", "Calendar(Date(Year(MIN('CustomerJourneys'[modifiedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[overriddencreatedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[overriddencreatedon])), 12, 31))", "SELECT * FROM [MarketingEmails]", "Calendar(Date(Year(MIN('MarketingEmails'[modifiedon])), 1, 1), Date(Year(MAX('MarketingEmails'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmails'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingEmails'[overriddencreatedon])), 12, 31))", "SELECT * FROM [&DateTable]", "Calendar(Date(Year(MIN('&DateTable'[Week Ending])), 1, 1), Date(Year(MAX('&DateTable'[Week Ending])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[createdon])), 1, 1), Date(Year(MAX('CustomerJourneys'[createdon])), 12, 31))", "SELECT * FROM [CustomerJourneysEmails]", "SELECT * FROM [MarketingPages]", "SELECT * FROM [MarketingPagesEmails]", "Calendar(Date(Year(MIN('MarketingPages'[createdon])), 1, 1), Date(Year(MAX('MarketingPages'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingPages'[modifiedon])), 1, 1), Date(Year(MAX('MarketingPages'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingPages'[msdyncrm_lastpublisheddate])), 1, 1), Date(Year(MAX('MarketingPages'[msdyncrm_lastpublisheddate])), 12, 31))", "Calendar(Date(Year(MIN('MarketingPages'[msdyncrm_lastunpublisheddate])), 1, 1), Date(Year(MAX('MarketingPages'[msdyncrm_lastunpublisheddate])), 12, 31))", "Calendar(Date(Year(MIN('MarketingPages'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingPages'[overriddencreatedon])), 12, 31))", "SELECT * FROM [#StorageContainerContentIndex]", "SELECT * FROM [Leads]", "Calendar(Date(Year(MIN('Leads'[msdyncrm_latestsubmissiondate])), 1, 1), Date(Year(MAX('Leads'[msdyncrm_latestsubmissiondate])), 12, 31))", "SELECT * FROM [EmailOpened]", "SELECT * FROM [EmailSubscriptionSubmit]", "SELECT * FROM [%InteractionTypeIndex]", "SELECT * FROM [@CRMOrgUrl]", "SELECT * FROM [@AzureStorageBlobContainerName]", "Calendar(Date(Year(MIN('EmailSubscriptionSubmit'[Datestamp])), 1, 1), Date(Year(MAX('EmailSubscriptionSubmit'[Datestamp])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmails'[createdon])), 1, 1), Date(Year(MAX('MarketingEmails'[createdon])), 12, 31))", "SELECT * FROM [@AzureStorageAccountName]", "SELECT * FROM [#CDST_CustomProfiles]", "SELECT * FROM [#CDST_CDMProfiles]", "SELECT * FROM [#StorageContainers]", "Calendar(Date(Year(MIN('&DateTable'[Datestamp])), 1, 1), Date(Year(MAX('&DateTable'[Datestamp])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[Jorney End])), 1, 1), Date(Year(MAX('CustomerJourneys'[Jorney End])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[Journey Start])), 1, 1), Date(Year(MAX('CustomerJourneys'[Journey Start])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneysEmails'[Jorney End])), 1, 1), Date(Year(MAX('CustomerJourneysEmails'[Jorney End])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneysEmails'[Journey Start])), 1, 1), Date(Year(MAX('CustomerJourneysEmails'[Journey Start])), 12, 31))", "SELECT * FROM [@LoadInteractionsForNumberOfDaysBack]", "Calendar(Date(Year(MIN('#StorageContainerContentIndex'[Datestamp])), 1, 1), Date(Year(MAX('#StorageContainerContentIndex'[Datestamp])), 12, 31))", "SELECT * FROM [#FilteredStorageContainerContent]", "Calendar(Date(Year(MIN('#FilteredStorageContainerContent'[Datestamp])), 1, 1), Date(Year(MAX('#FilteredStorageContainerContent'[Datestamp])), 12, 31))", "SELECT * FROM [!LoadedInteractions]", "SELECT * FROM [%InteractionModelExpanded]", "SELECT * FROM [Contacts]", "SELECT * FROM [EmailClicked]", "SELECT * FROM [Segments]", "Calendar(Date(Year(MIN('Segments'[createdon])), 1, 1), Date(Year(MAX('Segments'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('Segments'[modifiedon])), 1, 1), Date(Year(MAX('Segments'[modifiedon])), 12, 31))", "SELECT * FROM [SegmentMembers]", "SELECT * FROM [ActivityContactBlocked]", "Calendar(Date(Year(MIN('ActivityContactBlocked'[Datestamp])), 1, 1), Date(Year(MAX('ActivityContactBlocked'[Datestamp])), 12, 31))", "SELECT * FROM [ActivityContactDispatched]", "SELECT * FROM [ActivityContactProcessingFailed]", "Calendar(Date(Year(MIN('ActivityContactProcessingFailed'[Datestamp])), 1, 1), Date(Year(MAX('ActivityContactProcessingFailed'[Datestamp])), 12, 31))", "SELECT * FROM [PassThroughActivityContactProcessed]", "SELECT * FROM [SchedulerActivityContactProcessed]", "SELECT * FROM [TriggerActivityContactProcessed]", "SELECT * FROM [EmailDelivered]", "SELECT * FROM [!KnownInteractions]", "SELECT * FROM [EmailSent]", "SELECT * FROM [EmailForwarded]", "SELECT * FROM [FormSubmitted]", "SELECT * FROM [!ProductVersion]", "SELECT * FROM [KPI_Journey]", "SELECT * FROM [KPI_Lead (Contact)]", "SELECT * FROM [@MarketingAppId]", "SELECT * FROM [Opportunities]", "Calendar(Date(Year(MIN('Opportunities'[createdon])), 1, 1), Date(Year(MAX('Opportunities'[createdon])), 12, 31))", "SELECT * FROM [ROI_OutboundMarketingContribution]", "SELECT * FROM [ROI_InboundMarketingContribution]", "SELECT * FROM [#CDST_Entities]", "SELECT * FROM [MarketingForms]", "SELECT * FROM [Opportunities (Sales)]", "Calendar(Date(Year(MIN('Opportunities (Sales)'[createdon])), 1, 1), Date(Year(MAX('Opportunities (Sales)'[createdon])), 12, 31))", "SELECT * FROM [Opportunities (Marketing Inbound)]", "Calendar(Date(Year(MIN('Opportunities (Marketing Inbound)'[createdon])), 1, 1), Date(Year(MAX('Opportunities (Marketing Inbound)'[createdon])), 12, 31))", "SELECT * FROM [Opportunities (Marketing Outbound)]", "Calendar(Date(Year(MIN('Opportunities (Marketing Outbound)'[createdon])), 1, 1), Date(Year(MAX('Opportunities (Marketing Outbound)'[createdon])), 12, 31))", "SELECT * FROM [KPI_Contacts]", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_customerjourney\"),\n    #\"Changed Type\" = Table.TransformColumnTypes(source,{{\"createdon\", type date}, {\"msdyncrm_startdatetime\", type date}, {\"msdyncrm_enddatetime\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_name\", \"Journey Name\"}, {\"msdyncrm_type_display\", \"Journey Type\"}, {\"msdyncrm_enddatetime\", \"Jorney End\"}, {\"msdyncrm_description\", \"Description\"}, {\"msdyncrm_entitytarget_display\", \"Target audience\"}, {\"msdyncrm_startdatetime\", \"Journey Start\"}, {\"msdyncrm_customerjourneyid\", \"CustomerJourneyId\"}, {\"statuscode_display\", \"Journey Status\"}}),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Renamed Columns\",{\"CustomerJourneyId\", \"Journey Name\", \"msdyncrm_suppressionsegmentid\", \"msdyncrm_workflowdefinition\", \"statecode_display\", \"Journey Status\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"msdyncrm_workflowdefinition\", \"Journey Definition\"}, {\"msdyncrm_suppressionsegmentid\", \"SuppressionSegmentId\"}, {\"statecode_display\", \"Entity Status\"}, {\"Journey Status\", \"Journey Lifecycle\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = fnDateTable(Date.FromText(\"1/8/2018\")),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Week Ending\", type date}}),\n    #\"Added Month-Year\" = Table.AddColumn(#\"Changed Type\", \"Month-Year\", each Text.Start([MonthName],3)&\"-\"&Text.From([Year])),\n    #\"Added MonthYearSortBy\" = Table.AddColumn(#\"Added Month-Year\", \"MonthYearSortBy\", each [Year]*100+[MonthNumberOfYear]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added MonthYearSortBy\",{{\"Week Ending\", type date}, {\"MonthYearSortBy\", Int64.Type}, {\"IsToday\", type logical}, {\"DayOfMonth\", Int64.Type}}),\n    CoreTable = Table.RenameColumns(#\"Changed Type1\",{{\"Date\", \"Datestamp\"}}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "Calendar(Date(Year(MIN('&DateTable'[Week Ending])), 1, 1), Date(Year(MAX('&DateTable'[Week Ending])), 12, 31))", "// A table containg a row for each of all the interaction data files in the storage container\nlet\n    Source = GetStorageContainerContent(),\n    #\"Removed Content\" = Table.RemoveColumns(Source,{\"Content\",\"Name\",\"Date modified\"})\n    //Result = Table.Buffer(#\"Removed Content\")\nin\n    #\"Removed Content\"", "let\n    Source = #\"%InteractionModel\",\n    CoreTable = Table.RemoveColumns(Source,{\"attributes\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "\"https://mktdemospring.crm.dynamics.com\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]", "\"mktdemospring\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]", "\"cabeln2\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]", "let\n    //Source = GetCDSTHubSource(),\n    Source = #\"#CDSTHubSource\",\n    CustomProfiles = Source{[Group=\"custom\"]}[Data],\n    #\"Sorted Rows\" = Table.Sort(CustomProfiles,{{\"EntitySetName\", Order.Ascending}}),\n    CoreTable = Table.SelectColumns(#\"Sorted Rows\",{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    //Source = GetCDSTHubSource(),\n    Source = #\"#CDSTHubSource\",\n    CustomProfiles = Source{[Group=\"cdm\"]}[Data],\n    CoreTable = Table.SelectColumns(CustomProfiles,{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = AzureStorage.Blobs(#\"@AzureStorageAccountName\")\nin\n    Source", "Calendar(Date(Year(MIN('&DateTable'[Datestamp])), 1, 1), Date(Year(MAX('&DateTable'[Datestamp])), 12, 31))", "null meta [IsParameterQuery=true, List={7, 14, 31, 180, 365}, DefaultValue=7, Type=\"Number\", IsParameterQueryRequired=false]", "Calendar(Date(Year(MIN('#StorageContainerContentIndex'[Datestamp])), 1, 1), Date(Year(MAX('#StorageContainerContentIndex'[Datestamp])), 12, 31))", "// A table with the Interactionfiles in the globally defines data range (Parameter) where the intearctions are filtered by \n// the interactions specified in the \"!LoadedInteractions' table \nlet\n    Source = FilterStorageContainerContent(null),\n    #\"Remove Columns\" = Table.RemoveColumns(Source,{\"Name\", \"Date modified\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Remove Columns\",{\"Interaction Name\"},#\"!LoadedInteractions\",{\"Interaction Name\"},\"!LoadedInteractions\",JoinKind.Inner),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Merged Queries\",{\"!LoadedInteractions\"}),\n    Result = Table.Buffer(#\"Removed Columns\")\nin\n    Result", "Calendar(Date(Year(MIN('#FilteredStorageContainerContent'[Datestamp])), 1, 1), Date(Year(MAX('#FilteredStorageContainerContent'[Datestamp])), 12, 31))", "let\n    Source = #\"!KnownInteractions\",\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Load Data] = true))\nin\n    #\"Filtered Rows\"", "let\n    Source = #\"%InteractionModel\",\n    #\"Expanded attributes\" = Table.ExpandListColumn(Source, \"attributes\"),\n    CoreTable = Table.ExpandRecordColumn(#\"Expanded attributes\", \"attributes\", {\"name\", \"dataType\"}, {\"Attribute Name\", \"Attribute Type\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Segments = GetCDST_CustomProfileTable(\"msdyncrm_segment\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Segments,{\"createdon\", \"modifiedon\", \"msdyncrm_lastevaluationtime\", \"msdyncrm_segmentactivationstatus_display\", \"msdyncrm_segmentevaluationdurationinminutes\", \"msdyncrm_segmentevaluationstate\", \"msdyncrm_segmentfilterquery\", \"msdyncrm_segmentid\", \"msdyncrm_segmentmemberids\", \"msdyncrm_segmentname\", \"msdyncrm_segmentprovisioningstate\", \"msdyncrm_segmentquery\", \"msdyncrm_segmentrefreshrateintervalminutes\", \"msdyncrm_segmentsize\", \"msdyncrm_segmenttype_display\", \"statecode_display\", \"statuscode_display\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"createdon\", type date}, {\"modifiedon\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_segmentid\", \"Segment Id\"}, {\"msdyncrm_segmentname\", \"Segment Name\"}, {\"msdyncrm_segmentsize\", \"Segment Size\"}, {\"statecode_display\", \"State\"}, {\"statuscode_display\", \"Status\"}, {\"msdyncrm_segmenttype_display\", \"Segment Type\"}, {\"msdyncrm_segmentrefreshrateintervalminutes\", \"Refresh Interval (min)\"}, {\"msdyncrm_segmentquery\", \"Segment Query\"}, {\"msdyncrm_segmentprovisioningstate\", \"Segment Provisioning State\"}, {\"msdyncrm_segmentactivationstatus_display\", \"Activation Status\"}, {\"msdyncrm_segmentevaluationdurationinminutes\", \"Evaluation Duration (min)\"}, {\"msdyncrm_segmentevaluationstate\", \"Evaluation State\"}, {\"msdyncrm_lastevaluationtime\", \"Last Evaluation Time\"}, {\"msdyncrm_segmentfilterquery\", \"Segment Filter Query\"}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns\",{\"Segment Id\", \"createdon\", \"modifiedon\", \"Last Evaluation Time\", \"Activation Status\", \"Evaluation Duration (min)\", \"Evaluation State\", \"Segment Filter Query\", \"msdyncrm_segmentmemberids\", \"Segment Name\", \"Segment Provisioning State\", \"Segment Query\", \"Refresh Interval (min)\", \"Segment Size\", \"Segment Type\", \"State\", \"Status\"})\nin\n    #\"Reordered Columns\"", "Calendar(Date(Year(MIN('Segments'[createdon])), 1, 1), Date(Year(MAX('Segments'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('Segments'[modifiedon])), 1, 1), Date(Year(MAX('Segments'[modifiedon])), 12, 31))", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"lVXBcuIwDP0Xzv2JktJZdujQSWB76PTgOCLxxLG9skyXv185QGcJTpo9kvcsPUlP4v198ShJHRWdMmtISFpqK1uoFg+Lg9AeFh8PYxT+5cHQDObqDwEaoee/KIJzCN4ra6bYT8o7QbKZ1vuKVsZYpn4WSg+4zDko7ARxqhx+B/A0gXsXSxgSeimggYaxEQRBhl1aUJodPNkua4QxoP/j3QZENY/+b4J0RT0D8KcNaOAaLQdpsdq7StyVectf87D7dhUkcMhddTyCfshLG4wcRSeA5WnvAUfhp+C0kizysaqihUaJayNiv+BS3yjvRfXeuc5ZkPiOmoOOTUpTM1aXLK9PoIxfaiFbrTxH2CjTJgpgr7FuTAV5BqhKfr+x1iVQi58Cq9TDH/x9dCQRzKGzBKOUrQOT+l6AqdKbd4UTnS/sgUYzRfAbMUUovUTleheGslODHIZ4S1IbuzqynqwB2a7NPZBDzWM5m3sazQQLGxbM3e/OaoZpI/JLeTX8vjZHoRW3XiqnOEXK0l8cp087O8GIkwBMEeLtKHi7uaF2cP6iA+OqfGm/v8nbQNvD2cFsSUW3sV+F97sGbaibWecp5xAIkmLi1KoU8doHzYXMiVZA3XHfXqArAX3GfqF4+eqeRhhuWP3acnW+UW5VXYYxJF2sVSbBvfFpmE8SD32m5oBHOCUv8w5VXc8Mc+Hyv8+bxfag7eesZ29QRh+mWn+B7oz68Rc=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"Interaction Name\" = _t, #\"Load Data\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Interaction Name\", type text}, {\"Load Data\", type logical}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8slMKkosqlTSUTLUMzUw0DO0NDQwMFKK1YlWckosTnVJLEkMzi8tSk4thigxhCoxBytxzEvMqaxKLcLQHgsA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Product = _t, Version = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Product\", type text}, {\"Version\", type text}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"Rendered\", each [Product] & \": \" & [Version])\nin\n    #\"Added Custom\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"hVPNbsIwDH6XnfcSozBtExKIjnGYdgiJaa2mcWSnRXv7pdCyFFC54e/HdT6b7++nFx2wxfCbkQtKh5klXYF5+nm+oeYoXgVd3mfXTBpE0BWvCm2v6bmtF+AwYAwqQMb1/QZjVSOB6qxUzoGd1qfKDYgnJ5AwwB/UsIPBvQFNbLbeqGGuRR3nPj1/Ro3TN2gKZBavgK4rOplZpSuLEpsu0VXyr5iDxRY4Nb0CmH3UL4l8ghIfFZtU+Bbrm6FWHlxa5+DMOP0BDklFh3DTKW/2ohl9QHLxd429oY3WrARdvbt/YANFfB6rTnxC47z12TUk2SFfKDjU765VFk2MHD3GFi/GcNxcynXDA6fEEpTJ445gRiThAo1OadWE1eGcfwwWw9m5ViKfJVNTlJMns4kWBh26RaULzbsTb2wcZ8qdQ1Gf4rCnKKREvzCXJ/dsn+x+jG6dXOHeduk9+GDDLfyOTvuTsSge2HpN/L/tiKuDpeOkfAf7bnFpHj102ejPHw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"Interaction Name\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Interaction Name\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = GetInteractionTableData(\"SegmentRelationshipEdited\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"VisitorId\", \"ContactId\", \"AccountId\", \"SendingId\", \"SegmentId\", \"RelationshipOperatorAction\", \"SearchPhrase\", \"SearchEngineName\", \"VisitDuration\", \"VisitorReturningStatus\", \"VisitorAnonymousStatus\", \"LeadId\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = GetInteractionTableData(\"SegmentSubscribed\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"VisitorId\", \"ContactId\", \"AccountId\", \"CustomerJourneyId\", \"MessageId\", \"EmailAddressUsed\", \"SegmentId\", \"FormSubmissionId\", \"VisitDuration\", \"VisitorReturningStatus\", \"VisitorAnonymousStatus\", \"LeadId\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "let\n    Source = GetInteractionTableData(\"SegmentUnsubscribed\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"SessionId\", \"VisitorId\", \"ContactId\", \"AccountId\", \"CustomerJourneyId\", \"MessageId\", \"EmailDomain\", \"EmailAddressUsed\", \"SegmentId\", \"FormSubmissionId\", \"VisitDuration\", \"VisitorReturningStatus\", \"VisitorAnonymousStatus\", \"Id\", \"Datestamp\"})\nin\n    #\"Removed Other Columns\"", "Calendar(Date(Year(MIN('Segments'[Last Evaluation Time])), 1, 1), Date(Year(MAX('Segments'[Last Evaluation Time])), 12, 31))", "let\n    Source = CustomerJourneys,\n    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"CustomerJourneyId\", \"Journey Definition\"}),\n    #\"Filtered Rows2\" = Table.SelectRows(#\"Removed Other Columns\", each [Journey Definition] <> null),\n    #\"Parsed JSON\" = Table.TransformColumns(#\"Filtered Rows2\",{{\"Journey Definition\", Json.Document}}),\n    #\"Expanded Journey Definition\" = Table.ExpandListColumn(#\"Parsed JSON\", \"Journey Definition\"),\n    #\"Expanded Journey Definition1\" = Table.ExpandRecordColumn(#\"Expanded Journey Definition\", \"Journey Definition\", {\"ActivityTypeId\", \"Properties\"}, {\"ActivityTypeId\", \"Properties\"}),\n    #\"Expanded Properties\" = Table.ExpandRecordColumn(#\"Expanded Journey Definition1\", \"Properties\", {\"Items\"}, {\"Properties.Items\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Properties\",{{\"ActivityTypeId\", type text}}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each [ActivityTypeId] = \"Segment\"),\n    #\"Expanded Properties.Items\" = Table.ExpandListColumn(#\"Filtered Rows\", \"Properties.Items\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded Properties.Items\",{{\"Properties.Items\", \"Segment\"}}),\n    #\"Expanded Segment\" = Table.ExpandRecordColumn(#\"Renamed Columns\", \"Segment\", {\"ItemId\", \"ActivityTypeId\", \"SegmentMergeMethod\", \"ContainmentMethod\", \"DciSegmentName\", \"SegmentDisplayName\"}, {\"Segment.ItemId\", \"Segment.ActivityTypeId\", \"Segment.SegmentMergeMethod\", \"Segment.ContainmentMethod\", \"Segment.DciSegmentName\", \"Segment.SegmentDisplayName\"}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Expanded Segment\",{{\"Segment.ActivityTypeId\", type text}}),\n    #\"Filtered Rows1\" = Table.SelectRows(#\"Changed Type1\", each ([Segment.ActivityTypeId] = \"SegmentItem\")),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Filtered Rows1\",{{\"Segment.ItemId\", \"SegmentId\"}}),\n    #\"Removed Other Columns1\" = Table.SelectColumns(#\"Renamed Columns1\",{\"CustomerJourneyId\", \"SegmentId\"})\nin\n    #\"Removed Other Columns1\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\5 module\\\u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a \u043c\u044f\u0441\u043e.xlsx\"), null, true),\n    #\"\u041c\u0438\u0440 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435_Sheet\" = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u041c\u0438\u0440 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(#\"\u041c\u0438\u0440 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435_Sheet\", [PromoteAllScalars=true]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\",{{\"Column1\", type text}, {\"\u0433\u043e\u0434\", Int64.Type}, {\"\u0432\u0438\u0434 \u043c\u044f\u0441\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\", type text}, {\"\u043c\u043b\u043d. \u0442\u043e\u043d\u043d\", Int64.Type}}),\n    #\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\" = Table.RenameColumns(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\",{{\"Column1\", \"\u041c\u0438\u0440\"}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\",\"\u043f\u0442\u0438\u0446\u0430\",\"poultry\",Replacer.ReplaceText,{\"\u0432\u0438\u0434 \u043c\u044f\u0441\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u0433\u043e\u0432\u044f\u0434\u0438\u043d\u0430\",\"beef\",Replacer.ReplaceText,{\"\u0432\u0438\u0434 \u043c\u044f\u0441\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u0441\u0432\u0438\u043d\u0438\u043d\u0430\",\"pork\",Replacer.ReplaceText,{\"\u0432\u0438\u0434 \u043c\u044f\u0441\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\"})\nin\n    #\"Replaced Value2\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\5 module\\\u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a \u043c\u044f\u0441\u043e.xlsx\"), null, true),\n    #\"\u041f\u0440\u0432\u043e \u0438 \u0432\u043d \u0441\u043f\u0440\u043e\u0441_Sheet\" = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u041f\u0440\u0432\u043e \u0438 \u0432\u043d \u0441\u043f\u0440\u043e\u0441\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(#\"\u041f\u0440\u0432\u043e \u0438 \u0432\u043d \u0441\u043f\u0440\u043e\u0441_Sheet\", [PromoteAllScalars=true]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\",{{\"\u0433\u043e\u0434\", Int64.Type}, {\"\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\", type text}, {\"\u043c\u044f\u0441\u043e\", type text}, {\"Column4\", Int64.Type}}),\n    #\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\" = Table.RenameColumns(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\",{{\"Column4\", \"\u0422\u044b\u0441 \u0442\u043e\u043d\u043d\"}}),\n    #\"\u0423\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\" = Table.RemoveColumns(#\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\",{\"\u041c\u0438\u0440/\u0420\u0424\"}),\n    #\"\u0423\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\" = Table.SelectRows(#\"\u0423\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u0423\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\",\"\u0421\u0432\u0438\u043d\u0438\u043d\u0430\",\"pork\",Replacer.ReplaceText,{\"\u043c\u044f\u0441\u043e\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u041f\u0442\u0438\u0446\u0430\",\"poultry\",Replacer.ReplaceText,{\"\u043c\u044f\u0441\u043e\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u0413\u043e\u0432\u044f\u0434\u0438\u043d\u0430\",\"beef\",Replacer.ReplaceText,{\"\u043c\u044f\u0441\u043e\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e\",\"Production\",Replacer.ReplaceText,{\"\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435\",\"Consumption\",Replacer.ReplaceText,{\"\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\"})\nin\n    #\"Replaced Value4\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\5 module\\\u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a \u043c\u044f\u0441\u043e.xlsx\"), null, true),\n    #\"\u0420\u0424 \u044d\u043a\u0441\u043f\u043e\u0440\u0442_Sheet\" = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0420\u0424 \u044d\u043a\u0441\u043f\u043e\u0440\u0442\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(#\"\u0420\u0424 \u044d\u043a\u0441\u043f\u043e\u0440\u0442_Sheet\", [PromoteAllScalars=true]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\",{{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\", type text}, {\"\u0421\u0442\u0440\u0430\u043d\u0430\", type text}, {\"\u0414\u043e\u043b\u044f \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0430, %\", type number}}),\n    #\"\u0423\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\" = Table.SelectRows(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u0423\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\",\"\u0441\u0432\u0438\u043d\u0438\u043d\u0430\",\"pork\",Replacer.ReplaceText,{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u0433\u043e\u0432\u044f\u0434\u0438\u043d\u0430\",\"beef\",Replacer.ReplaceText,{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u043f\u0442\u0438\u0446\u0430\",\"poultry\",Replacer.ReplaceText,{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"\u0423\u043a\u0440\u0430\u0438\u043d\u0430\",\"Ukraine\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"\u041a\u0438\u0442\u0430\u0439\",\"China\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"\u0414\u0440\u0443\u0433\u0438\u0435\",\"Other\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value6\" = Table.ReplaceValue(#\"Replaced Value5\",\"\u041a\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043d\",\"Kazakhstan\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value7\" = Table.ReplaceValue(#\"Replaced Value6\",\"\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u044c\",\"Belarus\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value8\" = Table.ReplaceValue(#\"Replaced Value7\",\"\u0421\u0430\u0443\u0434\u043e\u0432\u0441\u043a\u0430\u044f \u0410\u0440\u0430\u0432\u0438\u044f\",\"Saudi Arabia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value9\" = Table.ReplaceValue(#\"Replaced Value8\",\"\u0412\u044c\u0435\u0442\u043d\u0430\u043c\",\"Vietnam\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"})\nin\n    #\"Replaced Value9\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WurDwwtYLmy5svdhwYe+FDRf7FS5MuLAHzN1xYdeFDUqxOkA1s4EyTUCBvRcbQYI4VE29sAkosO/CfpjAhIstqComXNh+YcfFfghnHlB864UNQGvBQrEA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [\u0420\u0435\u0433\u0438\u043e\u043d\u044b = _t]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a,{{\"\u0420\u0435\u0433\u0438\u043e\u043d\u044b\", type text}}),\n    #\"\u0423\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\" = Table.SelectRows(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u0423\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\",\"\u0410\u0437\u0438\u044f\",\"Asia\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\u044b\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u0415\u0432\u0440\u043e\u043f\u0430\",\"Europe\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\u044b\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u0410\u0444\u0440\u0438\u043a\u0430\",\"Africa\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\u044b\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"\u041e\u043a\u0435\u0430\u043d\u0438\u044f\",\"Okeania\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\u044b\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"\u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\",\"North America\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\u044b\"}),\n    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"\u041b\u0430\u0442\u0438\u043d\u0441\u043a\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\",\"Latin America\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\u044b\"}),\n    #\"Replaced Value6\" = Table.ReplaceValue(#\"Replaced Value5\",\"Okeania\",\"Oceania\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\u044b\"})\nin\n    #\"Replaced Value6\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\5 module\\\u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a \u043c\u044f\u0441\u043e.xlsx\"), null, true),\n    #\"\u0422\u0438\u0442\u0443\u043b 2_Sheet\" = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0422\u0438\u0442\u0443\u043b 2\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(#\"\u0422\u0438\u0442\u0443\u043b 2_Sheet\", [PromoteAllScalars=true]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\",{{\"\u0420\u0435\u0433\u0438\u043e\u043d\", type text}, {\"\u043a\u0433\", type number}, {\"\u043c\u0438\u0440\", type number}, {\"\u0441\u0440 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432 \u043c\u0438\u0440\u0435\", type number}, {\"\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438\", type number}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\",\"\u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\",\"North America\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u041b\u0430\u0442\u0438\u043d\u0441\u043a\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\",\"Latin America\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u0415\u0432\u0440\u043e\u043f\u0430\",\"Europe\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"\u0410\u0444\u0440\u0438\u043a\u0430\",\"Africa\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"\u0410\u0437\u0438\u044f\",\"Asia\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"\u041e\u043a\u0435\u0430\u043d\u0438\u044f\",\"Oceania\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"})\nin\n    #\"Replaced Value5\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\5 module\\\u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a \u043c\u044f\u0441\u043e.xlsx\"), null, true),\n    \u0422\u0438\u0442\u0443\u043b_Sheet = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0422\u0438\u0442\u0443\u043b\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(\u0422\u0438\u0442\u0443\u043b_Sheet, [PromoteAllScalars=true]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\",{{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\", type text}, {\"\u0420\u0435\u0433\u0438\u043e\u043d\", type text}, {\"\u043c\u043b\u043d. \u0442\u043e\u043d\u043d\", type number}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\",\"\u0410\u0437\u0438\u044f\",\"Asia\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u0415\u0432\u0440\u043e\u043f\u0430\",\"Europe\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u041b\u0430\u0442\u0438\u043d\u0441\u043a\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\",\"Latin America\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"\u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\",\"North America\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"\u0410\u0444\u0440\u0438\u043a\u0430\",\"Africa\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"\u041e\u043a\u0435\u0430\u043d\u0438\u044f\",\"Okeania\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value6\" = Table.ReplaceValue(#\"Replaced Value5\",\"Okeania\",\"Oceania\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value7\" = Table.ReplaceValue(#\"Replaced Value6\",\"\u0433\u043e\u0432\u044f\u0434\u0438\u043d\u0430\",\"beef\",Replacer.ReplaceText,{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\"}),\n    #\"Replaced Value8\" = Table.ReplaceValue(#\"Replaced Value7\",\"\u0441\u0432\u0438\u043d\u0438\u043d\u0430\",\"pork\",Replacer.ReplaceText,{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\"}),\n    #\"Replaced Value9\" = Table.ReplaceValue(#\"Replaced Value8\",\"\u043f\u0442\u0438\u0446\u0430\",\"poultry\",Replacer.ReplaceText,{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\"})\nin\n    #\"Replaced Value9\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\5 module\\\u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a \u043c\u044f\u0441\u043e.xlsx\"), null, true),\n    #\"\u042d\u043ac-\u0438\u043c\u043f_Sheet\" = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u042d\u043ac-\u0438\u043c\u043f\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(#\"\u042d\u043ac-\u0438\u043c\u043f_Sheet\", [PromoteAllScalars=true]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\",{{\"\u0413\u043e\u0434\", Int64.Type}, {\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\", type text}, {\"\u0418\u043c\u043f\u043e\u0440\u0442 \", Int64.Type}, {\"\u042d\u043a\u0441\u043f\u043e\u0440\u0442\", type number}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\",\"\u0441\u0432\u0438\u043d\u0438\u043d\u0430\",\"pork\",Replacer.ReplaceText,{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u043f\u0442\u0438\u0446\u0430\",\"poultry\",Replacer.ReplaceText,{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u0433\u043e\u0432\u044f\u0434\u0438\u043d\u0430\",\"beef\",Replacer.ReplaceText,{\"\u041f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f\"})\nin\n    #\"Replaced Value2\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\5 module\\\u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a \u043c\u044f\u0441\u043e.xlsx\"), null, true),\n    #\"\u0420\u0424 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435_Sheet\" = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0420\u0424 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(#\"\u0420\u0424 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435_Sheet\", [PromoteAllScalars=true]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\",{{\"Column1\", type text}, {\"\u0433\u043e\u0434\", Int64.Type}, {\"\u0432\u0438\u0434 \u043c\u044f\u0441\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\", type text}, {\"\u043c\u043b\u043d. \u0442\u043e\u043d\u043d\", Int64.Type}}),\n    #\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\" = Table.RenameColumns(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\",{{\"Column1\", \"\u0420\u043e\u0441\u0441\u0438\u044f\"}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\",\"\u043f\u0442\u0438\u0446\u0430\",\"poultry\",Replacer.ReplaceText,{\"\u0432\u0438\u0434 \u043c\u044f\u0441\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u0441\u0432\u0438\u043d\u0438\u043d\u0430\",\"pork\",Replacer.ReplaceText,{\"\u0432\u0438\u0434 \u043c\u044f\u0441\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u0433\u043e\u0432\u044f\u0434\u0438\u043d\u0430\",\"beef\",Replacer.ReplaceText,{\"\u0432\u0438\u0434 \u043c\u044f\u0441\u043d\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\"})\nin\n    #\"Replaced Value2\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\5 module\\\u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a \u043c\u044f\u0441\u043e.xlsx\"), null, true),\n    #\"\u0421\u0442\u0440\u0430\u043d\u044b \u043a\u0433 \u043d\u0430 \u0447\u0435\u043b_Sheet\" = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0421\u0442\u0440\u0430\u043d\u044b \u043a\u0433 \u043d\u0430 \u0447\u0435\u043b\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(#\"\u0421\u0442\u0440\u0430\u043d\u044b \u043a\u0433 \u043d\u0430 \u0447\u0435\u043b_Sheet\", [PromoteAllScalars=true]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\",{{\"\u0421\u0442\u0440\u0430\u043d\u0430\", type text}, {\"\u043a\u0433 / \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 (2002)\", type number}, {\"\u043a\u0433 / \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 (2009)\", type number}, {\"\u043a\u0433 / \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 (2017)\", type number}, {\"\u0420\u0435\u0433\u0438\u043e\u043d\", type text}}),\n    #\"\u0423\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\" = Table.SelectRows(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),\n    #\"\u0423\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438\" = Table.RemoveRowsWithErrors(#\"\u0423\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\", {\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"\u0423\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\" = Table.RemoveColumns(#\"\u0423\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438\",{\"\u043a\u0433 / \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 (2002)\", \"\u043a\u0433 / \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 (2009)\"}),\n    #\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\" = Table.RenameColumns(#\"\u0423\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\",{{\"\u043a\u0433 / \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 (2017)\", \"\u043a\u0433\"}}),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f1\" = Table.TransformColumnTypes(#\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\",{{\"\u0441\u0440 \u043f\u0440\u043e\u0434 \u0436\u0438\u0437\u043d\u0438\", type number}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f1\",\"\u041e\u043a\u0435\u0430\u043d\u0438\u044f\",\"Okeania\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u0415\u0432\u0440\u043e\u043f\u0430\",\"Europe\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u0410\u0437\u0438\u044f\",\"Asia\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"\u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\",\"North America\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"\u041b\u0430\u0442\u0438\u043d\u0441\u043a\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\",\"Latin America\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"\u0410\u0444\u0440\u0438\u043a\u0430\",\"Africa\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value6\" = Table.ReplaceValue(#\"Replaced Value5\",\"Okeania\",\"Oceania\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"}),\n    #\"Replaced Value7\" = Table.ReplaceValue(#\"Replaced Value6\",\"\u0410\u0432\u0441\u0442\u0440\u0430\u043b\u0438\u044f\",\"Australia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value8\" = Table.ReplaceValue(#\"Replaced Value7\",\"\u0410\u0432\u0441\u0442\u0440\u0438\u044f\",\"Austria\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value9\" = Table.ReplaceValue(#\"Replaced Value8\",\"\u0410\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043d\",\"Azerbaijan\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value10\" = Table.ReplaceValue(#\"Replaced Value9\",\"\u0410\u043b\u0431\u0430\u043d\u0438\u044f\",\"Albania\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value11\" = Table.ReplaceValue(#\"Replaced Value10\",\"\u0410\u043b\u0436\u0438\u0440\",\"Algeria\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value12\" = Table.ReplaceValue(#\"Replaced Value11\",\" \u0421\u0430\u043c\u043e\u0430\",\"Samoa\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value13\" = Table.ReplaceValue(#\"Replaced Value12\",\"\u0410\u043d\u0433\u043e\u043b\u0430\",\"Angola\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value14\" = Table.ReplaceValue(#\"Replaced Value13\",\"\u0410\u043d\u0442\u0438\u0433\u0443\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430\",\"Antigua and Barbuda\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value15\" = Table.ReplaceValue(#\"Replaced Value14\",\"\u0410\u0440\u0433\u0435\u043d\u0442\u0438\u043d\u0430\",\"Argentina\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value16\" = Table.ReplaceValue(#\"Replaced Value15\",\"\u0410\u0440\u043c\u0435\u043d\u0438\u044f\",\"Armenia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value17\" = Table.ReplaceValue(#\"Replaced Value16\",\"\u0411\u0430\u0433\u0430\u043c\u044b\",\"Bahamas\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value18\" = Table.ReplaceValue(#\"Replaced Value17\",\"\u0411\u0430\u043d\u0433\u043b\u0430\u0434\u0435\u0448\",\"Bangladesh\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value19\" = Table.ReplaceValue(#\"Replaced Value18\",\"\u0411\u0430\u0440\u0431\u0430\u0434\u043e\u0441\",\"Barbados\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value20\" = Table.ReplaceValue(#\"Replaced Value19\",\"\u0411\u0430\u0445\u0440\u0435\u0439\u043d\",\"Bahrain\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value21\" = Table.ReplaceValue(#\"Replaced Value20\",\"\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u044c\",\"Belarus\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value22\" = Table.ReplaceValue(#\"Replaced Value21\",\"\u0411\u0435\u043b\u0438\u0437\",\"Belize\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value23\" = Table.ReplaceValue(#\"Replaced Value22\",\"\u0411\u0435\u043b\u044c\u0433\u0438\u044f\",\"Belgium\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value24\" = Table.ReplaceValue(#\"Replaced Value23\",\"\u0411\u0435\u043d\u0438\u043d\",\"Benin\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value25\" = Table.ReplaceValue(#\"Replaced Value24\",\"\u041a\u043e\u0442-\u0434'\u0418\u0432\u0443\u0430\u0440\",\"Ivory Coast\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value26\" = Table.ReplaceValue(#\"Replaced Value25\",\"\u0411\u043e\u043b\u0433\u0430\u0440\u0438\u044f\",\"Bulgaria\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value27\" = Table.ReplaceValue(#\"Replaced Value26\",\"\u0411\u043e\u043b\u0438\u0432\u0438\u044f\",\"Bolivia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value28\" = Table.ReplaceValue(#\"Replaced Value27\",\"\u0411\u043e\u0441\u043d\u0438\u044f \u0438 \u0413\u0435\u0440\u0446\u0435\u0433\u043e\u0432\u0438\u043d\u0430\",\"Bosnia and Herzegovina\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value29\" = Table.ReplaceValue(#\"Replaced Value28\",\"\u0411\u043e\u0442\u0441\u0432\u0430\u043d\u0430\",\"Botswana\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value30\" = Table.ReplaceValue(#\"Replaced Value29\",\"\u0411\u0440\u0430\u0437\u0438\u043b\u0438\u044f\",\"Brasilia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value31\" = Table.ReplaceValue(#\"Replaced Value30\",\"\u0411\u0443\u0440\u043a\u0438\u043d\u0430-\u0424\u0430\u0441\u043e\",\"Burkina Faso\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value32\" = Table.ReplaceValue(#\"Replaced Value31\",\"\u0411\u0443\u0440\u0443\u043d\u0434\u0438\",\"Burundi\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value33\" = Table.ReplaceValue(#\"Replaced Value32\",\"\u0411\u0443\u0442\u0430\u043d\",\"Bhutan\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value34\" = Table.ReplaceValue(#\"Replaced Value33\",\"\u0412\u0430\u043d\u0443\u0430\u0442\u0443\",\"Vanuatu\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value35\" = Table.ReplaceValue(#\"Replaced Value34\",\"\u0412\u0435\u043d\u0433\u0440\u0438\u044f\",\"Hungary\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value36\" = Table.ReplaceValue(#\"Replaced Value35\",\"\u0412\u0435\u043d\u0435\u0441\u0443\u044d\u043b\u0430\",\"Venezuela\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value37\" = Table.ReplaceValue(#\"Replaced Value36\",\"\u0412\u044c\u0435\u0442\u043d\u0430\u043c\",\"Vietnam\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value38\" = Table.ReplaceValue(#\"Replaced Value37\",\"\u0413\u0430\u0431\u043e\u043d\",\"Gabon\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value39\" = Table.ReplaceValue(#\"Replaced Value38\",\"\u0413\u0430\u0438\u0442\u0438\",\"Haiti\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value40\" = Table.ReplaceValue(#\"Replaced Value39\",\"\u0413\u0430\u043c\u0431\u0438\u044f\",\"Gambia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value41\" = Table.ReplaceValue(#\"Replaced Value40\",\"\u0413\u0430\u043d\u0430\",\"Ghana\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value42\" = Table.ReplaceValue(#\"Replaced Value41\",\"\u0413\u0432\u0430\u0434\u0435\u043b\u0443\u043f\u0430\",\"Guadeloupe\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value43\" = Table.ReplaceValue(#\"Replaced Value42\",\"\u0413\u0432\u0430\u0442\u0435\u043c\u0430\u043b\u0430\",\"Guatemala\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value44\" = Table.ReplaceValue(#\"Replaced Value43\",\"\u0413\u0432\u0438\u043d\u0435\u044f\",\"Guinea\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value45\" = Table.ReplaceValue(#\"Replaced Value44\",\"\u0413\u0435\u0440\u043c\u0430\u043d\u0438\u044f\",\"Germany\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value46\" = Table.ReplaceValue(#\"Replaced Value45\",\"\u0413\u043e\u043d\u0434\u0443\u0440\u0430\u0441\",\"Honduras\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value47\" = Table.ReplaceValue(#\"Replaced Value46\",\"\u0413\u0440\u0435\u043d\u0430\u0434\u0430\",\"Grenada\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value48\" = Table.ReplaceValue(#\"Replaced Value47\",\"\u0413\u0440\u0435\u0446\u0438\u044f\",\"Greece\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value49\" = Table.ReplaceValue(#\"Replaced Value48\",\"\u0413\u0440\u0443\u0437\u0438\u044f\",\"Georgia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value50\" = Table.ReplaceValue(#\"Replaced Value49\",\"\u0413\u0443\u0430\u043c\",\"Guam\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value51\" = Table.ReplaceValue(#\"Replaced Value50\",\"\u0414\u0430\u043d\u0438\u044f\",\"Denmark\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value52\" = Table.ReplaceValue(#\"Replaced Value51\",\"\u0414\u0435\u043c\u043e\u043a\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0420\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430 \u041a\u043e\u043d\u0433\u043e\",\"Democratic Republic of the Congo\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value53\" = Table.ReplaceValue(#\"Replaced Value52\",\"\u0414\u0436\u0438\u0431\u0443\u0442\u0438\",\"Djibouti\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value54\" = Table.ReplaceValue(#\"Replaced Value53\",\"\u0414\u043e\u043c\u0438\u043d\u0438\u043a\u0430\",\"Dominika\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value55\" = Table.ReplaceValue(#\"Replaced Value54\",\"Dominika\u043d\u0441\u043a\u0430\u044f \u0420\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430\",\"Dominikain Republic\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value56\" = Table.ReplaceValue(#\"Replaced Value55\",\"\u0415\u0433\u0438\u043f\u0435\u0442\",\"Egypt\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value57\" = Table.ReplaceValue(#\"Replaced Value56\",\"\u0417\u0430\u043c\u0431\u0438\u044f\",\"Zambia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value58\" = Table.ReplaceValue(#\"Replaced Value57\",\"\u0417\u0438\u043c\u0431\u0430\u0431\u0432\u0435\",\"Zimbabwe\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value59\" = Table.ReplaceValue(#\"Replaced Value58\",\"\u0418\u0437\u0440\u0430\u0438\u043b\u044c\",\"Israel\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value60\" = Table.ReplaceValue(#\"Replaced Value59\",\"\u0418\u043d\u0434\u0438\u044f\",\"India\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value61\" = Table.ReplaceValue(#\"Replaced Value60\",\"\u0418\u043d\u0434\u043e\u043d\u0435\u0437\u0438\u044f\",\"Indonesia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value62\" = Table.ReplaceValue(#\"Replaced Value61\",\"\u0418\u043e\u0440\u0434\u0430\u043d\u0438\u044f\",\"Jordan\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value63\" = Table.ReplaceValue(#\"Replaced Value62\",\"\u0418\u0440\u0430\u043d\",\"Iran\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value64\" = Table.ReplaceValue(#\"Replaced Value63\",\"\u0418\u0440\u043b\u0430\u043d\u0434\u0438\u044f\",\"Ireland\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value65\" = Table.ReplaceValue(#\"Replaced Value64\",\"\u0418\u0441\u043b\u0430\u043d\u0434\u0438\u044f\",\"Iceland\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value66\" = Table.ReplaceValue(#\"Replaced Value65\",\"\u0418\u0441\u043f\u0430\u043d\u0438\u044f\",\"Spain\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value67\" = Table.ReplaceValue(#\"Replaced Value66\",\"\u0418\u0442\u0430\u043b\u0438\u044f\",\"Italy\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value68\" = Table.ReplaceValue(#\"Replaced Value67\",\"\u0419\u0435\u043c\u0435\u043d\",\"Yemen\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value69\" = Table.ReplaceValue(#\"Replaced Value68\",\"\u041a\u0430\u0431\u043e-\u0412\u0435\u0440\u0434\u0435\",\"Cape Verde\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value70\" = Table.ReplaceValue(#\"Replaced Value69\",\"\u041a\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043d\",\"Kazakhstan\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value71\" = Table.ReplaceValue(#\"Replaced Value70\",\"\u041a\u0430\u043c\u0431\u043e\u0434\u0436\u0430\",\"Cambodia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value72\" = Table.ReplaceValue(#\"Replaced Value71\",\"\u041a\u0430\u043c\u0435\u0440\u0443\u043d\",\"Cameroon\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value73\" = Table.ReplaceValue(#\"Replaced Value72\",\"\u041a\u0430\u043d\u0430\u0434\u0430\",\"Canada\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value74\" = Table.ReplaceValue(#\"Replaced Value73\",\"\u041a\u0430\u0442\u0430\u0440\",\"Qatar\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value75\" = Table.ReplaceValue(#\"Replaced Value74\",\"\u041a\u0435\u043d\u0438\u044f\",\"Kenya\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value76\" = Table.ReplaceValue(#\"Replaced Value75\",\"\u041a\u0438\u043f\u0440\",\"Cyprus\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value77\" = Table.ReplaceValue(#\"Replaced Value76\",\"\u041a\u0438\u0440\u0438\u0431\u0430\u0442\u0438\",\"Kiribati\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value78\" = Table.ReplaceValue(#\"Replaced Value77\",\"\u041a\u0438\u0442\u0430\u0439\",\"China\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value79\" = Table.ReplaceValue(#\"Replaced Value78\",\"\u041a\u043e\u043b\u0443\u043c\u0431\u0438\u044f\",\"Colombia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value80\" = Table.ReplaceValue(#\"Replaced Value79\",\"\u041a\u043e\u043c\u043e\u0440\u0441\u043a\u0438\u0435 \u043e\u0441\u0442\u0440\u043e\u0432\u0430\",\"Comoros\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value81\" = Table.ReplaceValue(#\"Replaced Value80\",\"\u041a\u043e\u0441\u0442\u0430-\u0420\u0438\u043a\u0430\",\"Costa Rica\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value82\" = Table.ReplaceValue(#\"Replaced Value81\",\"\u041a\u0443\u0431\u0430\",\"Cuba\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value83\" = Table.ReplaceValue(#\"Replaced Value82\",\"\u041a\u0443\u0432\u0435\u0439\u0442\",\"Kuwait\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value84\" = Table.ReplaceValue(#\"Replaced Value83\",\"\u041a\u044b\u0440\u0433\u044b\u0437\u0441\u0442\u0430\u043d\",\"Kyrgyzstan\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value85\" = Table.ReplaceValue(#\"Replaced Value84\",\"\u041b\u0430\u043e\u0441\",\"Laos\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value86\" = Table.ReplaceValue(#\"Replaced Value85\",\"\u041b\u0430\u0442\u0432\u0438\u044f\",\"Latvian\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value87\" = Table.ReplaceValue(#\"Replaced Value86\",\"\u041b\u0435\u0441\u043e\u0442\u043e\",\"Lesotho\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value88\" = Table.ReplaceValue(#\"Replaced Value87\",\"\u041b\u0438\u0431\u0435\u0440\u0438\u044f\",\"Liberia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value89\" = Table.ReplaceValue(#\"Replaced Value88\",\"\u041b\u0438\u0432\u0430\u043d\",\"Lebanon\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value90\" = Table.ReplaceValue(#\"Replaced Value89\",\"\u041b\u0438\u0442\u0432\u0430\",\"Lithuania\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value91\" = Table.ReplaceValue(#\"Replaced Value90\",\"\u041b\u044e\u043a\u0441\u0435\u043c\u0431\u0443\u0440\u0433\",\"Luxembourg\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value92\" = Table.ReplaceValue(#\"Replaced Value91\",\"\u041c\u0430\u0432\u0440\u0438\u043a\u0438\u0439\",\"Mauritius\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value93\" = Table.ReplaceValue(#\"Replaced Value92\",\"\u041c\u0430\u0432\u0440\u0438\u0442\u0430\u043d\u0438\u044f\",\"Mauritania\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value94\" = Table.ReplaceValue(#\"Replaced Value93\",\"\u041c\u0430\u0434\u0430\u0433\u0430\u0441\u043a\u0430\u0440\",\"Madagascar\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value95\" = Table.ReplaceValue(#\"Replaced Value94\",\"\u041c\u0430\u043b\u0430\u0432\u0438\",\"Malawi\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value96\" = Table.ReplaceValue(#\"Replaced Value95\",\"\u041c\u0430\u043b\u0430\u0439\u0437\u0438\u044f\",\"Malaysia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value97\" = Table.ReplaceValue(#\"Replaced Value96\",\"\u041c\u0430\u043b\u0438\",\"Mali\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value98\" = Table.ReplaceValue(#\"Replaced Value97\",\"\u041c\u0430\u043b\u044c\u0434\u0438\u0432\u044b\",\"Maldives\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value99\" = Table.ReplaceValue(#\"Replaced Value98\",\"\u041c\u0430\u043b\u044c\u0442\u0430\",\"Malta\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value100\" = Table.ReplaceValue(#\"Replaced Value99\",\"\u041c\u0430\u0440\u0442\u0438\u043d\u0438\u043a\u0430\",\"Martinique\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value101\" = Table.ReplaceValue(#\"Replaced Value100\",\"\u041c\u0435\u043a\u0441\u0438\u043a\u0430\",\"Mexico\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value102\" = Table.ReplaceValue(#\"Replaced Value101\",\"\u041c\u043e\u0437\u0430\u043c\u0431\u0438\u043a\",\"Mozambique\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value103\" = Table.ReplaceValue(#\"Replaced Value102\",\"\u041c\u043e\u043b\u0434\u043e\u0432\u0430\",\"Moldova\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value104\" = Table.ReplaceValue(#\"Replaced Value103\",\"\u041c\u043e\u043d\u0433\u043e\u043b\u0438\u044f\",\"Mongolia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value105\" = Table.ReplaceValue(#\"Replaced Value104\",\"\u041c\u044c\u044f\u043d\u043c\u0430\",\"Myanmar\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value106\" = Table.ReplaceValue(#\"Replaced Value105\",\"\u041d\u0430\u043c\u0438\u0431\u0438\u044f\",\"Namibia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value107\" = Table.ReplaceValue(#\"Replaced Value106\",\"\u041d\u0435\u043f\u0430\u043b\",\"Nepal\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value108\" = Table.ReplaceValue(#\"Replaced Value107\",\"\u041d\u0438\u0433\u0435\u0440\",\"Niger\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value109\" = Table.ReplaceValue(#\"Replaced Value108\",\"\u041d\u0438\u0434\u0435\u0440\u043b\u0430\u043d\u0434\u044b\",\"Netherlands\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value110\" = Table.ReplaceValue(#\"Replaced Value109\",\"\u041d\u0438\u043a\u0430\u0440\u0430\u0433\u0443\u0430\",\"Nicaragua\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value111\" = Table.ReplaceValue(#\"Replaced Value110\",\"\u041d\u043e\u0432\u0430\u044f \u0417\u0435\u043b\u0430\u043d\u0434\u0438\u044f\",\"New Zealand\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value112\" = Table.ReplaceValue(#\"Replaced Value111\",\"\u041d\u043e\u0432\u0430\u044f \u041a\u0430\u043b\u0435\u0434\u043e\u043d\u0438\u044f\",\"New Caledonia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value113\" = Table.ReplaceValue(#\"Replaced Value112\",\"\u041d\u043e\u0440\u0432\u0435\u0433\u0438\u044f\",\"Norway\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value114\" = Table.ReplaceValue(#\"Replaced Value113\",\"\u0412\u0435\u043b\u0438\u043a\u043e\u0431\u0440\u0438\u0442\u0430\u043d\u0438\u044f\",\"Great Britain\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value115\" = Table.ReplaceValue(#\"Replaced Value114\",\"\u041e\u0410\u042d\",\"UAE\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value116\" = Table.ReplaceValue(#\"Replaced Value115\",\"\u041e\u043c\u0430\u043d\",\"Oman\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value117\" = Table.ReplaceValue(#\"Replaced Value116\",\"\u041f\u0430\u043a\u0438\u0441\u0442\u0430\u043d\",\"Pakistan\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value118\" = Table.ReplaceValue(#\"Replaced Value117\",\"\u041f\u0430\u043d\u0430\u043c\u0430\",\"Panama\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value119\" = Table.ReplaceValue(#\"Replaced Value118\",\"\u041f\u0430\u0440\u0430\u0433\u0432\u0430\u0439\",\"Paraguay\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value120\" = Table.ReplaceValue(#\"Replaced Value119\",\"\u041f\u0430\u043f\u0443\u0430 - \u041d\u043e\u0432\u0430\u044f Guinea\",\"Papua New Guinea\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value121\" = Table.ReplaceValue(#\"Replaced Value120\",\"\u041f\u0435\u0440\u0443\",\"Peru\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value122\" = Table.ReplaceValue(#\"Replaced Value121\",\"\u041f\u043e\u043b\u044c\u0448\u0430\",\"Poland\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value123\" = Table.ReplaceValue(#\"Replaced Value122\",\"\u041f\u043e\u0440\u0442\u0443\u0433\u0430\u043b\u0438\u044f\",\"Portugal\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value124\" = Table.ReplaceValue(#\"Replaced Value123\",\"\u0420\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430 \u041a\u043e\u043d\u0433\u043e\",\"Republic of the Congo\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value125\" = Table.ReplaceValue(#\"Replaced Value124\",\"\u0420\u043e\u0441\u0441\u0438\u044f\",\"Russia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value126\" = Table.ReplaceValue(#\"Replaced Value125\",\"\u0420\u0443\u0430\u043d\u0434\u0430\",\"Rwanda\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value127\" = Table.ReplaceValue(#\"Replaced Value126\",\"\u0420\u0443\u043c\u044b\u043d\u0438\u044f\",\"Romania\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value128\" = Table.ReplaceValue(#\"Replaced Value127\",\"\u0421\u0430\u043d-\u0422\u043e\u043c\u0435 \u0438 \u041f\u0440\u0438\u043d\u0441\u0438\u043f\u0438\",\"Sao Tome and Principe\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value129\" = Table.ReplaceValue(#\"Replaced Value128\",\"\u0421\u0430\u0443\u0434\u043e\u0432\u0441\u043a\u0430\u044f \u0410\u0440\u0430\u0432\u0438\u044f\",\"Saudi Arabia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value130\" = Table.ReplaceValue(#\"Replaced Value129\",\"\u0421\u0432\u044f\u0442\u043e\u0439 \u0412\u0438\u043d\u0441\u0435\u043d\u0442 \u0438 \u0413\u0440\u0435\u043d\u0430\u0434\u0438\u043d\u044b\",\"Saint Vincent and the Grenadines\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value131\" = Table.ReplaceValue(#\"Replaced Value130\",\"\u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u041a\u043e\u0440\u0435\u044f\",\"North Korea\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value132\" = Table.ReplaceValue(#\"Replaced Value131\",\"\u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0438\u044f\",\"Northern Macedonia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value133\" = Table.ReplaceValue(#\"Replaced Value132\",\"\u0421\u0435\u0439\u0448\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043e\u0441\u0442\u0440\u043e\u0432\u0430\",\"Seychelles\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value134\" = Table.ReplaceValue(#\"Replaced Value133\",\"\u0421\u0435\u043d\u0435\u0433\u0430\u043b\",\"Senegal\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value135\" = Table.ReplaceValue(#\"Replaced Value134\",\"\u0421\u0435\u043d\u0442-\u041a\u0438\u0442\u0441 \u0438 \u041d\u0435\u0432\u0438\u0441\",\"Saint Kitts and Nevis\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value136\" = Table.ReplaceValue(#\"Replaced Value135\",\"\u0421\u0435\u043d\u0442-\u041b\u044e\u0441\u0438\u044f\",\"Saint Lucia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value137\" = Table.ReplaceValue(#\"Replaced Value136\",\"\u0421\u0435\u0440\u0431\u0438\u044f\",\"Serbia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value138\" = Table.ReplaceValue(#\"Replaced Value137\",\"\u0421\u0438\u043d\u0433\u0430\u043f\u0443\u0440\",\"Singapore\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value139\" = Table.ReplaceValue(#\"Replaced Value138\",\"\u0421\u0438\u0440\u0438\u044f\",\"Syria\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value140\" = Table.ReplaceValue(#\"Replaced Value139\",\"\u0421\u043b\u043e\u0432\u0430\u043a\u0438\u044f\",\"Slovakia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value141\" = Table.ReplaceValue(#\"Replaced Value140\",\"\u0421\u043b\u043e\u0432\u0435\u043d\u0438\u044f\",\"Slovenia\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value142\" = Table.ReplaceValue(#\"Replaced Value141\",\"\u0421\u0428\u0410\",\"The USA\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value143\" = Table.ReplaceValue(#\"Replaced Value142\",\"\u0421\u043e\u043b\u043e\u043c\u043e\u043d\u043e\u0432\u044b \u043e\u0441\u0442\u0440\u043e\u0432\u0430\",\"Solomon Islands\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value144\" = Table.ReplaceValue(#\"Replaced Value143\",\"\u0421\u0443\u0434\u0430\u043d\",\"Sudan\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value145\" = Table.ReplaceValue(#\"Replaced Value144\",\"\u0421\u044c\u0435\u0440\u0440\u0430-\u041b\u0435\u043e\u043d\u0435\",\"Sierra Leone\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value146\" = Table.ReplaceValue(#\"Replaced Value145\",\"\u0422\u0430\u0434\u0436\u0438\u043a\u0438\u0441\u0442\u0430\u043d\",\"Tajikistan\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value147\" = Table.ReplaceValue(#\"Replaced Value146\",\"\u0422\u0430\u0438\u043b\u0430\u043d\u0434\",\"Thailand\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value148\" = Table.ReplaceValue(#\"Replaced Value147\",\"\u0422\u0430\u043d\u0437\u0430\u043d\u0438\u044f\",\"Tanzania\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value149\" = Table.ReplaceValue(#\"Replaced Value148\",\"\u0422\u0438\u043c\u043e\u0440-\u041b\u0435\u0448\u0442\u0438\",\"Timor-Leste\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value150\" = Table.ReplaceValue(#\"Replaced Value149\",\"\u0422\u0440\u0438\u043d\u0438\u0434\u0430\u0434 \u0438 \u0422\u043e\u0431\u0430\u0433\u043e\",\"Trinidad and Tobago\",Replacer.ReplaceText,{\"\u0421\u0442\u0440\u0430\u043d\u0430\"}),\n    #\"Replaced Value151\" = Table.ReplaceValue(#\"Replaced Value150\",\"\u0430\u0437\u0438\u044f\",\"Asia\",Replacer.ReplaceText,{\"\u0420\u0435\u0433\u0438\u043e\u043d\"})\nin\n    #\"Replaced Value151\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WujD/YtOFHRfbLmxQitUBcidf2Hdh08X+C1su7LiwFya48MImMBcqFAsA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"\u0412\u0438\u0434 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\" = _t]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a,{{\"\u0412\u0438\u0434 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\", type text}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\",\"\u041f\u0442\u0438\u0446\u0430\",\"poultry\",Replacer.ReplaceText,{\"\u0412\u0438\u0434 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u0413\u043e\u0432\u044f\u0434\u0438\u043d\u0430\",\"beef\",Replacer.ReplaceText,{\"\u0412\u0438\u0434 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u0421\u0432\u0438\u043d\u0438\u043d\u0430\",\"pork\",Replacer.ReplaceText,{\"\u0412\u0438\u0434 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438\"})\nin\n    #\"Replaced Value2\"", "let\n    Source = Excel.Workbook(File.Contents(\"F:\\Andrew_UN.xlsx\"), null, true),\n    Location_Sheet = Source{[Item=\"Location\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Location_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"country\", type text}, {\"latitude\", type number}, {\"longitude\", type number}, {\"name\", type text}, {\"Column5\", type any}, {\"Column6\", type any}, {\"Column7\", type any}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column7\", \"Column5\", \"Column6\"})\nin\n    #\"Removed Columns\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"F:\\Andrew_UN.xlsx\"), null, true),\n    Organization_Sheet = Source{[Item=\"Organization\",Kind=\"Sheet\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(Organization_Sheet,{{\"Column1\", type text}, {\"Column2\", type text}}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each ([Column1] <> \"Organization\")),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered Rows\",{{\"Column2\", \"Organization Full Name\"}, {\"Column1\", \"Organization\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Excel.Workbook(File.Contents(\"F:\\Andrew_UN.xlsx\"), null, true),\n    #\"UNVolunteer Data_Sheet\" = Source{[Item=\"UNVolunteer Data\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"UNVolunteer Data_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Volunteer Id\", Int64.Type}, {\"Region\", type text}, {\"Country\", type text}, {\"Organization\", type text}, {\"Job Title\", type text}, {\"Assignment Type\", type text}, {\"Volunteer Type\", type text}, {\"Nationality\", type text}, {\"Gender\", type text}, {\"Age\", Int64.Type}, {\"Contract Start\", type date}, {\"Contract End\", type date}, {\"Assignment Duration\", Int64.Type}, {\"Age Groups\", type text}})\nin\n    #\"Changed Type\"", "CALENDARAUTO(6)", "Calendar(Date(Year(MIN('Dates'[Date])), 1, 1), Date(Year(MAX('Dates'[Date])), 12, 31))", "let\n    #\"Added Index\" = Table.AddIndexColumn(RawEvents, \"Index\", 0, 1),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Index\",{{\"Index\", \"RawIndex\"}}),\n    #\"Removed Duplicates\" = Table.Distinct(#\"Renamed Columns\", {\"id\"})\nin\n    #\"Removed Duplicates\"", "UNION(\n            SELECTCOLUMNS(\n                VALUES('Events'),\n                \"event_type\", 'Events'[event_type],\n                \"id\", 'Events'[id],\n                \"EdgePath\", 'Events'[Path] & \"|000-Begin\",\n                \"Root\", 'Events'[Root],\n                \"timestamp\", 'Events'[start],\n                \"marker\", \"Begin\",\n                \"Duration\", BLANK()\n            ),\n            SELECTCOLUMNS(\n                FILTER(VALUES('Events'), NOT(ISBLANK([end]))),\n                \"event_type\", 'Events'[event_type],\n                \"id\", 'Events'[id],\n                \"EdgePath\", 'Events'[Path] & \"|999-End\",\n                \"Root\", 'Events'[Root],\n                \"timestamp\", 'Events'[end],\n                \"marker\", \"End\",\n                \"Duration\", 'Events'[DurationMs]\n            )\n        )", "\nVAR _Roots = ADDCOLUMNS(\n    FILTER(\n    Events, \n    [RawIndex] = [Root]),\n    \"ActionType\", SWITCH(TRUE, \n                    [component] = \"Report Canvas\" && [name] = \"Visual Container Lifecycle\", \"Visual\",\n                    [component] = \"Report Canvas\" && [name] = \"User Action\", \"User Action\",\n                    [component] = \"Change Detection\" && [name] = \"Execute Change Detection\", \"Change Detection\",\n                    \"Other\"\n                    )\n    )\nRETURN SELECTCOLUMNS(\n    _Roots,\n    \"Root\", [Root],\n    \"ActionType\", [ActionType],\n    \"Action Label\", [Index] & \" \" & SWITCH([ActionType], \n                                \"Visual\", \"Visual: \" & [visualTitle],\n                                \"User Action\", \"User Action: \" & IF(LEFT([sourceLabel], 11) = \"UserAction_\", RIGHT([sourceLabel], LEN([sourceLabel]) - 11), [sourceLabel]),\n                                \"Change Detection\", \"Change Detection: \" & [changeDetectionMeasure],\n                                [ActionType]\n                                ),\n    \"Order\", [Rank] + IF([name] = \"User Action\", 0, 0.1)\n    )", "let\n    Source = PerfLogFilePath,\n    #\"Converted to Table\" = #table(1, {{Source}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Converted to Table\",{{\"Column1\", \"FilePath\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"FilePath\", type text}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"RawEventCount\", each Table.RowCount(RawEvents), type number),\n    #\"Added Custom1\" = Table.AddColumn(#\"Added Custom\", \"UniqueEventCount\", each Table.RowCount(Events), type number)\nin\n    #\"Added Custom1\"", "let\n    SelectedColumns = Table.SelectColumns(RawEvents, {\"name\", \"component\", \"event_type\"}),\n    #\"Removed Duplicates\" = Table.Distinct(SelectedColumns, {\"event_type\"})\nin\n    #\"Removed Duplicates\"", "let\n    Source = Csv.Document(Web.Contents(\"https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\"),[Delimiter=\",\", Columns=28, Encoding=65001, QuoteStyle=QuoteStyle.None]),\n    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"AtomicNumber\", Int64.Type}, {\"Element\", type text}, {\"Symbol\", type text}, {\"AtomicMass\", type number}, {\"NumberofNeutrons\", Int64.Type}, {\"NumberofProtons\", Int64.Type}, {\"NumberofElectrons\", Int64.Type}, {\"Period\", Int64.Type}, {\"Group\", Int64.Type}, {\"Phase\", type text}, {\"Radioactive\", type text}, {\"Natural\", type text}, {\"Metal\", type text}, {\"Nonmetal\", type text}, {\"Metalloid\", type text}, {\"Type\", type text}, {\"AtomicRadius\", type number}, {\"Electronegativity\", type number}, {\"FirstIonization\", type number}, {\"Density\", type number}, {\"MeltingPoint\", type number}, {\"BoilingPoint\", type number}, {\"NumberOfIsotopes\", Int64.Type}, {\"Discoverer\", type text}, {\"Year\", Int64.Type}, {\"SpecificHeat\", type number}, {\"NumberofShells\", Int64.Type}, {\"NumberofValence\", Int64.Type}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"AtomicMass\", \"Atomic Mass\"}, {\"AtomicNumber\", \"Atomic Number\"}, {\"AtomicRadius\", \"Atomic Radius\"}, {\"BoilingPoint\", \"Boiling Point\"}, {\"MeltingPoint\", \"Melting Point\"}}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Renamed Columns\", {\"Atomic Number\"}, data, {\"atomicNumber\"}, \"data\", JoinKind.LeftOuter),\n    #\"Expanded data\" = Table.ExpandTableColumn(#\"Merged Queries\", \"data\", {\" bondingType\", \" groupBlock\", \" ionizationEnergy\", \" electronAffinity\"}, {\"Bonding Type\", \"Group Block\",\"Ionization Energy\", \"Electron Affinity\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Expanded data\",{{\"Group Block\", \"Element Group Block\"}, {\"SpecificHeat\", \"Specific Heat\"}, {\"Boiling Point\", \"Boiling Point\"}, {\"Melting Point\", \"Melting Point\"}, {\"Ionization Energy\", \"Ionization Energy\"}, {\"Atomic Radius\", \"Atomic Radius\"}})\nin\n    #\"Renamed Columns1\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"Vc2xCgIxEATQXwmp/YkTD7Q4ESzDFTFswkBuV5JV0K83RFNY7mNnxjk7qWwI5vzYblTsunN2zhS0CJspRjD01fX3t/ha+70XZHAyFwFrl4Wy/suBuI78aKXkFc+hJ2G8G7S1mamkr17vFBDb2pF8a1o/\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"X Axis Selection\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"X Axis Selection\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = #\"X Axis\",\n    #\"Renamed Columns\" = Table.RenameColumns(Source,{{\"X Axis Selection\", \"Y Axis Selection\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = #\"X Axis\",\n    #\"Renamed Columns\" = Table.RenameColumns(Source,{{\"X Axis Selection\", \"Property Selection\"}})\nin\n    #\"Renamed Columns\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\6vmodule\\Raw data farm_rus.xlsx\"), null, true),\n    #\"data for update_Sheet\" = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"data for update\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(#\"data for update_Sheet\", [PromoteAllScalars=true]),\n    #\"\u0417\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438\" = Table.ReplaceErrorValues(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\", {{\"Latitude\", null}, {\"Longitude\", null}, {\"Accuracy\", null}}),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u0417\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438\",{{\"ActivityID\", type text}, {\"EventType\", type text}, {\"Day\", Int64.Type}, {\"Week\", Int64.Type}, {\"Month\", Int64.Type}, {\"DateName\", type text}, {\"VisitNumberClient\", type any}, {\"StartTime\", type datetime}, {\"EndTime\", type datetime}, {\"DurationMinutes\", Int64.Type}, {\"UniqueId\", type text}, {\"BusinessUnit\", type text}, {\"Team\", type text}, {\"SLM_FullName\", type text}, {\"SLM_Position\", type text}, {\"SLM_AgentId\", Int64.Type}, {\"FLM_FullName\", type text}, {\"FLM_Position\", type text}, {\"FLM_AgentId\", Int64.Type}, {\"MR_FullName\", type text}, {\"MR_Position\", type text}, {\"MR_AgentId\", Int64.Type}, {\"CompanyID\", Int64.Type}, {\"ClientID\", Int64.Type}, {\"PersonID\", Int64.Type}, {\"Client\", type text}, {\"Speciality\", type text}, {\"TargetGroup\", type text}, {\"TargetGroupAddon\", type text}, {\"Category\", type text}, {\"Company\", type text}, {\"CompanyType\", type text}, {\"Region1\", type text}, {\"Region2\", type text}, {\"Region3\", type any}, {\"City\", type text}, {\"Address\", type text}, {\"IsCompleted\", Int64.Type}, {\"IsDoubleCall\", Int64.Type}, {\"Latitude\", type text}, {\"Longitude\", type text}, {\"Accuracy\", type text}, {\"LocationTime\", type datetime}, {\"Docs-Pharms\", type text}, {\"Notes\", type text}, {\"CallDuration\", Int64.Type}, {\"EmailSent\", Int64.Type}, {\"Reaction\", type text}, {\"RetryCount\", Int64.Type}, {\"ClmShown\", Int64.Type}, {\"PresentationName\", type text}, {\"Yesterday\", type any}, {\"Clients_with_consents\", Int64.Type}, {\"Clients_with_consents_ALL\", Int64.Type}, {\"CLM_Email\", type text}, {\"CLM_Phone\", type text}, {\"CollectedOn\", type datetime}, {\"CallType\", type text}, {\"\u0421\u043e\u0433\u043b\u0430\u0441\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e?\", type text}, {\"Old_Medznat\", Int64.Type}, {\"New_Medznat\", Int64.Type}, {\"Date_CreatedOn_Medznat\", type datetime}, {\"CollectedOn_ANYBODY_Call\", Int64.Type}, {\"Date_CollectedOnCall\", type date}, {\"ContactPhone\", type text}, {\"cnt_email\", type text}}),\n    #\"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c\" = Table.SelectRows(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\", each [ActivityID] <> null),\n    #\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\" = Table.AddColumn(#\"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c\", \"\u0413\u043e\u0434\", each Date.Year([StartTime])),\n    #\"\u0412\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e: \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\" = Table.AddColumn(#\"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\", \"\u0414\u0430\u0442\u0430\", each Text.Combine({Text.From([Day], \"ru-RU\"), Text.From([Month], \"ru-RU\"), Text.From([\u0413\u043e\u0434], \"ru-RU\")}, \"#(tab)\"), type text),\n    #\"\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0434\u0430\u0442\u0430\" = Table.TransformColumns(#\"\u0412\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e: \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\",{{\"\u0414\u0430\u0442\u0430\", each Date.From(DateTimeZone.From(_)), type date}}),\n    #\"\u0417\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\" = Table.ReplaceValue(#\"\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0434\u0430\u0442\u0430\",null,\"\u043d\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0445\",Replacer.ReplaceValue,{\"Reaction\"}),\n    #\"\u0417\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u04351\" = Table.ReplaceValue(#\"\u0417\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\",\"NULL\",\"\u041d\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0445\",Replacer.ReplaceText,{\"Category\"}),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f1\" = Table.TransformColumnTypes(#\"\u0417\u0430\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u04351\",{{\"plan\", type number}, {\"fact\", type number}, {\"planContact\", type number}}),\n    #\"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c1\" = Table.SelectRows(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f1\", each ([City] <> \"\u0411\u043e\u0440\" and [City] <> \"\u0413\u043e\u0440\u043e\u0434\u0438\u0449\u0435\" and [City] <> \"\u0413\u043e\u0440\u043e\u0434\u0438\u0449\u0435 \u0440\u043f\" and [City] <> \"\u041a\u0430\u043d\u0430\u0448\" and [City] <> \"\u041a\u043e\u043b\u0430\" and [City] <> \"\u041b\u0443\u0433\u0430\" and [City] <> \"\u041c\u0443\u0440\u0438\u043d\u043e\")),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c1\",\"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\",\"Administration\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"\u0422\u0435\u0440\u0430\u043f\u0438\u044f\",\"Therapy\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"\u041d\u0435\u0432\u0440\u043e\u043b\u043e\u0433\u0438\u044f\",\"Neurology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"\u041f\u0435\u0434\u0438\u0430\u0442\u0440\u0438\u044f\",\"Pediatrics\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"\u0413\u0430\u0441\u0442\u0440\u043e\u044d\u043d\u0442\u0435\u0440\u043e\u043b\u043e\u0433\u0438\u044f\",\"Gastroenterology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"\u0410\u043a\u0443\u0448\u0435\u0440\u0441\u0442\u0432\u043e \u0438 \u0433\u0438\u043d\u0435\u043a\u043e\u043b\u043e\u0433\u0438\u044f\",\"Obstetrics and gynecology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value6\" = Table.ReplaceValue(#\"Replaced Value5\",\"\u0414\u0435\u0440\u043c\u0430\u0442\u043e\u043b\u043e\u0433\u0438\u044f\",\"Dermatology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value7\" = Table.ReplaceValue(#\"Replaced Value6\",\"\u041e\u0442\u043e\u0440\u0438\u043d\u043e\u043b\u0430\u0440\u0438\u043d\u0433\u043e\u043b\u043e\u0433\u0438\u044f\",\"Otorhinolaryngology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value8\" = Table.ReplaceValue(#\"Replaced Value7\",\"\u041e\u0431\u0449\u0430\u044f \u0432\u0440\u0430\u0447\u0435\u0431\u043d\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 (\u0441\u0435\u043c\u0435\u0439\u043d\u0430\u044f \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0430)\",\"General practice (family medicine)\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value9\" = Table.ReplaceValue(#\"Replaced Value8\",\"\u0420\u0435\u0432\u043c\u0430\u0442\u043e\u043b\u043e\u0433\u0438\u044f\",\"Rheumatology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value10\" = Table.ReplaceValue(#\"Replaced Value9\",\"\u0422\u0440\u0430\u0432\u043c\u0430\u0442\u043e\u043b\u043e\u0433\u0438\u044f \u0438 \u043e\u0440\u0442\u043e\u043f\u0435\u0434\u0438\u044f\",\"Traumatology and Orthopedics\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value11\" = Table.ReplaceValue(#\"Replaced Value10\",\"\u0421\u0442\u043e\u043c\u0430\u0442\u043e\u043b\u043e\u0433\u0438\u044f \u0442\u0435\u0440\u0430\u043f\u0435\u0432\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f\",\"Therapeutic dentistry\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value12\" = Table.ReplaceValue(#\"Replaced Value11\",\"\u0425\u0438\u0440\u0443\u0440\u0433\u0438\u044f\",\"Surgery\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value13\" = Table.ReplaceValue(#\"Replaced Value12\",\"\u0424\u0430\u0440\u043c\u0430\u0446\u0438\u044f\",\"Pharmacy\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value14\" = Table.ReplaceValue(#\"Replaced Value13\",\"\u0422\u0440\u0430\u0432\u043c\u0430\u0442\u043e\u043b\u043e\u0433\u0438\u044f\",\"Traumatology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value15\" = Table.ReplaceValue(#\"Replaced Value14\",\"\u0421\u0442\u043e\u043c\u0430\u0442\u043e\u043b\u043e\u0433\u0438\u044f \u0425\u0438\u0440\u0443\u0440\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f\",\"Dentistry Surgical\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value16\" = Table.ReplaceValue(#\"Replaced Value15\",\"\u041f\u0440\u043e\u0432\u0438\u0437\u043e\u0440\",\"Pharmacist\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Replaced Value16\", each true),\n    #\"Sorted Rows\" = Table.Sort(#\"Filtered Rows\",{{\"Speciality\", Order.Descending}}),\n    #\"Replaced Value17\" = Table.ReplaceValue(#\"Sorted Rows\",\"\u041e\u0440\u0442\u043e\u043f\u0435\u0434\u0438\u044f\",\"Orthopedics\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value18\" = Table.ReplaceValue(#\"Replaced Value17\",\"\u041a\u0430\u0440\u0434\u0438\u043e\u0440\u0435\u0432\u043c\u0430\u0442\u043e\u043b\u043e\u0433\u0438\u044f\",\"Cardiorheumatology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value19\" = Table.ReplaceValue(#\"Replaced Value18\",\"\u0413\u0438\u043d\u0435\u043a\u043e\u043b\u043e\u0433\u0438\u044f\",\"Gynecology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Replaced Value20\" = Table.ReplaceValue(#\"Replaced Value19\",\"\u0410\u043b\u043b\u0435\u0440\u0433\u043e\u043b\u043e\u0433\u0438\u044f \u0438 \u0418\u043c\u043c\u0443\u043d\u043e\u043b\u043e\u0433\u0438\u044f\",\"Allergology and Immunology\",Replacer.ReplaceText,{\"Speciality\"}),\n    #\"Sorted Rows1\" = Table.Sort(#\"Replaced Value20\",{{\"Speciality\", Order.Ascending}}),\n    #\"Replaced Value21\" = Table.ReplaceValue(#\"Sorted Rows1\",\"\u0415\u043b\u0435\u0446\",\"Dace\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value22\" = Table.ReplaceValue(#\"Replaced Value21\",\"\u0423\u043b\u044c\u044f\u043d\u043e\u0432\u0441\u043a\",\"Ulyanovsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value23\" = Table.ReplaceValue(#\"Replaced Value22\",\"\u041c\u043e\u0441\u043a\u0432\u0430\",\"Moscow\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value24\" = Table.ReplaceValue(#\"Replaced Value23\",\"\u0420\u044f\u0437\u0430\u043d\u044c\",\"Ryazan\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value25\" = Table.ReplaceValue(#\"Replaced Value24\",\"\u0413\u0443\u0441\u044c-\u0425\u0440\u0443\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0439\",\"Gus-Khrustalny\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value26\" = Table.ReplaceValue(#\"Replaced Value25\",\"\u0411\u0435\u043b\u0430\u044f \u041a\u0430\u043b\u0438\u0442\u0432\u0430\",\"Belaya Kalitva\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value27\" = Table.ReplaceValue(#\"Replaced Value26\",\"\u0421\u0430\u0440\u0430\u043d\u0441\u043a\",\"Saransk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value28\" = Table.ReplaceValue(#\"Replaced Value27\",\"\u0414\u0437\u0435\u0440\u0436\u0438\u043d\u0441\u043a\",\"Dzerzhinsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value29\" = Table.ReplaceValue(#\"Replaced Value28\",\"\u0424\u0440\u044f\u0437\u0438\u043d\u043e\",\"Fryazino\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value30\" = Table.ReplaceValue(#\"Replaced Value29\",\"\u0421\u0435\u043c\u0438\u043a\u0430\u0440\u0430\u043a\u043e\u0440\u0441\u043a\",\"Semikarakorsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value31\" = Table.ReplaceValue(#\"Replaced Value30\",\"\u0421\u043e\u043a\u043e\u043b\",\"Sokol\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value32\" = Table.ReplaceValue(#\"Replaced Value31\",\"\u041b\u044b\u0441\u044c\u0432\u0430\",\"Lysva\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value33\" = Table.ReplaceValue(#\"Replaced Value32\",\"\u041f\u043e\u0434\u043e\u043b\u044c\u0441\u043a\",\"Podolsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value34\" = Table.ReplaceValue(#\"Replaced Value33\",\"\u0410\u043d\u0433\u0430\u0440\u0441\u043a\",\"Angarsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value35\" = Table.ReplaceValue(#\"Replaced Value34\",\"\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\",\"St. Petersburg\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value36\" = Table.ReplaceValue(#\"Replaced Value35\",\"\u0415\u0433\u043e\u0440\u044c\u0435\u0432\u0441\u043a\",\"Egorievsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value37\" = Table.ReplaceValue(#\"Replaced Value36\",\"\u041a\u0438\u043d\u0433\u0438\u0441\u0435\u043f\u043f\",\"Kingisepp\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value38\" = Table.ReplaceValue(#\"Replaced Value37\",\"\u0417\u0435\u043b\u0435\u043d\u043e\u0433\u0440\u0430\u0434\",\"Zelenograd\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value39\" = Table.ReplaceValue(#\"Replaced Value38\",\"\u0414\u0435\u0442\u0447\u0438\u043d\u043e \u0441\",\"Detchino \",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value40\" = Table.ReplaceValue(#\"Replaced Value39\",\"\u0411\u043e\u0440\u043e\u0432\u0438\u0447\u0438\",\"Borovichi\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value41\" = Table.ReplaceValue(#\"Replaced Value40\",\"\u0420\u043e\u0441\u0441\u043e\u0448\u044c\",\"Rossosh\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value42\" = Table.ReplaceValue(#\"Replaced Value41\",\"\u0422\u043e\u043c\u0441\u043a\",\"Tomsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value43\" = Table.ReplaceValue(#\"Replaced Value42\",\"\u041a\u0430\u043b\u0443\u0433\u0430\",\"Kaluga\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value44\" = Table.ReplaceValue(#\"Replaced Value43\",\"\u0410\u0447\u0438\u043d\u0441\u043a\",\"Achinsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value45\" = Table.ReplaceValue(#\"Replaced Value44\",\"\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\",\"Novosibirsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value46\" = Table.ReplaceValue(#\"Replaced Value45\",\"\u0425\u0430\u0431\u0430\u0440\u043e\u0432\u0441\u043a\",\"Khabarovsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value47\" = Table.ReplaceValue(#\"Replaced Value46\",\"\u041f\u0435\u043d\u0437\u0430\",\"Penza\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value48\" = Table.ReplaceValue(#\"Replaced Value47\",\"\u041e\u0440\u0441\u043a\",\"Orsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value49\" = Table.ReplaceValue(#\"Replaced Value48\",\"\u0412\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u0441\u043a\",\"Voskresensk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value50\" = Table.ReplaceValue(#\"Replaced Value49\",\"\u0411\u0430\u043b\u0430\u0448\u0438\u0445\u0430\",\"Balashikha\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value51\" = Table.ReplaceValue(#\"Replaced Value50\",\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\",\"Chelyabinsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value52\" = Table.ReplaceValue(#\"Replaced Value51\",\"\u0410\u0441\u0442\u0440\u0430\u0445\u0430\u043d\u044c\",\"Astrakhan\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value53\" = Table.ReplaceValue(#\"Replaced Value52\",\"\u0422\u0432\u0435\u0440\u044c\",\"Tver\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value54\" = Table.ReplaceValue(#\"Replaced Value53\",\"\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a\",\"Krasnoyarsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value55\" = Table.ReplaceValue(#\"Replaced Value54\",\"\u041b\u044e\u0431\u0435\u0440\u0446\u044b\",\"Lyubertsy\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value56\" = Table.ReplaceValue(#\"Replaced Value55\",\"\u0418\u0440\u043a\u0443\u0442\u0441\u043a\",\"Irkutsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value57\" = Table.ReplaceValue(#\"Replaced Value56\",\"\u041a\u0430\u0437\u0430\u043d\u044c\",\"Kazan\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value58\" = Table.ReplaceValue(#\"Replaced Value57\",\"\u041a\u043e\u043c\u0441\u043e\u043c\u043e\u043b\u044c\u0441\u043a-\u043d\u0430-\u0410\u043c\u0443\u0440\u0435\",\"Komsomolsk on Amur\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value59\" = Table.ReplaceValue(#\"Replaced Value58\",\"\u0417\u043b\u0430\u0442\u043e\u0443\u0441\u0442\",\"Zlatoust\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value60\" = Table.ReplaceValue(#\"Replaced Value59\",\"\u0410\u0440\u0442\u0435\u043c\",\"Artem\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value61\" = Table.ReplaceValue(#\"Replaced Value60\",\"\u0420\u043e\u0441\u0442\u043e\u0432-\u043d\u0430-\u0414\u043e\u043d\u0443\",\"Rostov on Don\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value62\" = Table.ReplaceValue(#\"Replaced Value61\",\"\u0412\u0435\u043b\u0438\u043a\u0438\u0439 \u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434\",\"Veliky Novgorod\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value63\" = Table.ReplaceValue(#\"Replaced Value62\",\"\u041b\u0435\u0431\u0435\u0434\u044f\u043d\u044c\",\"Lebedyan\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value64\" = Table.ReplaceValue(#\"Replaced Value63\",\"\u0411\u043e\u0440\u043e\u0432\u0441\u043a\",\"Borovsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value65\" = Table.ReplaceValue(#\"Replaced Value64\",\"\u042f\u0431\u043b\u043e\u043d\u043e\u0432\u0441\u043a\u0438\u0439 \u043f\u0433\u0442\",\"Yablonevsky\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value66\" = Table.ReplaceValue(#\"Replaced Value65\",\"\u0412\u043b\u0430\u0434\u0438\u0432\u043e\u0441\u0442\u043e\u043a\",\"Vladivostok\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value67\" = Table.ReplaceValue(#\"Replaced Value66\",\"\u0421\u0435\u0440\u0442\u043e\u043b\u043e\u0432\u043e\",\"Sertolovo\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value68\" = Table.ReplaceValue(#\"Replaced Value67\",\"\u0412\u044b\u0448\u043d\u0438\u0439 \u0412\u043e\u043b\u043e\u0447\u0435\u043a\",\"Vyishny Volocheck\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value69\" = Table.ReplaceValue(#\"Replaced Value68\",\"\u041f\u0435\u0442\u0440\u043e\u043f\u0430\u0432\u043b\u043e\u0432\u0441\u043a-\u041a\u0430\u043c\u0447\u0430\u0442\u0441\u043a\u0438\u0439\",\"Petropavlovsk-Kamchatsky\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value70\" = Table.ReplaceValue(#\"Replaced Value69\",\"\u0411\u0435\u043b\u0433\u043e\u0440\u043e\u0434\",\"Belgorod\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value71\" = Table.ReplaceValue(#\"Replaced Value70\",\"\u0422\u0438\u0445\u0432\u0438\u043d\",\"Tikhvin\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value72\" = Table.ReplaceValue(#\"Replaced Value71\",\"\u0412\u043e\u043b\u043e\u0433\u0434\u0430\",\"Vologda\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value73\" = Table.ReplaceValue(#\"Replaced Value72\",\"\u041f\u0443\u0448\u043a\u0438\u043d\u043e\",\"Pushkino\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value74\" = Table.ReplaceValue(#\"Replaced Value73\",\"\u042f\u0440\u043e\u0441\u043b\u0430\u0432\u043b\u044c\",\"Yaroslavl\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value75\" = Table.ReplaceValue(#\"Replaced Value74\",\"\u0410\u043a\u0441\u0430\u0439\",\"Aksay\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value76\" = Table.ReplaceValue(#\"Replaced Value75\",\"\u041c\u0430\u043b\u043e\u044f\u0440\u043e\u0441\u043b\u0430\u0432\u0435\u0446\",\"Maloyaroslavets\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value77\" = Table.ReplaceValue(#\"Replaced Value76\",\"\u041f\u0441\u043a\u043e\u0432\",\"Pskov\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value78\" = Table.ReplaceValue(#\"Replaced Value77\",\"\u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\",\"Vladimir\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value79\" = Table.ReplaceValue(#\"Replaced Value78\",\"\u041e\u0431\u043d\u0438\u043d\u0441\u043a\",\"Obninsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value80\" = Table.ReplaceValue(#\"Replaced Value79\",\"\u0411\u043b\u0430\u0433\u043e\u0432\u0435\u0449\u0435\u043d\u0441\u043a\",\"Blagovechinsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value81\" = Table.ReplaceValue(#\"Replaced Value80\",\"\u041e\u0440\u0435\u043b\",\"Orel\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value82\" = Table.ReplaceValue(#\"Replaced Value81\",\"\u041b\u0438\u043f\u0435\u0446\u043a\",\"Lipetsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value83\" = Table.ReplaceValue(#\"Replaced Value82\",\"\u041d\u0438\u0436\u043d\u0438\u0439 \u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434\",\"Nizhny Novgorod\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value84\" = Table.ReplaceValue(#\"Replaced Value83\",\"\u041e\u0440\u0438\u0447\u0438 \u043f\u0433\u0442\",\"Orichi\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value85\" = Table.ReplaceValue(#\"Replaced Value84\",\"\u041a\u0440\u0430\u0441\u043d\u043e\u0434\u0430\u0440\",\"Krasnodar\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value86\" = Table.ReplaceValue(#\"Replaced Value85\",\"\u0418\u0436\u0435\u0432\u0441\u043a\",\"Izhevsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value87\" = Table.ReplaceValue(#\"Replaced Value86\",\"\u0411\u043e\u0433\u0434\u0430\u043d\u043e\u0432\u0438\u0447\",\"Bogdanovich\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value88\" = Table.ReplaceValue(#\"Replaced Value87\",\"\u0419\u043e\u0448\u043a\u0430\u0440-\u041e\u043b\u0430\",\"Yoshkar-Ola\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value89\" = Table.ReplaceValue(#\"Replaced Value88\",\"\u0410\u043f\u0430\u0442\u0438\u0442\u044b\",\"Apatity\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value90\" = Table.ReplaceValue(#\"Replaced Value89\",\"\u0418\u043d\u0442\u0430\",\"Inta\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value91\" = Table.ReplaceValue(#\"Replaced Value90\",\"\u0411\u0430\u043b\u0442\u0438\u0439\u0441\u043a\",\"Baltiysk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value92\" = Table.ReplaceValue(#\"Replaced Value91\",\"\u041a\u0430\u043d\u0434\u0430\u043b\u0430\u043a\u0448\u0430\",\"Kandalaksha\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value93\" = Table.ReplaceValue(#\"Replaced Value92\",\"\u041c\u0443\u0440\u043c\u0430\u043d\u0441\u043a\",\"Murmansk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value94\" = Table.ReplaceValue(#\"Replaced Value93\",\"\u041c\u043e\u043d\u0447\u0435\u0433\u043e\u0440\u0441\u043a\",\"Monchegorsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value95\" = Table.ReplaceValue(#\"Replaced Value94\",\"\u0414\u0438\u0432\u043d\u043e\u0435 \u0441 \",\"Divnoe\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value96\" = Table.ReplaceValue(#\"Replaced Value95\",\"\u0412\u043e\u043b\u0433\u043e\u0434\u043e\u043d\u0441\u043a\",\"Volgodonsk\",Replacer.ReplaceValue,{\"City\"}),\n    #\"Replaced Value97\" = Table.ReplaceValue(#\"Replaced Value96\",\"\u0414\u0438\u0432\u043d\u043e\u0435\",\"Divnoe\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value98\" = Table.ReplaceValue(#\"Replaced Value97\",\"\u0414\u0438\u043d\u0441\u043a\u0430\u044f \u0441\u0442-\u0446\u0430\",\"Dinskaya\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value99\" = Table.ReplaceValue(#\"Replaced Value98\",\"\u041c\u0438\u0445\u0430\u0439\u043b\u043e\u0432\u0441\u043a\",\"Michaylovsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value100\" = Table.ReplaceValue(#\"Replaced Value99\",\"\u0411\u043e\u0440\u0438\u043d\u0441\u043a\u043e\u0435 \u0441\",\"Borinskoye\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value101\" = Table.ReplaceValue(#\"Replaced Value100\",\"\u041f\u043e\u0434\u0433\u043e\u0440\u043d\u043e\u0435 \u0441\",\"Podgornoe \",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value102\" = Table.ReplaceValue(#\"Replaced Value101\",\"\u041a\u043e\u0447\u0443\u0431\u0435\u0435\u0432\u0441\u043a\u043e\u0435 \u0441\",\"Kochubeevskoye\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value103\" = Table.ReplaceValue(#\"Replaced Value102\",\"\u0413\u0440\u0430\u0447\u0435\u0432\u043a\u0430\u044f \u0441\",\"Grachevcka\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value104\" = Table.ReplaceValue(#\"Replaced Value103\",\"\u0418\u0437\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439\",\"Izobilny\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value105\" = Table.ReplaceValue(#\"Replaced Value104\",\"\u0418\u043f\u0430\u0442\u043e\u0432\u043e\",\"Ipatovo\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value106\" = Table.ReplaceValue(#\"Replaced Value105\",\"\u0411\u0435\u0441\u043b\u0430\u043d\",\"Beslan\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value107\" = Table.ReplaceValue(#\"Replaced Value106\",\"\u0411\u0443\u0434\u0435\u043d\u043d\u043e\u0432\u0441\u043a\",\"Buddenovsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value108\" = Table.ReplaceValue(#\"Replaced Value107\",\"\u0413\u0440\u0430\u0447\u0435\u0432\u043a\u0430 \u0441\",\"Grachevka\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value109\" = Table.ReplaceValue(#\"Replaced Value108\",\"\u0425\u043e\u043c\u0443\u0442\u043e\u0432\u043e \u0441\",\"Homutovo\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value110\" = Table.ReplaceValue(#\"Replaced Value109\",\"\u0423\u0441\u0442\u044c-\u041e\u0440\u0434\u044b\u043d\u0441\u043a\u0438\u0439 \u043f\",\"Ust-Ordinsky\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value111\" = Table.ReplaceValue(#\"Replaced Value110\",\"\u0411\u0440\u0430\u0442\u0441\u043a\",\"Bratsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value112\" = Table.ReplaceValue(#\"Replaced Value111\",\"\u0410\u0431\u0430\u043a\u0430\u043d\",\"Abakan\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value113\" = Table.ReplaceValue(#\"Replaced Value112\",\"\u0423\u0441\u043e\u043b\u044c\u0435-\u0421\u0438\u0431\u0438\u0440\u0441\u043a\u043e\u0435\",\"Usolye Sibirskoye\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value114\" = Table.ReplaceValue(#\"Replaced Value113\",\"\u0412\u0430\u0440\u043d\u0430 \u0441\",\"Varna\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value115\" = Table.ReplaceValue(#\"Replaced Value114\",\"\u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u043f\u0435\u0440\u0441\u043a\u043e\u043f\u0441\u043a\",\"Krasnoperskopsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value116\" = Table.ReplaceValue(#\"Replaced Value115\",\"\u0433.\u042f\u043b\u0442\u0430\",\"Yalta\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value117\" = Table.ReplaceValue(#\"Replaced Value116\",\"\u0433.\u0421\u043e\u0447\u0438\",\"Sochi\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value118\" = Table.ReplaceValue(#\"Replaced Value117\",\"\u041a\u0440\u044b\u043c\u0441\u043a\",\"Kryimsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value119\" = Table.ReplaceValue(#\"Replaced Value118\",\"\u0413\u0435\u043e\u0440\u0433\u0438\u0435\u0432\u0441\u043a\",\"Georgievsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value120\" = Table.ReplaceValue(#\"Replaced Value119\",\"\u0427\u0435\u0440\u043a\u0435\u0441\u0441\u043a\",\"Cherkesk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value121\" = Table.ReplaceValue(#\"Replaced Value120\",\"\u0433.\u0410\u0440\u043c\u044f\u043d\u0441\u043a\",\"Armyansk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value122\" = Table.ReplaceValue(#\"Replaced Value121\",\"\u0433.\u0414\u0436\u0430\u043d\u043a\u043e\u0439\",\"Dzankoy\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value123\" = Table.ReplaceValue(#\"Replaced Value122\",\"\u0433.\u0421\u0430\u043a\u0438\",\"Saki\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value124\" = Table.ReplaceValue(#\"Replaced Value123\",\"\u0433.\u0411\u0430\u0445\u0447\u0438\u0441\u0430\u0440\u0430\u0439\",\"Backchisaray\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value125\" = Table.ReplaceValue(#\"Replaced Value124\",\"\u0410\u043d\u0430\u043f\u0430\",\"Anapa\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value126\" = Table.ReplaceValue(#\"Replaced Value125\",\"\u042e\u0436\u043d\u043e-\u0421\u0430\u0445\u0430\u043b\u0438\u043d\u0441\u043a\",\"Yuzhno-sakhalinsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value127\" = Table.ReplaceValue(#\"Replaced Value126\",\"\u041d\u0430\u0445\u043e\u0434\u043a\u0430\",\"Nackodka\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value128\" = Table.ReplaceValue(#\"Replaced Value127\",\"\u0422\u043e\u043f\u043e\u043b\u0435\u0432\u043e \u0441\",\"Topolevo\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value129\" = Table.ReplaceValue(#\"Replaced Value128\",\"\u0421\u043e\u043b\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u043f\",\"Solnechny\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value130\" = Table.ReplaceValue(#\"Replaced Value129\",\"\u0411\u0438\u0440\u043e\u0431\u0438\u0434\u0436\u0430\u043d\",\"Birobodzan\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value131\" = Table.ReplaceValue(#\"Replaced Value130\",\"\u0411\u0435\u043b\u0433\u043e\u0440\u043e\u0434\u0441\u043a\",\"Belgorodsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value132\" = Table.ReplaceValue(#\"Replaced Value131\",\"\u0411\u043e\u043b\u044c\u0448\u043e\u0439\u0439 \u043a\u0430\u043c\u0435\u043d\u044c\",\"Bolshoy Kamen\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value133\" = Table.ReplaceValue(#\"Replaced Value132\",\"\u041a\u0440\u0430\u0441\u043d\u043e\u043a\u0430\u043c\u0435\u043d\u0441\u043a\",\"Krasnokamensk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value134\" = Table.ReplaceValue(#\"Replaced Value133\",\"\u0421\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439\",\"Svobodny\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value135\" = Table.ReplaceValue(#\"Replaced Value134\",\"\u041a\u043e\u0442\u0435\u043b\u044c\u043d\u0438\u0447\",\"London\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value136\" = Table.ReplaceValue(#\"Replaced Value135\",\"St. Petersburg\",\"Milan\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value137\" = Table.ReplaceValue(#\"Replaced Value136\",\"Dace\",\"Berlin\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value138\" = Table.ReplaceValue(#\"Replaced Value137\",\"\u0413\u0440\u044f\u0437\u0438\",\"Istanbul\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value139\" = Table.ReplaceValue(#\"Replaced Value138\",\"\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0431\u0443\u0440\u0433\",\"Ekaterinburg\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value140\" = Table.ReplaceValue(#\"Replaced Value139\",\"\u041d\u043e\u0432\u043e\u0443\u0440\u0430\u043b\u044c\u0441\u043a\",\"Madrid\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value141\" = Table.ReplaceValue(#\"Replaced Value140\",\"\u041a\u0438\u0440\u0438\u0448\u0438\",\"Kyiv\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value142\" = Table.ReplaceValue(#\"Replaced Value141\",\"\u041a\u0438\u0440\u043e\u0432\",\"Rome\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value143\" = Table.ReplaceValue(#\"Replaced Value142\",\"\u0412\u044b\u0431\u043e\u0440\u0433\",\"Bucharest\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value144\" = Table.ReplaceValue(#\"Replaced Value143\",\"\u0427\u0430\u043b\u0442\u044b\u0440\u044c \u0441\",\"Paris\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value145\" = Table.ReplaceValue(#\"Replaced Value144\",\"\u041a\u043e\u0440\u043e\u043b\u0435\u0432\",\"Korolev\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value146\" = Table.ReplaceValue(#\"Replaced Value145\",\"\u0411\u0435\u0440\u0435\u0437\u043e\u0432\u0441\u043a\u0438\u0439\",\"Ekaterinburg\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value147\" = Table.ReplaceValue(#\"Replaced Value146\",\"\u0415\u0433\u043e\u0440\u043b\u044b\u043a\u0441\u043a\u0430\u044f \u0441\u0442-\u0446\u0430\",\"Minsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value148\" = Table.ReplaceValue(#\"Replaced Value147\",\"\u041a\u043e\u043b\u043e\u043c\u043d\u0430\",\"Vienna\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value149\" = Table.ReplaceValue(#\"Replaced Value148\",\"\u041f\u0440\u043e\u0442\u0432\u0438\u043d\u043e\",\"Moskow\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value150\" = Table.ReplaceValue(#\"Replaced Value149\",\"\u0422\u0430\u0433\u0430\u043d\u0440\u043e\u0433\",\"Hamburg\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value151\" = Table.ReplaceValue(#\"Replaced Value150\",\"\u0417\u0435\u0440\u043d\u043e\u0433\u0440\u0430\u0434\",\"Warsaw\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value152\" = Table.ReplaceValue(#\"Replaced Value151\",\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\",\"Warsaw\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value153\" = Table.ReplaceValue(#\"Replaced Value152\",\"\u041f\u0435\u0440\u043c\u044c\",\"Warsaw\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value154\" = Table.ReplaceValue(#\"Replaced Value153\",\"\u0417\u0430\u0441\u0435\u0447\u043d\u043e\u0435 \u0441\",\"Budapest\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value155\" = Table.ReplaceValue(#\"Replaced Value154\",\"\u0411\u0435\u043b\u043e\u0440\u0435\u0447\u0435\u043d\u0441\u043a\",\"Budapest\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value156\" = Table.ReplaceValue(#\"Replaced Value155\",\"\u0421\u0432\u0435\u0442\u043e\u0433\u043e\u0440\u0441\u043a\",\"Barcelona\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value157\" = Table.ReplaceValue(#\"Replaced Value156\",\"\u0421\u0430\u043b\u044c\u0441\u043a\",\"Munich\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value158\" = Table.ReplaceValue(#\"Replaced Value157\",\"\u0421\u0430\u043c\u0430\u0440\u0430\",\"Munich\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value159\" = Table.ReplaceValue(#\"Replaced Value158\",\"\u0427\u0443\u0441\u043e\u0432\u043e\u0439\",\"Kharkiv\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value160\" = Table.ReplaceValue(#\"Replaced Value159\",\"\u0428\u0430\u0445\u0442\u044b\",\"Belgrade\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value161\" = Table.ReplaceValue(#\"Replaced Value160\",\"\u041d\u0435\u043a\u0440\u0430\u0441\u043e\u0432\u043a\u0430 \u0441\",\"Prague\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value162\" = Table.ReplaceValue(#\"Replaced Value161\",\"\u041c\u0438\u0430\u0441\u0441\",\"Prague\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value163\" = Table.ReplaceValue(#\"Replaced Value162\",\"\u041b\u043e\u0441\u0438\u043d\u043e-\u041f\u0435\u0442\u0440\u043e\u0432\u0441\u043a\u0438\u0439\",\"Sofia\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value164\" = Table.ReplaceValue(#\"Replaced Value163\",\"\u041a\u0430\u043c\u0435\u043d\u0441\u043a-\u0428\u0430\u0445\u0442\u0438\u043d\u0441\u043a\u0438\u0439\",\"Sofia\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value165\" = Table.ReplaceValue(#\"Replaced Value164\",\"\u0421\u0442\u0443\u043f\u0438\u043d\u043e\",\"Sofia\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value166\" = Table.ReplaceValue(#\"Replaced Value165\",\"\u0421\u0442\u0430\u0440\u0430\u044f \u0420\u0443\u0441\u0441\u0430\",\"Sofia\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value167\" = Table.ReplaceValue(#\"Replaced Value166\",\"\u0411\u0430\u0440\u043d\u0430\u0443\u043b\",\"Birmingham\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value168\" = Table.ReplaceValue(#\"Replaced Value167\",\"\u042d\u043b\u0438\u0441\u0442\u0430\",\"Birmingham\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value169\" = Table.ReplaceValue(#\"Replaced Value168\",\"\u0423\u0444\u0430\",\"Birmingham\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value170\" = Table.ReplaceValue(#\"Replaced Value169\",\"\u042f\u043a\u0441\u0430\u0442\u043e\u0432\u043e \u0441\",\"Brussels\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value171\" = Table.ReplaceValue(#\"Replaced Value170\",\"\u0412\u044b\u0441\u043e\u043a\u0430\u044f\u043e\u0440\u0430 \u0441\",\"Brussels\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value172\" = Table.ReplaceValue(#\"Replaced Value171\",\"\u0420\u0430\u043c\u0435\u043d\u0441\u043a\u043e\u0435\",\"Moskow\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value173\" = Table.ReplaceValue(#\"Replaced Value172\",\"\u0428\u0435\u043b\u0435\u0445\u043e\u0432\",\"Brussels\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value174\" = Table.ReplaceValue(#\"Replaced Value173\",\"\u0427\u0435\u0431\u043e\u043a\u0441\u0430\u0440\u044b\",\"Brussels\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value175\" = Table.ReplaceValue(#\"Replaced Value174\",\"\u041a\u0430\u043d\u0435\u0432\u0441\u043a\u0430\u044f \u0441\u0442-\u0446\u0430\",\"Brussels\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value176\" = Table.ReplaceValue(#\"Replaced Value175\",\"\u0420\u044b\u0431\u043d\u043e\u0435\",\"Brussels\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value177\" = Table.ReplaceValue(#\"Replaced Value176\",\"\u0410\u043d\u043d\u0438\u043d\u043e \u043f\",\"Brussels\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value178\" = Table.ReplaceValue(#\"Replaced Value177\",\"\u041a\u043e\u0432\u044b\u043b\u043a\u0438\u043d\u043e\",\"Brussels\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value179\" = Table.ReplaceValue(#\"Replaced Value178\",\"\u0420\u043e\u0434\u043d\u0438\u043a\u0438 \u0434\u043f\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value180\" = Table.ReplaceValue(#\"Replaced Value179\",\"\u041e\u0440\u0435\u0445\u043e\u0432\u043e-\u0417\u0443\u0435\u0432\u043e\",\"Cologne\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value181\" = Table.ReplaceValue(#\"Replaced Value180\",\"\u041a\u043e\u043f\u0435\u0439\u0441\u043a\",\"Cologne\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value182\" = Table.ReplaceValue(#\"Replaced Value181\",\"\u0413\u0430\u0442\u0447\u0438\u043d\u0430\",\"Cologne\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value183\" = Table.ReplaceValue(#\"Replaced Value182\",\"\u041b\u0443\u0445\u043e\u0432\u0438\u0446\u044b\",\"Cologne\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value184\" = Table.ReplaceValue(#\"Replaced Value183\",\"\u0415\u0439\u0441\u043a\",\"Las Palmas\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value185\" = Table.ReplaceValue(#\"Replaced Value184\",\"\u0410\u0437\u043e\u0432\",\"Las Palmas\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value186\" = Table.ReplaceValue(#\"Replaced Value185\",\"\u041c\u0443\u0440\u043e\u043c\",\"Bilbao\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value187\" = Table.ReplaceValue(#\"Replaced Value186\",\"\u0423\u0441\u0441\u0443\u0440\u0438\u0439\u0441\u043a\",\"Palma De Mallorca\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value188\" = Table.ReplaceValue(#\"Replaced Value187\",\"\u0412\u0435\u0440\u0445\u043d\u044f\u044f \u041f\u044b\u0448\u043c\u0430\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value189\" = Table.ReplaceValue(#\"Replaced Value188\",\"\u0420\u0443\u0437\u0430\u0435\u0432\u043a\u0430\",\"Glasgow\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value190\" = Table.ReplaceValue(#\"Replaced Value189\",\"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u0438\u0437\u043e\u043b\u044f\u0442\u043e\u0440 \u043f\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value191\" = Table.ReplaceValue(#\"Replaced Value190\",\"\u041a\u0430\u0447\u043a\u0430\u043d\u0430\u0440\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value192\" = Table.ReplaceValue(#\"Replaced Value191\",\"\u0433.\u0421\u0438\u043c\u0444\u0435\u0440\u043e\u043f\u043e\u043b\u044c\",\"Liverpool\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value193\" = Table.ReplaceValue(#\"Replaced Value192\",\"\u0422\u043e\u043b\u044c\u044f\u0442\u0442\u0438\",\"Edinburgh\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value194\" = Table.ReplaceValue(#\"Replaced Value193\",\"\u0422\u0438\u043c\u0430\u0448\u0435\u0432\u0441\u043a\",\"Manchester\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value195\" = Table.ReplaceValue(#\"Replaced Value194\",\"\u0428\u043b\u0438\u0441\u0441\u0435\u043b\u044c\u0431\u0443\u0440\u0433\",\"Bristol\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value196\" = Table.ReplaceValue(#\"Replaced Value195\",\"\u041e\u0440\u0435\u043d\u0431\u0443\u0440\u0433\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value197\" = Table.ReplaceValue(#\"Replaced Value196\",\"\u041a\u043e\u0432\u0440\u043e\u0432\",\"Fife\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value198\" = Table.ReplaceValue(#\"Replaced Value197\",\"\u041b\u044b\u0442\u043a\u0430\u0440\u0438\u043d\u043e\",\"Wirral\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value199\" = Table.ReplaceValue(#\"Replaced Value198\",\"\u0421\u0438\u0432\u0435\u0440\u0441\u043a\u0438\u0439\u043f\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value200\" = Table.ReplaceValue(#\"Replaced Value199\",\"\u041a\u0443\u043d\u0433\u0443\u0440\",\"Dudley\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value201\" = Table.ReplaceValue(#\"Replaced Value200\",\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value202\" = Table.ReplaceValue(#\"Replaced Value201\",\"\u0421\u0442\u0430\u0432\u0440\u043e\u043f\u043e\u043b\u044c\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value203\" = Table.ReplaceValue(#\"Replaced Value202\",\"\u0421\u043b\u0430\u043d\u0446\u044b\",\"Belfast\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value204\" = Table.ReplaceValue(#\"Replaced Value203\",\"\u0422\u043e\u0441\u043d\u043e\",\"Derby\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value205\" = Table.ReplaceValue(#\"Replaced Value204\",\"\u0411\u0435\u043b\u043e\u043e\u0437\u0435\u0440\u0441\u043a\u0438\u0439 \u043f\u0433\u0442\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value206\" = Table.ReplaceValue(#\"Replaced Value205\",\"\u0420\u0435\u0443\u0442\u043e\u0432\",\"Thamesdown\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value207\" = Table.ReplaceValue(#\"Replaced Value206\",\"\u0429\u0435\u043b\u043a\u043e\u0432\u043e\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value208\" = Table.ReplaceValue(#\"Replaced Value207\",\"\u0418\u0432\u0430\u043d\u0442\u0435\u0435\u0432\u043a\u0430\",\"Rotterdam\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value209\" = Table.ReplaceValue(#\"Replaced Value208\",\"\u041d\u043e\u0432\u043e\u043a\u0443\u0439\u0431\u044b\u0448\u0435\u0432\u0441\u043a\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value210\" = Table.ReplaceValue(#\"Replaced Value209\",\"\u041a\u0435\u043c\u0435\u0440\u043e\u0432\u043e\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value211\" = Table.ReplaceValue(#\"Replaced Value210\",\"\u041a\u0430\u043c\u044b\u0437\u044f\u043a\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value212\" = Table.ReplaceValue(#\"Replaced Value211\",\"\u0412\u043e\u0440\u043e\u0442\u044b\u043d\u0441\u043a \u043f\",\"Oslo\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value213\" = Table.ReplaceValue(#\"Replaced Value212\",\"\u0423\u0441\u0442\u044c-\u041b\u0430\u0431\u0438\u043d\u0441\u043a\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value214\" = Table.ReplaceValue(#\"Replaced Value213\",\"\u041f\u0430\u043d\u043a\u043e\u0432\u043a\u0430 \u0440\u043f\",\"Warsaw\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value215\" = Table.ReplaceValue(#\"Replaced Value214\",\"\u041d\u0438\u0436\u043d\u0438\u0439 \u0422\u0430\u0433\u0438\u043b\",\"Krakow\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value216\" = Table.ReplaceValue(#\"Replaced Value215\",\"\u041b\u0438\u0441\u043a\u0438\",\"Turin\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value217\" = Table.ReplaceValue(#\"Replaced Value216\",\"\u041a\u043e\u043c\u043c\u0443\u043d\u0430\u0440\u043a\u0430 \u043f\",\"Palermo\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value218\" = Table.ReplaceValue(#\"Replaced Value217\",\"\u041a\u0440\u0430\u0441\u043d\u043e\u0433\u043e\u0440\u0441\u043a\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value219\" = Table.ReplaceValue(#\"Replaced Value218\",\"\u0433.\u0421\u0435\u0432\u0430\u0441\u0442\u043e\u043f\u043e\u043b\u044c\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value220\" = Table.ReplaceValue(#\"Replaced Value219\",\"\u041a\u043b\u0438\u043d\u0446\u044b\",\"Venezia\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value221\" = Table.ReplaceValue(#\"Replaced Value220\",\"\u0412\u043e\u043b\u0433\u043e\u0433\u0440\u0430\u0434\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value222\" = Table.ReplaceValue(#\"Replaced Value221\",\"\u041a\u0443\u0440\u0441\u043a\",\"Kursk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value223\" = Table.ReplaceValue(#\"Replaced Value222\",\"\u041d\u043e\u0432\u043e\u043a\u0443\u0437\u043d\u0435\u0446\u043a\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value224\" = Table.ReplaceValue(#\"Replaced Value223\",\"\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434\",\"Riga\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value225\" = Table.ReplaceValue(#\"Replaced Value224\",\"\u0411\u0440\u043e\u043d\u043d\u0438\u0446\u044b\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value226\" = Table.ReplaceValue(#\"Replaced Value225\",\"\u041f\u0435\u0440\u0435\u0441\u0432\u0435\u0442\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value227\" = Table.ReplaceValue(#\"Replaced Value226\",\"\u0414\u043e\u043c\u043e\u0434\u0435\u0434\u043e\u0432\u043e\",\"Moscow\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value228\" = Table.ReplaceValue(#\"Replaced Value227\",\"\u041a\u043b\u0438\u043d\",\"Kishinev\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value229\" = Table.ReplaceValue(#\"Replaced Value228\",\"Saki\",\"Beltsy\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value230\" = Table.ReplaceValue(#\"Replaced Value229\",\"Las Palmas\",\"Helsinki\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value231\" = Table.ReplaceValue(#\"Replaced Value230\",\"\u041a\u043e\u043c\u0441\u043e\u043c\u043e\u043b\u044c\u0441\u043a\u0438\u0439 \u0440\u043f\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value232\" = Table.ReplaceValue(#\"Replaced Value231\",\"\u041a\u043e\u043c\u0441\u043e\u043c\u043e\u043b\u044c\u0441\u043a\u043e\u0435 \u0441\",\"Tirana\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value233\" = Table.ReplaceValue(#\"Replaced Value232\",\"\u041a\u043e\u043c\u043c\u0443\u043d\u0430\u0440\",\"Mogilev\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value234\" = Table.ReplaceValue(#\"Replaced Value233\",\"\u0411\u0435\u043b\u043e\u043a\u0443\u0440\u0438\u0445\u0430\",\"Vitebsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value235\" = Table.ReplaceValue(#\"Replaced Value234\",\"\u0411\u0435\u043b\u043e\u0433\u043e\u0440\u0441\u043a\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value236\" = Table.ReplaceValue(#\"Replaced Value235\",\"\u0433.\",\"Brest\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value237\" = Table.ReplaceValue(#\"Replaced Value236\",\"\u0411\u0435\u043b\u043e\u0437\u0435\u0440\u0441\u043a\",\"Sarajevo\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value238\" = Table.ReplaceValue(#\"Replaced Value237\",\"\u0411\u0435\u043b\u043e\u0432\u043e\",\"Sarajevo\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value239\" = Table.ReplaceValue(#\"Replaced Value238\",\"\u0411\u0435\u043b\u043e\u043e\u043c\u0443\u0442 \u043f\u0433\u0442\",\"Sarajevo\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value240\" = Table.ReplaceValue(#\"Replaced Value239\",\"\u0410\u0441\u0438\u043d\u043e\",\"Alta\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value241\" = Table.ReplaceValue(#\"Replaced Value240\",\"\u0412\u0443\u043a\u0442\u044b\u043b\",\"Askim\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value242\" = Table.ReplaceValue(#\"Replaced Value241\",\"\u0410\u0440\u0445\u0430\u043d\u0433\u0435\u043b\u044c\u0441\u043a\",\"Brekstad\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value243\" = Table.ReplaceValue(#\"Replaced Value242\",\"\u0410\u0433\u0430\u043f\u043e\u0432\u043a\u0430 \u0441\",\"Brevik\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value244\" = Table.ReplaceValue(#\"Replaced Value243\",\"\u0411\u0438\u0439\u0441\u043a\",\"Brumunddal\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value245\" = Table.ReplaceValue(#\"Replaced Value244\",\"\u0414\u043e\u043d\u0435\u0446\u043a\",\"Donetsk\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value246\" = Table.ReplaceValue(#\"Replaced Value245\",\"\u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u041a\u0430\u043c\u0435\u043d\u044c\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value247\" = Table.ReplaceValue(#\"Replaced Value246\",\"\u043e\u0435 \u0441\",\"Br\u00f8nn\u00f8ysund\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value248\" = Table.ReplaceValue(#\"Replaced Value247\",\"\u041d\u0438\u0436\u043d\u0435\u0432\u0430\u0440\u0442\u043e\u0432\u0441\u043a\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value249\" = Table.ReplaceValue(#\"Replaced Value248\",\"\u0411\u0438\u0440\u0441\u043a\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value250\" = Table.ReplaceValue(#\"Replaced Value249\",\"\u0411\u043e\u0440\u0437\u044f\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value251\" = Table.ReplaceValue(#\"Replaced Value250\",\"\u0425\u0430\u043d\u0442\u044b-\u041c\u0430\u043d\u0441\u0438\u0439\u0441\u043a\",\"Leirvik\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value252\" = Table.ReplaceValue(#\"Replaced Value251\",\"\u0413\u043e\u0440\u043d\u043e-\u0410\u043b\u0442\u0430\u0439\u0441\u043a\",\"Leknes\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value253\" = Table.ReplaceValue(#\"Replaced Value252\",\"\u041b\u043e\u0441\u043a\u0443\u0442\u043e\u0432\u043e \u0434\",\"Levanger\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value254\" = Table.ReplaceValue(#\"Replaced Value253\",\"\u0427\u0438\u0442\u0430\",\"Lillesand\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value255\" = Table.ReplaceValue(#\"Replaced Value254\",\"\u041a\u0430\u043b\u0430\u0447\u0438\u043d\u0441\u043a\",\"Alleen\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value256\" = Table.ReplaceValue(#\"Replaced Value255\",\"\u041e\u0431\u044c\",\"Odda\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value257\" = Table.ReplaceValue(#\"Replaced Value256\",\"\u041d\u043e\u0432\u043e\u0434\u0432\u0438\u043d\u0441\u043a\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value258\" = Table.ReplaceValue(#\"Replaced Value257\",\"\u0423\u0445\u0442\u0430\",\"Sandvika\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value259\" = Table.ReplaceValue(#\"Replaced Value258\",\"\u041a\u0438\u0440\u0438\u043b\u043b\u043e\u0432\",\"Sauda\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value260\" = Table.ReplaceValue(#\"Replaced Value259\",\"\u041a\u043e\u043d\u0434\u043e\u043f\u043e\u0433\u0430\",\"Ski\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value261\" = Table.ReplaceValue(#\"Replaced Value260\",\"\u0411\u0435\u043b\u044f\u0435\u0432\u043a\u0430 \u0441\",\"Skudeneshavn\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value262\" = Table.ReplaceValue(#\"Replaced Value261\",\"\u0411\u0443\u0442\u0443\u0440\u043b\u0438\u043d\u043e\u0432\u043a\u0430\",\"Sortland\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value263\" = Table.ReplaceValue(#\"Replaced Value262\",\"\u0412\u0438\u0437\u0438\u043d\u0433\u0430 \u0441\",\"Stathelle\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value264\" = Table.ReplaceValue(#\"Replaced Value263\",\"\u0418\u0436\u043c\u0430 \u0441\",\"Tvedestrand\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value265\" = Table.ReplaceValue(#\"Replaced Value264\",\"\u041d\u0438\u0436\u043d\u0438\u0439 \u041e\u0434\u0435\u0441 \u043f\u0433\u0442\",\"\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value266\" = Table.ReplaceValue(#\"Replaced Value265\",\"\u0421\u0443\u0440\u0433\u0443\u0442\",\"Surgut\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value267\" = Table.ReplaceValue(#\"Replaced Value266\",\"\u0421\u043e\u0441\u043d\u043e\u0433\u043e\u0440\u0441\u043a\",\"Marseille\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value268\" = Table.ReplaceValue(#\"Replaced Value267\",\"\u0420\u0443\u0431\u0446\u043e\u0432\u0441\u043a\",\"Lyon\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value269\" = Table.ReplaceValue(#\"Replaced Value268\",\"\u0410\u043f\u0440\u0435\u043b\u0435\u0432\u043a\u0430\",\"Toulouse\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value270\" = Table.ReplaceValue(#\"Replaced Value269\",\"\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\",\"Nice\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value271\" = Table.ReplaceValue(#\"Replaced Value270\",\"\u0410\u0440\u0430\u043c\u0438\u043b\u044c\",\"Nantes\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value272\" = Table.ReplaceValue(#\"Replaced Value271\",\"\u0410\u0431\u0438\u043d\u0441\u043a\",\"Strasbourg\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value273\" = Table.ReplaceValue(#\"Replaced Value272\",\"\u0410\u0434\u044b\u0433\u0435\u0439\u0441\u043a\",\"Montpellier\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value274\" = Table.ReplaceValue(#\"Replaced Value273\",\"\u0410\u0432\u0441\u044e\u043d\u0438\u043d\u043e \u0414\u043e\u0440\u043e\u0445\u043e\u0432\u0441\u043a\u043e\u0435 \u0434\",\"Bordeaux\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value275\" = Table.ReplaceValue(#\"Replaced Value274\",\"\u0410\u0433\u0430\u043b\u0430\u0442\u043e\u0432\u043e \u0434\",\"Lille\",Replacer.ReplaceText,{\"City\"}),\n    #\"Replaced Value276\" = Table.ReplaceValue(#\"Replaced Value275\",\"\u0410\u0432\u0441\u044e\u043d\u0438\u043d\u043e \u043f\",\"Rennes\",Replacer.ReplaceText,{\"City\"})\nin\n    #\"Replaced Value276\"", "ADDCOLUMNS(CALENDARAUTO(),\n\"\u0414\u0430\u0442\u0430_\u0422\u0435\u043a\u0441\u0442\", FORMAT([Date],\"YYYYMMDD\"), \n\"\u0413\u043e\u0434\", YEAR([Date]),\n\"\u041c\u0435\u0441\u044f\u0446\", MONTH([Date]),\n\"\u041a\u0432\u0430\u0440\u0442\u0430\u043b\", FORMAT([Date],\"Q\"),\n\"\u041c\u0435\u0441\u044f\u0446_\u0431\u0443\u043a\u0432\", FORMAT([Date],\"mmm\"),\n\"\u043c\u0435\u0441\u044f\u0446-\u0433\u043e\u0434\", FORMAT([Date],\"mmm YYYY\"),\n\"\u0414\u0435\u043d\u044c (\u043f\u043d = 1)\", WEEKDAY([Date],2),\n\"\u0414\u0435\u043d\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u043c\", FORMAT([Date],\"ddd\"),\n\"\u041d\u043e\u043c\u0435\u0440 \u043d\u0435\u0434\u0435\u043b\u0438 (\u043d\u0435\u0434\u0435\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043d)\", WEEKNUM([Date],2),\n\"\u041c\u0435\u0441\u044f\u0446_\u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e\", FORMAT([Date],\"mmmm\"),\n\"\u0413\u043e\u0434 \u041a\u0432\u0430\u0440\u0442 \u043c\u0435\u0441\u044f\u0446\", FORMAT([Date],\"YYYY-Q-mm\"))\n\n", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\6vmodule\\Raw data farm_rus.xlsx\"), null, true),\n    \u0442\u0430\u0431\u0420\u0435\u0430\u043a\u0446\u0438\u044f_Table = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0442\u0430\u0431\u0420\u0435\u0430\u043a\u0446\u0438\u044f\",Kind=\"Table\"]}[Data],\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(\u0442\u0430\u0431\u0420\u0435\u0430\u043a\u0446\u0438\u044f_Table,{{\"Reaction\", type text}, {\"\u0420\u0435\u0430\u043a\u0446\u0438\u044f\", type text}, {\"\u041f\u043e\u0440\u044f\u0434\u043e\u043a\", Int64.Type}})\nin\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\6vmodule\\Raw data farm_rus.xlsx\"), null, true),\n    \u0442\u0430\u0431\u0420\u0435\u0430\u043a\u0446\u0438\u044f_Table = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0441\u043f\u0440\u041f\u0435\u0440\u0438\u043e\u0434\u044b\",Kind=\"Table\"]}[Data],\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(\u0442\u0430\u0431\u0420\u0435\u0430\u043a\u0446\u0438\u044f_Table,{{\"\u041f\u0435\u0440\u0438\u043e\u0434 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\", type text}, {\"\u041f\u043e\u0440\u044f\u0434\u043e\u043a\", Int64.Type}})\nin\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\6vmodule\\Raw data farm_rus.xlsx\"), null, true),\n    \u0442\u0430\u0431\u0420\u0435\u0430\u043a\u0446\u0438\u044f_Table = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0441\u043f\u0440\u0422\u0438\u043f\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0430\",Kind=\"Table\"]}[Data],\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(\u0442\u0430\u0431\u0420\u0435\u0430\u043a\u0446\u0438\u044f_Table,{{\"EventType\", type text}, {\"\u041f\u043e\u0440\u044f\u0434\u043e\u043a\", Int64.Type}})\nin\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\Users\\eadiy\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\data storytelling\\6vmodule\\Raw data farm_rus.xlsx\"), null, true),\n    \u0442\u0430\u0431\u0420\u0435\u0430\u043a\u0446\u0438\u044f_Table = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0441\u043f\u0440\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u041a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\",Kind=\"Table\"]}[Data],\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(\u0442\u0430\u0431\u0420\u0435\u0430\u043a\u0446\u0438\u044f_Table,{{\"Category\", type text}, {\"\u041f\u043e\u0440\u044f\u0434\u043e\u043a\", Int64.Type}})\nin\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\"", "\n        ADDCOLUMNS(\n            SUMMARIZE('data for update',\n                    'data for update'[SLM_FullName],\n                    'data for update'[Week]\n            ),\n            \"\u041a\u043e\u043b-\u0432\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432+\u0411\u0440\u0435\u043d\u0434\",\n            [_\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b+\u0411\u0440\u0435\u043d\u0434],\n             \"\u041a\u043e\u043b-\u0432\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432\",\n            [_\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b],\n            \"\u041a\u043e\u043b-\u0432\u043e \u043c\u0438\u043d\u0443\u0442\",\n            [_\u041a\u043e\u043b-\u0432\u043e \u043c\u0438\u043d\u0443\u0442],\n            \"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\",\n            CALCULATE(AVERAGEA('data for update'[CallDuration])),\n            \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u041f\u043e\u0437\u0438\u0442\u0438\u0432\u0420\u0435\u0430\u043a\u0446\u0438\u0439\",\n            [_\u041a\u043e\u043b-\u0432\u043e \u041f\u043e\u0437\u0438\u0442\u0438\u0432.\u0440\u0435\u0430\u043a\u0446\u0438\u0439],\n            \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u041a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\",\n            [_\u041a\u043e\u043b-\u0432\u043e\u041a\u043b\u0438\u0435\u043d\u0442\u043e\u0432],\n            \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432\",\n            [_\u041a\u043e\u043b-\u0432\u043e\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432]\n        )\n", "SUMMARIZE(\n            '\u0421\u0432\u043e\u0434 \u043f\u043e SLM',    \n            '\u0421\u0432\u043e\u0434 \u043f\u043e SLM'[Week],\n            \"\u0421\u0440\u0435\u0434\u043d\u0435\u0435\u041a\u043e\u043b\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432\u041d\u0435\u0434\u0435\u043b\u044f\",\n            CALCULATE(AVERAGE('\u0421\u0432\u043e\u0434 \u043f\u043e SLM'[\u041a\u043e\u043b-\u0432\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432+\u0411\u0440\u0435\u043d\u0434]))    \n        )", "\n                SUMMARIZE(\n                    'data for update',\n                    'data for update'[MR_FullName],\n                    \"\u0420\u0435\u0439\u0442\u0438\u043d\u0433\",\n                    [_\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b \u0424\u0430\u043a\u0442\u043a\u041f\u043b\u0430\u043d\u0443]*[_\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u0432 \u0434\u0435\u043d\u044c \u043d\u0430 1 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430]*[_\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c]*[_% \u041f\u043e\u0437\u0438\u0442\u0438\u0432.\u0440\u0435\u0430\u043a\u0446\u0438\u0439]\n                )   ", "SUMMARIZE(    'data for update',\n    'data for update'[FLM_FullName],\n    'data for update'[SLM_FullName])", "SUMMARIZE(    'data for update',\n    'data for update'[FLM_FullName],\n    \"\u0421\u0443\u043c\u043c\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\", [_\u0420\u0435\u0439\u0442\u0438\u043d\u0433])", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = fnDateTable(Date.FromText(\"1/8/2018\")),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Week Ending\", type date}}),\n    #\"Added Month-Year\" = Table.AddColumn(#\"Changed Type\", \"Month-Year\", each Text.Start([MonthName],3)&\"-\"&Text.From([Year])),\n    #\"Added MonthYearSortBy\" = Table.AddColumn(#\"Added Month-Year\", \"MonthYearSortBy\", each [Year]*100+[MonthNumberOfYear]),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added MonthYearSortBy\",{{\"Week Ending\", type date}, {\"MonthYearSortBy\", Int64.Type}, {\"IsToday\", type logical}, {\"DayOfMonth\", Int64.Type}}),\n    CoreTable = Table.RenameColumns(#\"Changed Type1\",{{\"Date\", \"Datestamp\"}}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "Calendar(Date(Year(MIN('&DateTable'[Week Ending])), 1, 1), Date(Year(MAX('&DateTable'[Week Ending])), 12, 31))", "let\n    Source = GetStorageContainerContent(),\n    #\"Removed Content\" = Table.RemoveColumns(Source,{\"Content\",\"Name\",\"Date modified\"})\nin\n    #\"Removed Content\"", "let\n    Source = #\"%InteractionModel\",\n    CoreTable = Table.RemoveColumns(Source,{\"attributes\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "\"https://mktdemospring.crm.dynamics.com\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "\"mktdemospring\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "\"cabeln2\" meta [IsParameterQuery=true, List={}, DefaultValue=..., Type=\"Text\", IsParameterQueryRequired=true]", "let\n    Source = #\"#CDSTHubSource\",\n    \n    CustomProfiles = Source{[Group=\"custom\"]}[Data],\n    #\"Sorted Rows\" = Table.Sort(CustomProfiles,{{\"EntitySetName\", Order.Ascending}}),\n    CoreTable = Table.SelectColumns(#\"Sorted Rows\",{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = #\"#CDSTHubSource\",\n    \n    CustomProfiles = Source{[Group=\"cdm\"]}[Data],\n    CoreTable = Table.SelectColumns(CustomProfiles,{\"EntitySetName\", \"SchemaName\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = AzureStorage.Blobs(#\"@AzureStorageAccountName\")\nin\n    Source", "Calendar(Date(Year(MIN('&DateTable'[Datestamp])), 1, 1), Date(Year(MAX('&DateTable'[Datestamp])), 12, 31))", "31 meta [IsParameterQuery=true, List={7, 14, 31, 180, 365}, DefaultValue=7, Type=\"Number\", IsParameterQueryRequired=false]", "Calendar(Date(Year(MIN('#StorageContainerContentIndex'[Datestamp])), 1, 1), Date(Year(MAX('#StorageContainerContentIndex'[Datestamp])), 12, 31))", "let\n    Source = #\"!KnownInteractions\",\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Load Data] = true))\nin\n    #\"Filtered Rows\"", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_customerjourney\"),\n    #\"Changed Type\" = Table.TransformColumnTypes(source,{{\"createdon\", type date}, {\"msdyncrm_startdatetime\", type date}, {\"msdyncrm_enddatetime\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_name\", \"Journey Name\"}, {\"msdyncrm_type_display\", \"Journey Type\"}, {\"msdyncrm_enddatetime\", \"Jorney End\"}, {\"msdyncrm_description\", \"Description\"}, {\"msdyncrm_entitytarget_display\", \"Target audience\"}, {\"msdyncrm_startdatetime\", \"Journey Start\"}, {\"msdyncrm_customerjourneyid\", \"CustomerJourneyId\"}, {\"statuscode_display\", \"Journey Status\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('CustomerJourneys'[createdon])), 1, 1), Date(Year(MAX('CustomerJourneys'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[modifiedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[Jorney End])), 1, 1), Date(Year(MAX('CustomerJourneys'[Jorney End])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[Journey Start])), 1, 1), Date(Year(MAX('CustomerJourneys'[Journey Start])), 12, 31))", "Calendar(Date(Year(MIN('CustomerJourneys'[overriddencreatedon])), 1, 1), Date(Year(MAX('CustomerJourneys'[overriddencreatedon])), 12, 31))", "let\n    source = GetCDST_CustomProfileTable(\"msdyncrm_marketingemail\"),\n    #\"Removed Other Columns\" = Table.SelectColumns(source,{\"createdby\", \"createdon\", \"modifiedby\", \"modifiedon\", \"msdyncrm_clickmap\", \"msdyncrm_description\", \"msdyncrm_email_contenttype\", \"msdyncrm_email_contenttype_display\", \"msdyncrm_fromemail\", \"msdyncrm_fromname\", \"msdyncrm_fromuser\", \"msdyncrm_insights_placeholder\", \"msdyncrm_istemplategalleryneeded\", \"msdyncrm_marketingemailid\", \"msdyncrm_messagedesignation\", \"msdyncrm_messagedesignation_display\", \"msdyncrm_name\", \"msdyncrm_replytoemail\", \"msdyncrm_subject\", \"msdyncrm_templateid\", \"msdyncrm_to\", \"msdyncrm_uicentityid\", \"overriddencreatedon\", \"ownerid\", \"owningbusinessunit\", \"owningteam\", \"owninguser\", \"statecode\", \"statecode_display\", \"statuscode\", \"statuscode_display\", \"timezoneruleversionnumber\", \"utcconversiontimezonecode\", \"versionnumber\"}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"createdon\", type date}, {\"modifiedon\", type date}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"msdyncrm_name\", \"Message Name\"}, {\"msdyncrm_subject\", \"Subject\"}, {\"msdyncrm_fromname\", \"From Name\"}, {\"msdyncrm_description\", \"Description\"}, {\"msdyncrm_messagedesignation_display\", \"Designation\"}, {\"msdyncrm_email_contenttype_display\", \"Content Type\"}, {\"msdyncrm_marketingemailid\", \"MessageId\"}, {\"msdyncrm_fromemail\", \"From Email Address\"}, {\"msdyncrm_fromuser\", \"From User Id\"}, {\"msdyncrm_templateid\", \"TemplateId\"}, {\"statuscode_display\", \"Status\"}})\nin\n    #\"Renamed Columns\"", "Calendar(Date(Year(MIN('MarketingEmails'[createdon])), 1, 1), Date(Year(MAX('MarketingEmails'[createdon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmails'[modifiedon])), 1, 1), Date(Year(MAX('MarketingEmails'[modifiedon])), 12, 31))", "Calendar(Date(Year(MIN('MarketingEmails'[overriddencreatedon])), 1, 1), Date(Year(MAX('MarketingEmails'[overriddencreatedon])), 12, 31))", "let\n    Source = Table.NestedJoin(#\"#StorageContainerContentIndex\",{\"Interaction Name\"},#\"!LoadedInteractions\",{\"Interaction Name\"},\"!LoadedInteractions\",JoinKind.Inner),\n    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"!LoadedInteractions\"}),\n    // Filter by the number of daysback\n    FilterByRecency = if (not (#\"@LoadInteractionsForNumberOfDaysBack\" is null))\n      then Table.SelectRows(#\"Removed Columns\", each [DaysFromToday] >= -#\"@LoadInteractionsForNumberOfDaysBack\")\n      else #\"Removed Columns\"\nin\n    FilterByRecency", "Calendar(Date(Year(MIN('#FilteredStorageContainerContentIndex'[Datestamp])), 1, 1), Date(Year(MAX('#FilteredStorageContainerContentIndex'[Datestamp])), 12, 31))", "let\n    Source = #\"%InteractionModel\",\n    #\"Expanded attributes\" = Table.ExpandListColumn(Source, \"attributes\"),\n    CoreTable = Table.ExpandRecordColumn(#\"Expanded attributes\", \"attributes\", {\"name\", \"dataType\"}, {\"Attribute Name\", \"Attribute Type\"}),\n    Result = Table.Buffer(CoreTable)\nin\n    Result", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8slMKkosqlTSUTLUMzUw1DO0NDQwMFaK1YlWckosTnVJLEkMzi8tSk4thigxNIAoMQcrccxLzKmsSi2CaofKGSnFxgIA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Product = _t, Version = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Product\", type text}, {\"Version\", type text}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"Rendered\", each [Product] & \": \" & [Version])\nin\n    #\"Added Custom\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"lVXbcuIwDP0XnvsTJaWz7NBpJ4HtQ6cPjiMSD47tlWW6/P3KAXpJnDR9JOdIPpKOxMvL4laSOio6ZdaQkLTUVh6gWtws9kJ7WLzejFH4lwdDM5irfwRohJ4fUQTnELxX1kyx75R3gmQzrfcJrYy5TH0vlO5xmbNX2Arip3L4G8DTBO5dLKFP6KSABurnRhAEGbZpQWl28GTbrBHGgP5B3AZENY/++YF0RR0D8LcNaOCaLQdpsdq5SgzK/Mpf87C7dhUksM9dtTyCbshLG4wcRSeA5WnnAUfhu+C0kizytqqihUaJayNiv+BS3yjvQXXeuc5ZkPiOmoOOTUpTM1Z3Lo8wfP4e8yvjl1rIg1aeE2yUOST0s9VYNqZadA9QlRy/sdYlUItvAqtU4C/+PjqRCObQWoJRyqMDkyiqAFOl9+4K0zDG7mn0nQh+I6UIpZeoXGfBULaqN1pDvCKpdV0dWU7WgDyszRDIoeahnJ09jWaChfXr5d63ZzX9ZyPyR3nV/742R6EVN14qp/iJlJ/fOU6ftnaCEQcBmCLEw1HwanNDbe/2Rf/FPXnXPjzIj4Ee92f/siEVfc39JLzfNmhD3cy6TTmnQJAUH/7Ykw+8iKc+aC5kTrYC6pb79gBtCegz9gvFs1enad3Scnm+UW5VDaZxYV3MVabRnfEjON8kHvxM3QGPcEqe5i2qup6Z5sLlv59ni4e9tm+zwp6hjF5Mtf8CDcz6+h8=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"Interaction Name\" = _t, #\"Load Data\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Interaction Name\", type text}, {\"Load Data\", type logical}})\nin\n    #\"Changed Type\"", "\"c1b8fe39-53b4-e911-a968-000d3a13cead\" meta [IsParameterQuery=true, List={\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", \"fe8e15b8-92b5-e811-a982-000d3a1ada5f\", \"1a030b50-8826-e911-a978-000d3a346695\"}, DefaultValue=\"c4d57347-9420-e911-a9af-000d3a1cf0ea\", Type=\"Text\", IsParameterQueryRequired=true]", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Procurement\\Data\\NEW\\ProcurementObfuscatedData.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Currency\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Currency\", \"Currency\"}, {\"Symbol\", \"Symbol\"}, {\"Currency Abbr\", \"Currency Abbr\"}, {\"CurrencyID\", \"CurrencyID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Currency\", type text}, {\"Symbol\", type text}, {\"Currency Abbr\", type text}, {\"CurrencyID\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Procurement\\Data\\NEW\\ProcurementObfuscatedData.xlsx\"), null, true),\n    Sheet = Source{[Item=\"ExchangeRate\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"DateID\", \"DateID\"}, {\"CurrencyID\", \"CurrencyID\"}, {\"Exchange Rate\", \"Exchange Rate\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"DateID\", type text}, {\"CurrencyID\", type number}, {\"Exchange Rate\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Procurement\\Data\\NEW\\ProcurementObfuscatedData.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Invoice Line Item\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"InvoiceDateID\", \"InvoiceDateID\"}, {\"InvoiceID\", \"InvoiceID\"}, {\"ItemID\", \"ItemID\"}, {\"CurrencyID\", \"CurrencyID\"}, {\"Line Item\", \"Line Item\"}, {\"Line Item Quantity\", \"Line Item Quantity\"}, {\"Unit Price LOC\", \"Unit Price LOC\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"InvoiceDateID\", type text}, {\"InvoiceID\", type number}, {\"ItemID\", type number}, {\"CurrencyID\", type number}, {\"Line Item\", Int64.Type}, {\"Line Item Quantity\", type number}, {\"Unit Price LOC\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Procurement\\Data\\NEW\\ProcurementObfuscatedData.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Item\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Commodity\", \"Commodity\"}, {\"ItemID\", \"ItemID\"}, {\"Sub Category\", \"Sub Category\"}, {\"Category\", \"Category\"}, {\"Commodity Detail\", \"Commodity Detail\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Commodity\", type text}, {\"ItemID\", type number}, {\"Sub Category\", type text}, {\"Category\", type text}, {\"Commodity Detail\", type text}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Procurement\\Data\\NEW\\ProcurementObfuscatedData.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Location\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Location Number\", \"Location Number\"}, {\"Location Country\", \"Country/Region\"}, {\"Location Region\", \"Location Region\"}, {\"LocationID\", \"LocationID\"}, {\"Location City\", \"City\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Location Number\", type text}, {\"Country/Region\", type text}, {\"Location Region\", type text}, {\"LocationID\", type number}, {\"City\", type text}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Procurement\\Data\\NEW\\ProcurementObfuscatedData.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Vendor\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Vendor City\", \"Vendor City\"}, {\"Vendor State\", \"Vendor State\"}, {\"Vendor Postal Code\", \"Vendor Postal Code\"}, {\"Vendor Country\", \"Vendor Country/Region\"}, {\"VendorID\", \"VendorID\"}, {\"Vendor Name\", \"Vendor Name\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Vendor City\", type text}, {\"Vendor State\", type text}, {\"Vendor Postal Code\", type text}, {\"Vendor Country/Region\", type text}, {\"VendorID\", type number}, {\"Vendor Name\", type text}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Procurement\\Data\\NEW\\ProcurementObfuscatedData.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Date\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"DateID\", \"DateID\"}, {\"Day\", \"Day\"}, {\"DayOfWeekNo\", \"DayOfWeekNo\"}, {\"DayOfWeek\", \"DayOfWeek\"}, {\"DayOfYear\", \"DayOfYear\"}, {\"WeekNo\", \"WeekNo\"}, {\"MonthNo\", \"MonthNo\"}, {\"Month\", \"Month\"}, {\"QtrNo\", \"QtrNo\"}, {\"Quarter\", \"Quarter\"}, {\"Year\", \"Year\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"DateID\", type text}, {\"Day\", type text}, {\"DayOfWeekNo\", type text}, {\"DayOfWeek\", type text}, {\"DayOfYear\", type text}, {\"WeekNo\", type text}, {\"MonthNo\", type text}, {\"Month\", type text}, {\"QtrNo\", type text}, {\"Quarter\", type text}, {\"Year\", type text}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Procurement\\Data\\NEW\\ProcurementObfuscatedData.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Invoice\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"InvoiceID\", \"InvoiceID\"}, {\"InvoiceDateID\", \"InvoiceDateID\"}, {\"VendorID\", \"VendorID\"}, {\"LocationID\", \"LocationID\"}, {\"Discount Days\", \"Discount Days\"}, {\"Discount Percent\", \"Discount Percent\"}, {\"Payment Terms Days\", \"Payment Terms Days\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"InvoiceID\", type number}, {\"InvoiceDateID\", type number}, {\"VendorID\", type number}, {\"LocationID\", type number}, {\"Discount Days\", Int64.Type}, {\"Discount Percent\", type number}, {\"Payment Terms Days\", Int64.Type}})\n in\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "ADDCOLUMNS( CALENDARAUTO(),\n\"\u0414\u0430\u0442\u0430_\u0422\u0435\u043a\u0441\u0442\", FORMAT([Date],\"YYYYMMDD\"), \n\"\u0413\u043e\u0434\", YEAR([Date]),\n\"\u041c\u0435\u0441\u044f\u0446\", MONTH([Date]),\n\"\u041a\u0432\u0430\u0440\u0442\u0430\u043b\", FORMAT([Date],\"Q\"),\n\"\u041c\u0435\u0441\u044f\u0446_\u0431\u0443\u043a\u0432\", FORMAT([Date],\"mmm\"),\n\"\u043c\u0435\u0441\u044f\u0446-\u0433\u043e\u0434\", FORMAT([Date],\"mmm-YY\"),\n\"\u0414\u0435\u043d\u044c (\u043f\u043d = 1)\", WEEKDAY([Date],2),\n\"\u0414\u0435\u043d\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u043c\", FORMAT([Date],\"ddd\"),\n\"\u041d\u043e\u043c\u0435\u0440 \u043d\u0435\u0434\u0435\u043b\u0438 (\u043d\u0435\u0434\u0435\u043b\u044f \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043d)\", WEEKNUM([Date],2),\n\"\u041c\u0435\u0441\u044f\u0446_\u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e\", FORMAT([Date],\"mmmm\"),\n\"\u0413\u043e\u0434 \u041a\u0432\u0430\u0440\u0442 \u043c\u0435\u0441\u044f\u0446\", FORMAT([Date],\"YYYY-Q-mm\"))", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\WORK\\INSBA\\07 Sminex\\\u041f\u0440\u0435\u0441\u0435\u0439\u043b\\\u0413\u041f\u041f (1).xlsx\"), null, true),\n    \u041c\u0435\u0440\u044b_Table = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0441\u043f\u0440\u041c\u0435\u0440\u044b\",Kind=\"Table\"]}[Data]\nin\n    \u041c\u0435\u0440\u044b_Table", "Calendar(Date(Year(MIN('\u041a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e'[Date])), 1, 1), Date(Year(MAX('\u041a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e'[Date])), 12, 31))", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"C:\\WORK\\INSBA\\07 Sminex\\\u041f\u0440\u0435\u0441\u0435\u0439\u043b\\\u0413\u041f\u041f (1).xlsx\"), null, true),\n    \u0422\u0430\u0431\u043b\u0438\u0446\u04301_Table = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0441\u043f\u0440\u041c\u0435\u0441\u044f\u0446\u044b\",Kind=\"Table\"]}[Data],\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(\u0422\u0430\u0431\u043b\u0438\u0446\u04301_Table,{{\"Month\", type text}, {\"\u041c\u0435\u0441\u044f\u0446\", type text}})\nin\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"D:\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\Property Sales Base Demo \u2014 \u043a\u043e\u043f\u0438\u044f.xlsx\"), null, true),\n    \u0411\u0430\u0437\u0430_Sheet = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u0411\u0430\u0437\u0430\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(\u0411\u0430\u0437\u0430_Sheet, [PromoteAllScalars=true]),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\",{{\"\u041f\u0440\u043e\u0435\u043a\u0442\u044b\", type text}, {\"\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u044b\", type text}, {\"\u041f\u0435\u0440\u0438\u043e\u0434\", type date}, {\"\u0412\u0438\u0434 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\", type text}, {\"\u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u0444\u0430\u043a\u0442, \u043c\u043b\u043d. \u0440\u0443\u0431.\", type number}, {\"\u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\u0446\u0438\u044f \u0444\u0430\u043a\u0442, \u043c\u043b\u043d. \u0440\u0443\u0431.\", type number}, {\"\u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043f\u043b\u0430\u043d, \u043c\u043b\u043d. \u0440\u0443\u0431.\", type number}, {\"\u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u043d, \u043c\u043b\u043d. \u0440\u0443\u0431.\", type number}, {\"\u0427\u0438\u0441\u043b\u043e \u0441\u0434\u0435\u043b\u043e\u043a, \u0444\u0430\u043a\u0442\", Int64.Type}, {\"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0434\u0435\u043b\u043a\u0438, \u0434\u043d\u0435\u0439\", type number}, {\"1\", type any}, {\"1_1\", type any}, {\"1_2\", type any}, {\"1_3\", type any}, {\"1_4\", type any}}),\n    #\"\u0414\u0440\u0443\u0433\u0438\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\" = Table.SelectColumns(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\",{\"\u041f\u0440\u043e\u0435\u043a\u0442\u044b\", \"\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u044b\", \"\u041f\u0435\u0440\u0438\u043e\u0434\", \"\u0412\u0438\u0434 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\", \"\u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u0444\u0430\u043a\u0442, \u043c\u043b\u043d. \u0440\u0443\u0431.\", \"\u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\u0446\u0438\u044f \u0444\u0430\u043a\u0442, \u043c\u043b\u043d. \u0440\u0443\u0431.\", \"\u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043f\u043b\u0430\u043d, \u043c\u043b\u043d. \u0440\u0443\u0431.\", \"\u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u043d, \u043c\u043b\u043d. \u0440\u0443\u0431.\", \"\u0427\u0438\u0441\u043b\u043e \u0441\u0434\u0435\u043b\u043e\u043a, \u0444\u0430\u043a\u0442\", \"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0434\u0435\u043b\u043a\u0438, \u0434\u043d\u0435\u0439\"}),\n    #\"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c\" = Table.SelectRows(#\"\u0414\u0440\u0443\u0433\u0438\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\", each ([\u0412\u0438\u0434 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430] <> \"\u0421\u043a\u043b\u0430\u0434\"))\nin\n    #\"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c\"", "let\n    \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a = Excel.Workbook(File.Contents(\"D:\\Documents\\\u0420\u0410\u0411\u041e\u0422\u0410\\Call center Base Demo \u2014 \u043a\u043e\u043f\u0438\u044f.xlsx\"), null, true),\n    #\"\u041f\u043b\u0430\u043d-\u0444\u0430\u043a\u0442 \u041a\u043e\u043b\u043b-\u0446\u0435\u043d\u0442\u0440_Sheet\" = \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a{[Item=\"\u041f\u043b\u0430\u043d-\u0444\u0430\u043a\u0442 \u041a\u043e\u043b\u043b-\u0446\u0435\u043d\u0442\u0440\",Kind=\"Sheet\"]}[Data],\n    #\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\" = Table.PromoteHeaders(#\"\u041f\u043b\u0430\u043d-\u0444\u0430\u043a\u0442 \u041a\u043e\u043b\u043b-\u0446\u0435\u043d\u0442\u0440_Sheet\", [PromoteAllScalars=true]),\n    #\"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c\" = Table.SelectRows(#\"\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438\", each ([\u041c\u0435\u0441\u044f\u0446] <> \"\u041e\u0431\u0449\u0438\u0439 \u0438\u0442\u043e\u0433\")),\n    #\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\" = Table.TransformColumnTypes(#\"\u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c\",{{\"\u041f\u0440\u043e\u0435\u043a\u0442\", type text}, {\"\u041f\u0440\u043e\u0444\u0438\u043b\u044c\", type text}, {\"\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\", type text}, {\"\u041c\u0435\u0441\u044f\u0446\", type date}, {\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0432\u043e\u043d\u043a\u043e\u0432\", Int64.Type}, {\"\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0437\u0432\u043e\u043d\u043a\u0430\", type number}, {\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u041f\u043e\u043a\u0430\u0437\u043e\u0432\", Int64.Type}, {\"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0421\u0440\u043e\u043a \u0417\u0432\u043e\u043d\u043e\u043a-\u041f\u043e\u043a\u0430\u0437\", type number}, {\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0421\u0434\u0435\u043b\u043e\u043a\", Int64.Type}, {\"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0421\u0440\u043e\u043a \u043f\u043e\u043a\u0430\u0437-\u0441\u0434\u0435\u043b\u043a\u0430\", type number}, {\"\u0421\u0443\u043c\u043c\u0430 \u0441\u0434\u0435\u043b\u043a\u0438 \", type number}, {\"\u0421\u0443\u043c\u043c\u0430 \u0441\u0434\u0435\u043b\u043a\u0438 \u043f\u043b\u0430\u043d\", type number}}),\n    #\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\" = Table.RenameColumns(#\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\",{{\"\u0421\u0443\u043c\u043c\u0430 \u0441\u0434\u0435\u043b\u043a\u0438 \", \"\u041f\u0440\u043e\u0434\u0430\u0436\u0438 \u0444\u0430\u043a\u0442, \u043c\u043b\u043d. \u0440\u0443\u0431.\"}, {\"\u0421\u0443\u043c\u043c\u0430 \u0441\u0434\u0435\u043b\u043a\u0438 \u043f\u043b\u0430\u043d\", \"\u041f\u0440\u043e\u0434\u0430\u0436\u0438 \u043f\u043b\u0430\u043d, \u043c\u043b\u043d. \u0440\u0443\u0431.\"}, {\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0432\u043e\u043d\u043a\u043e\u0432\", \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0417\u0432\u043e\u043d\u043a\u043e\u0432\"}})\nin\n    #\"\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\"", "let\n    Source = Sql.Database(\".\", \"RetailBIDW\", [Query=\"select * from ip.retail.StoreDim\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"LocationID\", \"LocationID\"}, {\"City\", \"City Name\"}, {\"Territory\", \"Territory\"}, {\"PostalCode\", \"PostalCode\"}, {\"OpenDate\", \"OpenDate\"}, {\"SellingAreaSize\", \"SellingAreaSize\"}, {\"DistrictName\", \"DistrictName\"}, {\"Name\", \"Name\"}, {\"StoreNumberName\", \"StoreNumberName\"}, {\"StoreNumber\", \"StoreNumber\"}, {\"Chain\", \"Chain\"}, {\"DM\", \"DM\"}, {\"DM_Pic\", \"DM_Pic\"}, {\"DistrictID\", \"DistrictID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"LocationID\", Int64.Type}, {\"City Name\", type text}, {\"Territory\", type text}, {\"PostalCode\", type text}, {\"OpenDate\", type datetime}, {\"SellingAreaSize\", Int64.Type}, {\"DistrictName\", type text}, {\"Name\", type text}, {\"StoreNumberName\", type text}, {\"StoreNumber\", Int64.Type}, {\"Chain\", type text}, {\"DM\", type text}, {\"DM_Pic\", type text}, {\"DistrictID\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"RetailBIDW\", [Query=\"SELECT s.[MonthID]+200 MonthID#(lf)      ,s.[ItemID]#(lf)      ,s.[LocationID]#(lf)      ,s.[Sum_GrossMarginAmount]#(lf)      ,s.[Sum_Regular_Sales_Dollars]#(lf)      ,s.[Sum_Markdown_Sales_Dollars]#(lf)      ,s.[Sum_Regular_Sales_Units]#(lf)      ,s.[Sum_Markdown_Sales_Units]#(lf)      ,s.[ScenarioID]#(lf)  FROM [dbo].[Monthly_sales] s tablesample (10 percent), IP.[Retail].[StoreDim] d #(lf)  where s.LocationID = d.[LocationID]#(lf) and MonthID+200>=concat(year(d.opendate ),RIGHT('0'+cast(month(d.opendate ) as varchar(2)), 2) )\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"MonthID\", \"MonthID\"}, {\"ItemID\", \"ItemID\"}, {\"LocationID\", \"LocationID\"}, {\"Sum_GrossMarginAmount\", \"Sum_GrossMarginAmount\"}, {\"Sum_Regular_Sales_Dollars\", \"Sum_Regular_Sales_Dollars\"}, {\"Sum_Markdown_Sales_Dollars\", \"Sum_Markdown_Sales_Dollars\"}, {\"ScenarioID\", \"ScenarioID\"}, {\"Sum_Regular_Sales_Units\", \"Sum_Regular_Sales_Units\"}, {\"Sum_Markdown_Sales_Units\", \"Sum_Markdown_Sales_Units\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"MonthID\", Int64.Type}, {\"ItemID\", Int64.Type}, {\"LocationID\", Int64.Type}, {\"Sum_GrossMarginAmount\", type number}, {\"Sum_Regular_Sales_Dollars\", type number}, {\"Sum_Markdown_Sales_Dollars\", type number}, {\"ScenarioID\", Int64.Type}, {\"Sum_Regular_Sales_Units\", type number}, {\"Sum_Markdown_Sales_Units\", type number}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"RetailBIDW\", [Query=\"SELECT [ItemID]#(lf)     -- ,[SupplierID]#(lf)      --,[Name]#(lf)      --,[Description]#(lf)      --,[BrandName]#(lf)      ,[ResponsibleBuyerLastName] +', ' + [ResponsibleBuyerFirstName] Buyer#(lf)      ,left([SegmentName], 4) [SegmentName]#(lf)     -- ,[SegmentID]#(lf)      ,left([FamilyName], 3) FamilyNane#(lf)    --  ,[FamilyID]#(lf)      ,[ClassName]#(lf)     -- ,[ClassID]#(lf)   --   ,[ItemCost]#(lf)     -- ,[OriginalItemCost]#(lf)  FROM [RetailBIDW].[dbo].[Item_Dimension]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"ItemID\", \"ItemID\"}, {\"SegmentName\", \"Segment\"}, {\"ClassName\", \"Category\"}, {\"Buyer\", \"Buyer\"}, {\"FamilyNane\", \"FamilyNane\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"ItemID\", Int64.Type}, {\"Segment\", type text}, {\"Category\", type text}, {\"Buyer\", type text}, {\"FamilyNane\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"RetailBIDW\", [Query=\"select distinct#(lf)concat(year(dateadd(year, 2, [BusinessDayDate] )),RIGHT('0'+cast(month(dateadd(year, 2, [BusinessDayDate] )) as varchar(2)), 2), RIGHT('0'+cast(day(dateadd(year, 2, [BusinessDayDate] )) as varchar(2)), 2) ) ReportingPeriodID, #(lf)  month(dateadd(year, 2, [BusinessDayDate] )) Period, #(lf)  left(DATENAME(month, dateadd(year, 2, [BusinessDayDate] )), 3) FiscalMonth, #(lf)  year(dateadd(year, 2, [BusinessDayDate] ) ) FiscalYear, #(lf)  dateadd(year, 2, [BusinessDayDate] ) [BusinessDayDate]#(lf)from [Time_Dimension]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"ReportingPeriodID\", \"ReportingPeriodID\"}, {\"Period\", \"Period\"}, {\"FiscalYear\", \"FiscalYear\"}, {\"FiscalMonth\", \"FiscalMonth\"}, {\"BusinessDayDate\", \"Month\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"ReportingPeriodID\", Int64.Type}, {\"Period\", Int64.Type}, {\"FiscalYear\", Int64.Type}, {\"FiscalMonth\", type text}, {\"Month\", type datetime}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"RetailBIDW\", [Query=\"SELECT [dbo].[District_Dimension].*   FROM [dbo].[District_Dimension]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"DistrictID\", \"DistrictID\"}, {\"DistrictName\", \"District\"}, {\"DM\", \"DM\"}, {\"DM_Pic_fl\", \"DM_Pic_fl\"}, {\"DM_Pic\", \"DM_Pic\"}, {\"BusinessUnitID\", \"BusinessUnitID\"}, {\"DMImage\", \"DMImage\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"DistrictID\", Int64.Type}, {\"District\", type text}, {\"DM\", type text}, {\"DM_Pic_fl\", type text}, {\"DM_Pic\", type text}, {\"BusinessUnitID\", Int64.Type}, {\"DMImage\", type binary}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "Calendar(Date(Year(MIN('Store'[OpenDate])), 1, 1), Date(Year(MAX('Store'[OpenDate])), 12, 31))", "Calendar(Date(Year(MIN('Time'[Month])), 1, 1), Date(Year(MAX('Time'[Month])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mimyersm\\Dropbox\\Data-27-09-2019.xlsx\"), null, true),\n    Association_Sheet = Source{[Item=\"Association\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Association_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"RuleID\", Int64.Type}, {\"LeftItemSetId\", Int64.Type}, {\"RightItemSetId\", Int64.Type}, {\"Probability\", type number}, {\"Importance\", type number}, {\"Support\", Int64.Type}}),\n    #\"Inserted Merged Column\" = Table.AddColumn(#\"Changed Type\", \"Merged\", each Text.Combine({Text.From([LeftItemSetId], \"en-CA\"), Text.From([RightItemSetId], \"en-CA\")}, \"\"), type text),\n    #\"Removed Duplicates\" = Table.Distinct(#\"Inserted Merged Column\", {\"Merged\"}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Removed Duplicates\",{\"Merged\"})\nin\n    #\"Removed Columns\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mimyersm\\Desktop\\Sales & Marketing Datas.xlsx\"), null, true),\n    Data_Sheet = Source{[Item=\"Data\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Data_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ID\", Int64.Type}, {\"ProductID\", Int64.Type}, {\"StoreID\", Int64.Type}, {\"Unit\", Int64.Type}, {\"Week\", Int64.Type}, {\"Gender\", type text}, {\"Age\", Int64.Type}, {\"Status\", type text}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Changed Type\",1,2,Replacer.ReplaceValue,{\"Week\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Replaced Value\", {\"ProductID\"}, Product, {\"ProductID\"}, \"Product\", JoinKind.LeftOuter),\n    #\"Expanded Product\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Product\", {\"Price\"}, {\"Price\"}),\n    #\"Inserted Multiplication\" = Table.AddColumn(#\"Expanded Product\", \"Multiplication\", each [Price] * [Unit], Int64.Type),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Inserted Multiplication\",{{\"Multiplication\", \"Amount\"}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Renamed Columns\",{\"Price\"}),\n    #\"Merged Queries1\" = Table.NestedJoin(#\"Removed Columns\", {\"Week\"}, Calendar, {\"Week\"}, \"Calendar\", JoinKind.LeftOuter),\n    #\"Expanded Calendar\" = Table.ExpandTableColumn(#\"Merged Queries1\", \"Calendar\", {\"Date\"}, {\"Date\"}),\n    #\"Removed Columns1\" = Table.RemoveColumns(#\"Expanded Calendar\",{\"Week\", \"Gender\", \"Age\"})\nin\n    #\"Removed Columns1\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"bZLNasNADITfxec0SPsjrY5paaFQSkohl5DDus3B4NjUsUsfv6tk7VKyJ8sLn0Yz0n5fYbWqNnUdz+n7+DMehy62qbwLvGZ21tv043At5MlKqqvDal8Zhdrma2oKFIrx2tWZNaBxxs2UtrqPQx1vIRJvxWQpH4TCDCn9HtvvqTSgMyySKUT6k/KpeIonVXru/jECQYAzA44uo14YSsXLsS/JMFp3RYJFNn5GtM8udpvh/HlsS6D3EK4gpwBhAfXxNY7TUMrCWnA5dnZgYHGlVrexLdmiQCZkW2yQabGFoFQzTKdbqQBANsfOQF4WKVR+259KlJcgIVMklI5kofT1bWrq0rYCIVieY0z7Ws4J1e1D3439uS9Ys4HAzJxmunA67q75GPuhKWXCHn3eG4ulfFSHXw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [ManufacturerID = _t, Manufacturer = _t, Type = _t, Longitude = _t, Latitude = _t, image = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ManufacturerID\", Int64.Type}, {\"Manufacturer\", type text}, {\"Type\", type text}, {\"Longitude\", type number}, {\"Latitude\", type number}, {\"image\", type text}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"ManufacturerID\", \"StoreID\"}, {\"Manufacturer\", \"Store\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"fZSxisMwDIZfJWQuqSQ7dtztlg6FPkHpkIMbrxyFG+7tq4vcwD9I4IQUvg/kfk5ut5H4qEuI28ByItI1rNPwPY2HkfW6rI/+xOP9oHzxeQFeNp6Tzyfg08YL+XwGPhtffX4Gfrb5dR5x+KLX+euz76TY/OTzFfhqfPX5BfjF5s8+34Bv+/zJ60V6u67P/tfqz/cOXIPR4H0PriFoyL4L10hoWOfEgZHRsNKkU2XP+E/98fPsh4StNefAKGhYbeHAqGhYb1kCY0HDitN81OUYbdv5Xz+8bM1ZfEMIDOnNW2AwGtZcSmAIGtZcj61+DBxje7V/H/2lEmtOLTAyGtacS2DMaFhzSYFR0LDmiQKjoqHN7y8=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Date = _t, Week = _t, #\"Month Name\" = _t, MonthSort = _t, #\"Week of Year\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type datetime}, {\"Week\", Int64.Type}, {\"Month Name\", type text}, {\"MonthSort\", Int64.Type}, {\"Week of Year\", Int64.Type}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Month Name\", \"Month\"}}),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Date\", type date}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"Week of Year\"})\nin\n    #\"Removed Columns\"", "Calendar(Date(Year(MIN('Calendar'[Date])), 1, 1), Date(Year(MAX('Calendar'[Date])), 12, 31))", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"ldRZb4JAEAfw78KzcZi9t2/W2Naj1mIPj/igqIgUKohH/fTdpgn7urwQQvILs7P/mfncQ6/h7crycLwDiNNlFN82RfPvZXPcLcOkGX6n5nukCQNUSoB4jMOo1zxkkbdozD3iyhFQM2iX/tvqqdLUVVNQVEvo58ktsJy51y4oJ9CN8mTUrzh3/zvVgkEsHtYdrLhwP7pA8wjWpwvfV1y6Fy+F1JAEcRG0K65qNN7nAkL6Lrv23rT72SWa1p1n3UnxVXH069w7UdDJsvQSW18jdspHCS013OYd651zR4Ci0kB7sdrb5qNz8gggckh/Xgq/a3mN5CkU8OEPR9uV5c7JQ2AoKezOvfZAW+8cPQKEMwW3oxy2fOtrZA8JkTC+5odka71z+CgwxXzI0uHs+WS9c/rM6FAzeVxdp/xml45z+ogZPVSw+jy2cmm9c/oIKKIF3HOcFtx65/SZ/jGN8DoWk/hgfY29h8rUv+7sB1lqfZ3Fx83anZTlfhD9+8Uv\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [ProductID = _t, #\"Product Image\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ProductID\", Int64.Type}, {\"Product Image\", type text}}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Changed Type\", {\"ProductID\"}, Product, {\"ProductID\"}, \"Product\", JoinKind.LeftOuter),\n    #\"Expanded Product\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Product\", {\"Product\"}, {\"Product.1\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded Product\",{{\"Product.1\", \"Product\"}})\nin\n    #\"Renamed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Column1 = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})\nin\n    #\"Removed Columns\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"xZlbU+JKEMe/imXt4+72ZC65nDcuwopCooAG9+xDhAEiIYFcUPj0ZwZxq04lW0UrWz4AIanBmV/9u/vf7c+f57XxWGbZ+ddzQ73c6TQcyzNmisONWzlR75Z6zfN8lf0DEC6DWbiT6Xd9IbN5MF58HydLdX/mUAoWowxYNiw6/vdVPDt2oQFUWAReLo3gKsYtdJgwwZ/vltdzzEIOnBEL/IF3wdhhoSDq7QsnZ9/Ovljk/NfXn+cXL2MZqbu0ik4nmEj1wY/HYwtHwLZ2PSEWZrMMTGFaENV/pCmSq6C2BfWXvvTu/g6eeRDPNAVWRaixDeLD5ZH7tZlgMBzE1m0NuV/DsYBGuS8SHFqHCg43IrBb0V8g5Mayl+RvMikB6qofjvNAXdnHq8jkFoPH0ct6scKJwbbVUZ+ajfVmizuqyYgNu2S6uUFFZxUjRx/034IQJn8zKvIoSRYa4ClExMHi1IaUR/MFSkRaC5Y6Z+HW2r1PA8Ttkoi85FmmXhLGuXpkVjFy00MYmsfLyDFsGN8+bYtnzJYpCFOR6sh2R2ZISIQbcPGUT9rso5BsUlKRVzxGYTaX6aFilRgNinRdJGH2lq2OPC5jnMHWn8otxXEyDdsBLtru3MGFqQpvBnGcLy47H+YkSpz68yCVb2KyTwaKgU2YBSzcxA83uPMawrCg77aKtvg0UGY5dfcX25VG4JwmKdnENGBN89YcuVnTsQU0zHbH739eUhIlPHdhFiYaAal0jsk2iM7qUSEP7ulYo2PZHLxCNC9RQaOslUFM6BGzNTaQ6Ywp2V4NZ+mPD9d/XhbRfZJqC21U2+t3QVKZm5ocwsFktOkiUxJ1YDhdT3yUizwpI6ucuf2662simsDhWqeddipljPPXDoXu3fXDCCUB1XyYjgkX7qB3E2AjzITheOI9LnE8qVrXMNPM7f1ZOco5NtNwo6VhVJprrG50ATZMWBRB3LlGNlmOcpzS9xcP409LQey3cRwrUHtEo2C53Nd7o9JcvyewtEvuxh5HBRYHw1H9Wf3+ub1rfR4gWgKko+nM7V1oIOLD0UWJJSATt5NZjuw7uLBgSu3WGIn1b8bX3lSf1S81G+2aX797UZBPk3R5oDSSUZQ8HzqTow0jERBNRlFjgDutan0NWDQv2WSDOy5XfQtMdhub2Mi/yGyYssud9/hnv3gVhLsg0i2qUWmr8T2+Y6jt+q77coXqshgY2lGncbJ20Xn6ZFFW0eMrzcTxax6q9NPYOZEe93ACV9vuHUF5RbWQKgkVsr99Qg2YTjonomYpD7VURO2HjJVe+l39hgGMKvcfDBcDnuLCxXIEgel4MWNPn9ZvUFKCtE9AtdUqe3tcykg6wXffMzGiWhtcsvkFcrq6b1qWs8hxZ0g92Q6DxOsOot0HUxIry2kgg72caKWr9op0Fb01bkfGDVXNOrhZcIezjoqsYakS1WNOiCptChCxTaiNBs0WsiZWaKnsjPp5qhjpZ5WTa+RcXzWvVBnAWer7HirWmFqoSv99XTYbyBIuVDGD0ZXkg9GH+fCygpJvTd280kpn/b6+TOUHrhJL4+l6fT3F7dlRUZbZtV0fNdA9aV/GWDlrv1qfPb7KXNSTSYzGxJWPJAS2de/+DlXG9XhWh2pv+Zgh/wtiOdyB2XAtQ2T/UspG1Pk/pl//AQ==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Product = _t, ProductID = _t, Category = _t, CategoryID = _t, Segment = _t, SegmentID = _t, #\"Product Image\" = _t, #\"Category Image\" = _t, #\"Segement Color\" = _t, #\"Segment image\" = _t, Price = _t, #\"Price Range\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Product\", type text}, {\"ProductID\", Int64.Type}, {\"Category\", type text}, {\"CategoryID\", Int64.Type}, {\"Segment\", type text}, {\"SegmentID\", Int64.Type}, {\"Product Image\", type text}, {\"Category Image\", type text}, {\"Segement Color\", type text}, {\"Segment image\", type text}, {\"Price\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Column1 = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})\nin\n    #\"Removed Columns\"", "GENERATESERIES(0, 60, 1)", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mimyersm\\Desktop\\Sales & Marketing Datas.xlsx\"), null, true),\n    Data_Sheet = Source{[Item=\"Data\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Data_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ID\", Int64.Type}, {\"ProductID\", Int64.Type}, {\"StoreID\", Int64.Type}, {\"Unit\", Int64.Type}, {\"Week\", Int64.Type}, {\"Gender\", type text}, {\"Age\", Int64.Type}, {\"Status\", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Status\"}),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Removed Columns\", {\"ProductID\"}, Product, {\"ProductID\"}, \"Product\", JoinKind.LeftOuter),\n    #\"Expanded Product\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Product\", {\"Product\", \"Category\", \"Segment\", \"Price\", \"Price Range\"}, {\"Product.1\", \"Category\", \"Segment\", \"Price\", \"Price Range\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded Product\",{{\"Product.1\", \"Product\"}}),\n    #\"Removed Columns1\" = Table.RemoveColumns(#\"Renamed Columns\",{\"ProductID\"}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Removed Columns1\",\"M\",\"Male\",Replacer.ReplaceText,{\"Gender\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"F\",\"Female\",Replacer.ReplaceText,{\"Gender\"}),\n    #\"Merged Queries1\" = Table.NestedJoin(#\"Replaced Value1\", {\"StoreID\"}, Store, {\"StoreID\"}, \"Store\", JoinKind.LeftOuter),\n    #\"Expanded Store\" = Table.ExpandTableColumn(#\"Merged Queries1\", \"Store\", {\"Store\", \"Type\"}, {\"Store.1\", \"Type\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Expanded Store\",{{\"Store.1\", \"Store\"}}),\n    #\"Merged Queries2\" = Table.NestedJoin(#\"Renamed Columns1\", {\"ID\"}, #\"Issues and Promotions\", {\"ID\"}, \"Issues and Promotions\", JoinKind.LeftOuter),\n    #\"Removed Columns2\" = Table.RemoveColumns(#\"Merged Queries2\",{\"StoreID\"}),\n    #\"Expanded Issues and Promotions\" = Table.ExpandTableColumn(#\"Removed Columns2\", \"Issues and Promotions\", {\"Issue\", \"Promotion\"}, {\"Issue\", \"Promotion\"}),\n    #\"Removed Columns3\" = Table.RemoveColumns(#\"Expanded Issues and Promotions\",{\"Week\"}),\n    #\"Merged Queries3\" = Table.NestedJoin(#\"Removed Columns3\", {\"ID\"}, Sales, {\"ID\"}, \"Sales\", JoinKind.LeftOuter),\n    #\"Expanded Sales\" = Table.ExpandTableColumn(#\"Merged Queries3\", \"Sales\", {\"Amount\"}, {\"Amount\"}),\n    #\"Merged Queries4\" = Table.NestedJoin(#\"Expanded Sales\", {\"Age\"}, Age, {\"Age\"}, \"Age.1\", JoinKind.LeftOuter),\n    #\"Expanded Age.1\" = Table.ExpandTableColumn(#\"Merged Queries4\", \"Age.1\", {\"Age Bucket\"}, {\"Age Bucket\"}),\n    #\"Removed Columns4\" = Table.RemoveColumns(#\"Expanded Age.1\",{\"Age\"}),\n    #\"Renamed Columns2\" = Table.RenameColumns(#\"Removed Columns4\",{{\"Age Bucket\", \"Age\"}}),\n    #\"Removed Columns5\" = Table.RemoveColumns(#\"Renamed Columns2\",{\"Price\"})\nin\n    #\"Removed Columns5\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mimyersm\\Desktop\\Sales & Marketing Datas.xlsx\"), null, true),\n    #\"Issues and Promotions_Sheet\" = Source{[Item=\"Issues and Promotions\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Issues and Promotions_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ID\", Int64.Type}, {\"Issue\", type text}, {\"Promotion\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"dc8rDsAgEIThqxA0AnZZHmchCER1k7amty+gaMKYEZ/6pxTtRJs+6jkVWfUe7bp1Nd0D8Ag8Ac97JwvcdSc3XVYn4AzcAxfg4y+F4fzricAT8Lx3tsDHX549vPYwAWfgHrhsvH4=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Age = _t, #\"Age Bucket\" = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Age\", Int64.Type}, {\"Age Bucket\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wci4tKkrNK1HwSy1RCE7MSS1W0lEyVIrViVZyrSgpSlQIKMpPyywBChopxcYCAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Metric = _t, Sort = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Metric\", type text}, {\"Sort\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"pZJBT8IwGIb/SrMz8o2Wjs0bARLloEjkYAiHbpRtGWtnW8Dx651pQnBoCnprmqd93u/Nt1x6T9wgzbZcozuUMMNTqWoUK86KtTwIr+NlxlT6HiAvWZofuep+HbjOWFJ0E1k292mEMQQhjeCt3i/iXTfNN62H5zxUpeVSb9X5HkAbqfjt9j6QHgngMRTJ/Nlpl5a7tBe8RrnYbHdcJFzpa+09oNj3Ybpm40XltG8tZ+1zbnZK/K/6PlAa+MDHU1nE7uEt19a3ikfXywc4CEHF0xf24ZZbri3/Y+8YaN8PIA9mRZa5d85y526kmtIbvzjtwF6jQ8YMuvjr1xAECKGQPZTvi6Mzg7DcTxlu1GKIKA5hXkyS4at7dstZ70weuBpW1dU9E8DRIIJ1PZqQkXtGyzWu1Sc=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [nombre = _t, URL = _t, DLINK = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"nombre\", type text}, {\"URL\", type text}, {\"DLINK\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8kstUQhOzEktVtBVCIwpNTAwMnNU0lHKKCkpKLbS18/MTUxPLc5ITM7WS87P1c/UL8gPKC8IzyhIR1OUWZVapIeuOjfd0shE39zU0kAfoksvPTNNKVYnWikotaS0KI9oS3PDvXLyAlOJttRI38LM1EgfogtiaSwA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Nombre = _t, URL = _t, DLINK = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Nombre\", type text}, {\"URL\", type text}, {\"DLINK\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"lVXbcpswEP0VDc/OxMF2mjzKgBtNsWEwzmXSPChY2JrIKCNEU/ep39JP65dUK18mDYEQZjxjpLO7hz1npft7By98Esy8wOk5Z+YXxUGCUxLNcGjeXOehV4Ngs3eXEs8iBhYRhzidRMnUhvScOLoJEjQmyA/m39IoNkvD93Bo/yTsWSqNrjl7QWZ51JpzGo1JCFwuOqScykcu2DHzpQ1ZkNPFreXec0J8Fy1S+LJ+be+Qy5NFyUvNCo1CupWVBvhZDe5FYZTAltuYacozJUuZa5NTSFUCetCIvuKrNRTXipa25rAGHSd45pPZV9gddSgb5TnPOBUoVnJZZdoyOP9MYChX0kZ9qUWRWRokE7wzykVjUlLoimv+gwGsrsix64JRhXyqKfJN9xV/rDSXBehclyq4Nb49mNSta3NsqXw5SSVgmkXyqBBIS4SzQ71miaa84JtqY8jy7Ana4tY1MszAoHhPrlkmz/S6PIkF1blUG8A2K5MwIx9bGkMaX2ZbAO8EsdM5J3M7cz1nEuB0kQRz9L3q991z5OEYm/khKQkA4l68F3Qo4ituWjGVS5DKvfwQqtdKVqs1UO23gVMphebPgDtrw+2fv7//IJ/ltBIwBQO3Y8j+CIjpCugPBm1h17ysjLmvGF0yBehhxyL7T0Ep+2nJjT4Z94bkeVv4zZpqRHLAvav1AYcLKra/bL5WeV/RIUWmGC3Zqc92fyC4VfBXwRNeLA05phjSa17+N67Ivue52SygQcNWY0y40EyZbhRAYNhqjrGUTxuqnmC5qyUMs2dBt2jOBMu0GZ+d7hDQag9zCC85fI7xyMTMJtWaFysAdfWJPcfsoQ+Yzi7hWthOtPribZkxtTfL8GOTaJ5ZZFebwE2oKdyDfKdQZ4tIxbLdLTYyDnj4Bw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [#\"Design Factor\" = _t, DFSort = _t, Topic = _t, TSort = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"DFSort\", Int64.Type}, {\"TSort\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT #(lf) p.ProductID,#(lf) p.Product,#(lf) p.Category,#(lf) Segment,#(lf) m.[ManufacturerID],#(lf) IIF(p.Manufacturer='Maximus', 'VanArsdel', p.Manufacturer) Manufacturer, #(lf) p.IsCompete#(lf)FROM [SalesAndMarketing].[Product] p, #(lf) (#(lf)  select distinct [ManufacturerID], #(lf)Manufacturer#(lf)  from [IP].[SalesAndMarketing].[Sentiment]#(lf) ) m#(lf)where m.Manufacturer = p.Manufacturer\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Manufacturer\", \"Manufacturer\"}, {\"Category\", \"Category\"}, {\"Segment\", \"Segment\"}, {\"Product\", \"Product\"}, {\"ProductID\", \"ProductID\"}, {\"IsCompete\", \"IsCompeteHide\"}, {\"ManufacturerID\", \"ManufacturerID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Manufacturer\", type text}, {\"Category\", type text}, {\"Segment\", type text}, {\"Product\", type text}, {\"ProductID\", Int64.Type}, {\"IsCompeteHide\", type text}, {\"ManufacturerID\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT [ProductID], dateadd(month, 6, [DATE]) [Date], [Zip], [Units], [Revenue]  FROM [SalesAndMarketing].[SalesFact]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"ProductID\", \"ProductID\"}, {\"Date\", \"Date\"}, {\"Zip\", \"Zip\"}, {\"Units\", \"Units\"}, {\"Revenue\", \"Revenue\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"ProductID\", Int64.Type}, {\"Date\", type datetime}, {\"Zip\", type text}, {\"Units\", Int64.Type}, {\"Revenue\", type number}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT [SalesAndMarketing].[Date].*   FROM [SalesAndMarketing].[Date]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Date\", \"Date\"}, {\"MonthNo\", \"MonthNo\"}, {\"MonthName\", \"MonthName\"}, {\"MonthID\", \"MonthID\"}, {\"Month\", \"Month\"}, {\"Quarter\", \"Quarter\"}, {\"Year\", \"Year\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Date\", type datetime}, {\"MonthNo\", Int64.Type}, {\"MonthName\", type text}, {\"MonthID\", Int64.Type}, {\"Month\", type text}, {\"Quarter\", type text}, {\"Year\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT [SalesAndMarketing].[Geo].*   FROM [SalesAndMarketing].[Geo]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"Zip\", \"Zip\"}, {\"City\", \"City\"}, {\"State\", \"State\"}, {\"Region\", \"Region\"}, {\"District\", \"District\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Zip\", type text}, {\"City\", type text}, {\"State\", type text}, {\"Region\", type text}, {\"District\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"SELECT s.[DateID]+6 DateID ,s.[StateID], s.[ManufacturerID], s.[Score], s.[Manufacturer], dateadd(month, 6, s.[Date]) Date, s.[State],  g.zip, m.ProductID#(lf)FROM [SalesAndMarketing].[Sentiment] s#(lf),#(lf)(#(lf) select distinct state,#(lf) (select top 1 zip from  [SalesAndMarketing].[Geo] where g.state = state) zip#(lf)  from [SalesAndMarketing].[Geo] g#(lf)) g#(lf),#(lf)(#(lf) select distinct Manufacturer,#(lf) (select top 1 ProductID from  [SalesAndMarketing].Product where g.Manufacturer = Manufacturer) ProductID#(lf)  from [SalesAndMarketing].Product g#(lf)) m#(lf)where s.State = g.State and s.Manufacturer = m.Manufacturer\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"DateID\", \"DateID\"}, {\"StateID\", \"StateID\"}, {\"ManufacturerID\", \"ManufacturerID\"}, {\"Score\", \"Score\"}, {\"Manufacturer\", \"Manufacturer\"}, {\"Date\", \"Date\"}, {\"State\", \"State\"}, {\"zip\", \"zip\"}, {\"ProductID\", \"ProductID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"DateID\", Int64.Type}, {\"StateID\", Int64.Type}, {\"ManufacturerID\", Int64.Type}, {\"Score\", type number}, {\"Manufacturer\", type text}, {\"Date\", type datetime}, {\"State\", type text}, {\"zip\", type text}, {\"ProductID\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Sql.Database(\".\", \"IP\", [Query=\"select distinct [ManufacturerID], #(lf) IIF(Manufacturer='Maximus', 'VanArsdel', Manufacturer) Manufacturer#(lf)  from [IP].[SalesAndMarketing].[Sentiment]\"]),\n    #\"Renamed Columns\" = Table.RenameColumns(Source, {{\"ManufacturerID\", \"ManufacturerID\"}, {\"Manufacturer\", \"Manufacturer\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"ManufacturerID\", Int64.Type}, {\"Manufacturer\", type text}})\nin\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "Calendar(Date(Year(MIN('Date'[Date])), 1, 1), Date(Year(MAX('Date'[Date])), 12, 31))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Supplier Quality\\Data\\New\\SupplierQualityObfuscated.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Defect Type\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Defect Type\", \"Defect Type\"}, {\"Defect Type ID\", \"Defect Type ID\"}, {\"Sort\", \"Sort\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Defect Type\", type text}, {\"Defect Type ID\", type number}, {\"Sort\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Supplier Quality\\Data\\New\\SupplierQualityObfuscated.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Defect\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Defect\", \"Defect\"}, {\"Defect ID\", \"Defect ID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Defect\", type text}, {\"Defect ID\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Supplier Quality\\Data\\New\\SupplierQualityObfuscated.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Material Type\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Material Type\", \"Material Type\"}, {\"Material Type ID\", \"Material Type ID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Material Type\", type text}, {\"Material Type ID\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Supplier Quality\\Data\\New\\SupplierQualityObfuscated.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Metrics\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Date\", \"Date\"}, {\"Sub Category ID\", \"Sub Category ID\"}, {\"Plant ID\", \"Plant ID\"}, {\"Vendor ID\", \"Vendor ID\"}, {\"Material ID\", \"Material ID\"}, {\"Defect Type ID\", \"Defect Type ID\"}, {\"Material Type ID\", \"Material Type ID\"}, {\"Defect ID\", \"Defect ID\"}, {\"Defect Qty\", \"Defect Qty\"}, {\"Downtime (min)\", \"Downtime min\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Date\", type datetime}, {\"Sub Category ID\", type number}, {\"Plant ID\", type number}, {\"Vendor ID\", type number}, {\"Material ID\", type number}, {\"Defect Type ID\", type number}, {\"Material Type ID\", type number}, {\"Defect ID\", type number}, {\"Defect Qty\", type number}, {\"Downtime min\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Supplier Quality\\Data\\New\\SupplierQualityObfuscated.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Plant\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Plant\", \"Plant\"}, {\"Plant ID\", \"Plant ID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Plant\", type text}, {\"Plant ID\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Supplier Quality\\Data\\New\\SupplierQualityObfuscated.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Sub Category\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Sub Category\", \"Sub Category\"}, {\"Sub Category ID\", \"Sub Category ID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Sub Category\", type text}, {\"Sub Category ID\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Supplier Quality\\Data\\New\\SupplierQualityObfuscated.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Vendor\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Vendor\", \"Vendor\"}, {\"Vendor ID\", \"Vendor ID\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Vendor\", type text}, {\"Vendor ID\", type number}})\n in\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\mad\\Dropbox\\Work\\Obvience\\IP\\Supplier Quality\\Data\\New\\SupplierQualityObfuscated.xlsx\"), null, true),\n    Sheet = Source{[Item=\"Date\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Promoted Headers\", {{\"Year\", \"Year\"}, {\"Month\", \"MonthNumber\"}, {\"Week\", \"Week\"}, {\"Date\", \"Date\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Year\", type text}, {\"MonthNumber\", Int64.Type}, {\"Week\", Int64.Type}, {\"Date\", type datetime}})\n in\n    #\"Changed Type\"", "Calendar(Date(2015,1,1), Date(2015,1,1))", "Calendar(Date(Year(MIN('Date'[Date])), 1, 1), Date(Year(MAX('Date'[Date])), 12, 31))", "Calendar(Date(2015,1,1), Date(2015,1,1))", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\Justyna\\Documents\\MBAS 2019\\Backorders2.xlsx\"), null, true),\n    #\"bank-full2_Sheet\" = Source{[Item=\"Backorders\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"bank-full2_Sheet\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Manufactured Goods %\", type number}, {\"Demand Type\", type text}, {\"Forecast Accuracy\", type text}, {\"Forecast Bias\", type text}, {\"Product Advertised\", type text}, {\"Multiple Retailers\", type text}, {\"Type\", type text}, {\"Day Contacted\", Int64.Type}, {\"Plant\", type text}, {\"Product \", type text}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Manufactured Goods\"}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\nin\n    #\"Filtered Rows\"", "let\n    Source = Excel.Workbook(AzureStorage.BlobContents(\"https://demostoragepbi.blob.core.windows.net/demo/automl%20demo.xlsx\"), null, true),\n    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Product ID\", Int64.Type}, {\"Location\", type text}, {\"Risk Score\", type text}, {\"Backorder Risk\", Int64.Type}, {\"Distribution Center\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\juluczni\\Documents\\Explanations.xlsx\"), null, true),\n    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Product ID\", Int64.Type}, {\"Location\", type text}, {\"Factor\", type text}, {\"Risk\", Int64.Type}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"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\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [URL = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"URL\", type text}})\nin\n    #\"Changed Type\"", "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlfSUfJKzCtNLKpUitWJVrIA8t1Sk4rgApZAAd/EouQMMM/QAMh1LCjKzIFwDcGyEJWGRiCzSvNSY/JAJEQMLJQDUQCSdyxNLy0uAXONgdzg1IKS1Nyk1CKwiAlQxD+5JB/GNwXy/fLLEArMgAIuqclQgVgA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [ID = _t, Month = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ID\", Int64.Type}, {\"Month\", type text}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Changed Type\",\"June#(lf)June\",\"June\",Replacer.ReplaceText,{\"Month\"})\nin\n    #\"Replaced Value\"", "let\n    Source = Excel.Workbook(File.Contents(\"C:\\Users\\juluczni\\Documents\\Backorders %.xlsx\"), null, true),\n    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Month\", type text}, {\"Region\", type text}, {\"Plant\", type text}, {\"Product Type\", type text}, {\"Forecast Bias\", type text}, {\"Buyer Type\", type text}, {\"Shipment Destination\", type text}, {\"Shipment Type\", type text}, {\"Product ID\", type text}, {\"Forecast Accuracy\", type text}, {\"Brand\", type text}, {\"Backorder %\", type number}, {\"Distribution Center\", type text}, {\"Demand Type\", type text}})\nin\n    #\"Changed Type\""]